
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b9c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408b9c  00408b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00408ba4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000030c  204009b8  0040955c  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400cc4  00409868  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402cc8  0040b86c  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00022459  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004998  00000000  00000000  00042e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b5ce  00000000  00000000  00047830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f80  00000000  00000000  00052dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002168  00000000  00000000  00053d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002269a  00000000  00000000  00055ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012c8d  00000000  00000000  00078580  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094891  00000000  00000000  0008b20d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003be4  00000000  00000000  0011faa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 2c 40 20 e5 0a 40 00 e1 0a 40 00 e1 0a 40 00     .,@ ..@...@...@.
  400010:	e1 0a 40 00 e1 0a 40 00 e1 0a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 0e 40 00 e1 0a 40 00 00 00 00 00 3d 0f 40 00     ..@...@.....=.@.
  40003c:	a5 0f 40 00 e1 0a 40 00 e1 0a 40 00 e1 0a 40 00     ..@...@...@...@.
  40004c:	e1 0a 40 00 e1 0a 40 00 e1 0a 40 00 e1 0a 40 00     ..@...@...@...@.
  40005c:	e1 0a 40 00 e1 0a 40 00 00 00 00 00 7d 07 40 00     ..@...@.....}.@.
  40006c:	8d 07 40 00 9d 07 40 00 e1 0a 40 00 e1 0a 40 00     ..@...@...@...@.
  40007c:	e1 0a 40 00 ad 07 40 00 bd 07 40 00 e1 0a 40 00     ..@...@...@...@.
  40008c:	e1 0a 40 00 e1 0a 40 00 e1 0a 40 00 e1 0a 40 00     ..@...@...@...@.
  40009c:	e1 0a 40 00 bd 2b 40 00 e1 0a 40 00 e1 0a 40 00     ..@..+@...@...@.
  4000ac:	e1 0a 40 00 e1 0a 40 00 a5 06 40 00 e1 0a 40 00     ..@...@...@...@.
  4000bc:	e1 0a 40 00 e1 0a 40 00 e1 0a 40 00 e1 0a 40 00     ..@...@...@...@.
  4000cc:	e1 0a 40 00 00 00 00 00 e1 0a 40 00 00 00 00 00     ..@.......@.....
  4000dc:	e1 0a 40 00 b5 06 40 00 e1 0a 40 00 e1 0a 40 00     ..@...@...@...@.
  4000ec:	e1 0a 40 00 e1 0a 40 00 e1 0a 40 00 e1 0a 40 00     ..@...@...@...@.
  4000fc:	e1 0a 40 00 e1 0a 40 00 e1 0a 40 00 e1 0a 40 00     ..@...@...@...@.
  40010c:	e1 0a 40 00 e1 0a 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 e1 0a 40 00 e1 0a 40 00 e1 0a 40 00     ......@...@...@.
  40012c:	e1 0a 40 00 e1 0a 40 00 00 00 00 00 e1 0a 40 00     ..@...@.......@.
  40013c:	e1 0a 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	00408ba4 	.word	0x00408ba4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408ba4 	.word	0x00408ba4
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	00408ba4 	.word	0x00408ba4
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4d10      	ldr	r5, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4c10      	ldr	r4, [pc, #64]	; (4001fc <sysclk_init+0x50>)
  4001bc:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
  4001c8:	4c0e      	ldr	r4, [pc, #56]	; (400204 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	4a0f      	ldr	r2, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001ce:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001de:	2000      	movs	r0, #0
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	462b      	mov	r3, r5
  4001e8:	4801      	ldr	r0, [pc, #4]	; (4001f0 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4001ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  4001ee:	4718      	bx	r3
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400c89 	.word	0x00400c89
  4001f8:	00400851 	.word	0x00400851
  4001fc:	004008a5 	.word	0x004008a5
  400200:	004008b5 	.word	0x004008b5
  400204:	004008c5 	.word	0x004008c5
  400208:	400e0600 	.word	0x400e0600
  40020c:	20183f01 	.word	0x20183f01
  400210:	004007cd 	.word	0x004007cd
  400214:	004007fd 	.word	0x004007fd
  400218:	00400ba5 	.word	0x00400ba5

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b990      	cbnz	r0, 400248 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  400222:	2a00      	cmp	r2, #0
  400224:	4690      	mov	r8, r2
  400226:	dd0d      	ble.n	400244 <_read+0x28>
  400228:	460c      	mov	r4, r1
  40022a:	188f      	adds	r7, r1, r2
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  400230:	4621      	mov	r1, r4
		ptr++;
  400232:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  400234:	6830      	ldr	r0, [r6, #0]
  400236:	682b      	ldr	r3, [r5, #0]
  400238:	4798      	blx	r3
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  400244:	4680      	mov	r8, r0
  400246:	e7fa      	b.n	40023e <_read+0x22>
		return -1;
  400248:	f04f 38ff 	mov.w	r8, #4294967295
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400bd0 	.word	0x20400bd0
  400254:	20400bc8 	.word	0x20400bc8

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d81e      	bhi.n	40029c <_write+0x44>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  400264:	b1ba      	cbz	r2, 400296 <_write+0x3e>
  400266:	460e      	mov	r6, r1
  400268:	460c      	mov	r4, r1
  40026a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4002a8 <_write+0x50>
  40026e:	4f0d      	ldr	r7, [pc, #52]	; (4002a4 <_write+0x4c>)
  400270:	e001      	b.n	400276 <_write+0x1e>
  400272:	3d01      	subs	r5, #1
  400274:	d00d      	beq.n	400292 <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400276:	f814 1b01 	ldrb.w	r1, [r4], #1
  40027a:	f8d8 0000 	ldr.w	r0, [r8]
  40027e:	683b      	ldr	r3, [r7, #0]
  400280:	4798      	blx	r3
  400282:	2800      	cmp	r0, #0
  400284:	eba4 0006 	sub.w	r0, r4, r6
  400288:	daf3      	bge.n	400272 <_write+0x1a>
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  400296:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40029c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4002a0:	4770      	bx	lr
  4002a2:	bf00      	nop
  4002a4:	20400bcc 	.word	0x20400bcc
  4002a8:	20400bd0 	.word	0x20400bd0

004002ac <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002b2:	4b5a      	ldr	r3, [pc, #360]	; (40041c <board_init+0x170>)
  4002b4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ba:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002be:	4c58      	ldr	r4, [pc, #352]	; (400420 <board_init+0x174>)
  4002c0:	2300      	movs	r3, #0
  4002c2:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c6:	6963      	ldr	r3, [r4, #20]
  4002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4002cc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4002ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002d2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f003 0607 	and.w	r6, r3, #7
    sets    = CCSIDR_SETS(ccsidr);
  4002de:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    ways    = CCSIDR_WAYS(ccsidr);
  4002e2:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002e6:	3604      	adds	r6, #4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e8:	fabc f38c 	clz	r3, ip
    wshift  = __CLZ(ways) & 0x1f;
  4002ec:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  4002f0:	f3bf 8f4f 	dsb	sy
  4002f4:	f04f 35ff 	mov.w	r5, #4294967295
  4002f8:	fa0e f006 	lsl.w	r0, lr, r6
  4002fc:	fa0c f703 	lsl.w	r7, ip, r3
  400300:	fa05 f606 	lsl.w	r6, r5, r6
  400304:	409d      	lsls	r5, r3
{
  400306:	463a      	mov	r2, r7

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400308:	4663      	mov	r3, ip
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0102 	orr.w	r1, r0, r2
              SCB->DCISW = sw;
            } while(tmpways--);
  40030e:	3b01      	subs	r3, #1
  400310:	442a      	add	r2, r5
              SCB->DCISW = sw;
  400312:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
            } while(tmpways--);
  400316:	1c59      	adds	r1, r3, #1
  400318:	d1f7      	bne.n	40030a <board_init+0x5e>
        } while(sets--);
  40031a:	f10e 3eff 	add.w	lr, lr, #4294967295
  40031e:	4430      	add	r0, r6
  400320:	f1be 3fff 	cmp.w	lr, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5a>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	6963      	ldr	r3, [r4, #20]
  40032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400330:	6163      	str	r3, [r4, #20]
  400332:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400336:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033a:	4b3a      	ldr	r3, [pc, #232]	; (400424 <board_init+0x178>)
  40033c:	493a      	ldr	r1, [pc, #232]	; (400428 <board_init+0x17c>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033e:	4a3b      	ldr	r2, [pc, #236]	; (40042c <board_init+0x180>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400340:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40034c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  400350:	f023 0301 	bic.w	r3, r3, #1
  400354:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400358:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40035c:	f023 0301 	bic.w	r3, r3, #1
  400360:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  400364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400368:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40036c:	4c30      	ldr	r4, [pc, #192]	; (400430 <board_init+0x184>)
  40036e:	200a      	movs	r0, #10
  400370:	47a0      	blx	r4
  400372:	200b      	movs	r0, #11
  400374:	47a0      	blx	r4
  400376:	200c      	movs	r0, #12
  400378:	47a0      	blx	r4
  40037a:	2010      	movs	r0, #16
  40037c:	47a0      	blx	r4
  40037e:	2011      	movs	r0, #17
  400380:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400382:	f44f 7580 	mov.w	r5, #256	; 0x100
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400386:	4a2b      	ldr	r2, [pc, #172]	; (400434 <board_init+0x188>)
  400388:	f44f 6300 	mov.w	r3, #2048	; 0x800
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40038c:	492a      	ldr	r1, [pc, #168]	; (400438 <board_init+0x18c>)
		base->PIO_PUDR = mask;
  40038e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400392:	4e2a      	ldr	r6, [pc, #168]	; (40043c <board_init+0x190>)
  400394:	2010      	movs	r0, #16
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400396:	610d      	str	r5, [r1, #16]
		base->PIO_PUDR = mask;
  400398:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039c:	f8c1 52a0 	str.w	r5, [r1, #672]	; 0x2a0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003a0:	f8c1 5230 	str.w	r5, [r1, #560]	; 0x230
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003a4:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003aa:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003b0:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  4003b2:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  4003b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b8:	6f15      	ldr	r5, [r2, #112]	; 0x70
  4003ba:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003be:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003c0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4003c2:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003c6:	6755      	str	r5, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003d0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003d4:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d6:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003da:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003dc:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003de:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003e2:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4003e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003e8:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4003ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003f0:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f2:	6054      	str	r4, [r2, #4]
  4003f4:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
  4003f8:	4303      	orrs	r3, r0
  4003fa:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400400:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  400404:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  400406:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400408:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40040c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  40040e:	4303      	orrs	r3, r0
  400410:	670b      	str	r3, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400412:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  400414:	4303      	orrs	r3, r0
  400416:	674b      	str	r3, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400418:	6048      	str	r0, [r1, #4]
  40041a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40041c:	400e1850 	.word	0x400e1850
  400420:	e000ed00 	.word	0xe000ed00
  400424:	400e0c00 	.word	0x400e0c00
  400428:	5a00080c 	.word	0x5a00080c
  40042c:	5a00070c 	.word	0x5a00070c
  400430:	004008d5 	.word	0x004008d5
  400434:	400e0e00 	.word	0x400e0e00
  400438:	400e1200 	.word	0x400e1200
  40043c:	40088000 	.word	0x40088000

00400440 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (afec == AFEC1) {
  400444:	4f17      	ldr	r7, [pc, #92]	; (4004a4 <afec_process_callback+0x64>)
{
  400446:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400448:	6b02      	ldr	r2, [r0, #48]	; 0x30
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40044a:	2400      	movs	r4, #0
	if (afec == AFEC1) {
  40044c:	1bc7      	subs	r7, r0, r7
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40044e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  400450:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4004a8 <afec_process_callback+0x68>
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400454:	2601      	movs	r6, #1
	if (afec == AFEC1) {
  400456:	fab7 f787 	clz	r7, r7
	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40045a:	4013      	ands	r3, r2
	if (afec == AFEC1) {
  40045c:	097f      	lsrs	r7, r7, #5
	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40045e:	9301      	str	r3, [sp, #4]
  400460:	01bf      	lsls	r7, r7, #6
  400462:	eb08 0507 	add.w	r5, r8, r7
  400466:	e009      	b.n	40047c <afec_process_callback+0x3c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400468:	9a01      	ldr	r2, [sp, #4]
  40046a:	4213      	tst	r3, r2
  40046c:	d002      	beq.n	400474 <afec_process_callback+0x34>
	if (afec_callback_pointer[inst_num][source]) {
  40046e:	682b      	ldr	r3, [r5, #0]
  400470:	b103      	cbz	r3, 400474 <afec_process_callback+0x34>
		afec_callback_pointer[inst_num][source]();
  400472:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400474:	3401      	adds	r4, #1
  400476:	3504      	adds	r5, #4
  400478:	2c10      	cmp	r4, #16
  40047a:	d010      	beq.n	40049e <afec_process_callback+0x5e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40047c:	2c0b      	cmp	r4, #11
			if (status & (1 << cnt)) {
  40047e:	fa06 f304 	lsl.w	r3, r6, r4
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400482:	d9f1      	bls.n	400468 <afec_process_callback+0x28>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400484:	f104 030c 	add.w	r3, r4, #12
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400488:	2c0f      	cmp	r4, #15
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40048a:	fa06 f303 	lsl.w	r3, r6, r3
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40048e:	d1eb      	bne.n	400468 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400490:	9b01      	ldr	r3, [sp, #4]
  400492:	005b      	lsls	r3, r3, #1
  400494:	d503      	bpl.n	40049e <afec_process_callback+0x5e>
	if (afec_callback_pointer[inst_num][source]) {
  400496:	4447      	add	r7, r8
  400498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40049a:	b103      	cbz	r3, 40049e <afec_process_callback+0x5e>
		afec_callback_pointer[inst_num][source]();
  40049c:	4798      	blx	r3
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  40049e:	b002      	add	sp, #8
  4004a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004a4:	40064000 	.word	0x40064000
  4004a8:	20400bd4 	.word	0x20400bd4

004004ac <afec_ch_set_config>:
{
  4004ac:	b470      	push	{r4, r5, r6}
	reg &= ~(0x1u << channel);
  4004ae:	2301      	movs	r3, #1
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004b0:	7814      	ldrb	r4, [r2, #0]
	reg = afec->AFEC_DIFFR;
  4004b2:	6e06      	ldr	r6, [r0, #96]	; 0x60
	reg &= ~(0x03u << (2 * channel));
  4004b4:	2503      	movs	r5, #3
	reg &= ~(0x1u << channel);
  4004b6:	408b      	lsls	r3, r1
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004b8:	2c00      	cmp	r4, #0
	reg &= ~(0x03u << (2 * channel));
  4004ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
	reg &= ~(0x1u << channel);
  4004be:	ea26 0103 	bic.w	r1, r6, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004c2:	bf08      	it	eq
  4004c4:	2300      	moveq	r3, #0
	reg &= ~(0x03u << (2 * channel));
  4004c6:	40a5      	lsls	r5, r4
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004c8:	430b      	orrs	r3, r1
	afec->AFEC_DIFFR = reg;
  4004ca:	6603      	str	r3, [r0, #96]	; 0x60
	reg |= (config->gain) << (2 * channel);
  4004cc:	7851      	ldrb	r1, [r2, #1]
	reg = afec->AFEC_CGR;
  4004ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
	reg |= (config->gain) << (2 * channel);
  4004d0:	40a1      	lsls	r1, r4
	reg &= ~(0x03u << (2 * channel));
  4004d2:	ea23 0305 	bic.w	r3, r3, r5
	reg |= (config->gain) << (2 * channel);
  4004d6:	4319      	orrs	r1, r3
}
  4004d8:	bc70      	pop	{r4, r5, r6}
	afec->AFEC_CGR = reg;
  4004da:	6541      	str	r1, [r0, #84]	; 0x54
}
  4004dc:	4770      	bx	lr
  4004de:	bf00      	nop

004004e0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4004e0:	784b      	ldrb	r3, [r1, #1]
  4004e2:	780a      	ldrb	r2, [r1, #0]
  4004e4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4004e6:	6703      	str	r3, [r0, #112]	; 0x70
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4004e8:	f8d1 3002 	ldr.w	r3, [r1, #2]
  4004ec:	6743      	str	r3, [r0, #116]	; 0x74
  4004ee:	4770      	bx	lr

004004f0 <afec_get_config_defaults>:
		cfg->transfer = 1;
  4004f0:	2301      	movs	r3, #1
	cfg->resolution = AFEC_12_BITS;
  4004f2:	2200      	movs	r2, #0
		cfg->tracktim = 2;
  4004f4:	2102      	movs	r1, #2
	cfg->resolution = AFEC_12_BITS;
  4004f6:	6002      	str	r2, [r0, #0]
		cfg->tracktim = 2;
  4004f8:	7401      	strb	r1, [r0, #16]
		cfg->useq = false;
  4004fa:	74c2      	strb	r2, [r0, #19]
		cfg->transfer = 1;
  4004fc:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4004fe:	7483      	strb	r3, [r0, #18]
		cfg->tag = true;
  400500:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400502:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400504:	7583      	strb	r3, [r0, #22]
{
  400506:	b470      	push	{r4, r5, r6}
	cfg->mck = sysclk_get_cpu_hz();
  400508:	4e04      	ldr	r6, [pc, #16]	; (40051c <afec_get_config_defaults+0x2c>)
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  40050a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
		cfg->afec_clock = 6000000UL;
  40050e:	4d04      	ldr	r5, [pc, #16]	; (400520 <afec_get_config_defaults+0x30>)
	cfg->mck = sysclk_get_cpu_hz();
  400510:	6046      	str	r6, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400512:	6085      	str	r5, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400514:	60c4      	str	r4, [r0, #12]
}
  400516:	bc70      	pop	{r4, r5, r6}
  400518:	4770      	bx	lr
  40051a:	bf00      	nop
  40051c:	11e1a300 	.word	0x11e1a300
  400520:	005b8d80 	.word	0x005b8d80

00400524 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400524:	2200      	movs	r2, #0
   	cfg->gain = AFEC_GAINVALUE_1;
  400526:	2301      	movs	r3, #1
	cfg->diff = false;
  400528:	7002      	strb	r2, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  40052a:	7043      	strb	r3, [r0, #1]
  40052c:	4770      	bx	lr
  40052e:	bf00      	nop

00400530 <afec_temp_sensor_get_config_defaults>:
{
  400530:	b410      	push	{r4}
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400532:	2120      	movs	r1, #32
	cfg->rctc = false;
  400534:	2400      	movs	r4, #0
	cfg->low_threshold= 0xFF;
  400536:	22ff      	movs	r2, #255	; 0xff
	cfg->high_threshold= 0xFFF;
  400538:	f640 73ff 	movw	r3, #4095	; 0xfff
	cfg->rctc = false;
  40053c:	7004      	strb	r4, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  40053e:	7041      	strb	r1, [r0, #1]
	cfg->low_threshold= 0xFF;
  400540:	8042      	strh	r2, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400542:	8083      	strh	r3, [r0, #4]
}
  400544:	f85d 4b04 	ldr.w	r4, [sp], #4
  400548:	4770      	bx	lr
  40054a:	bf00      	nop

0040054c <afec_init>:
	return afec->AFEC_ISR;
  40054c:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40054e:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400552:	d001      	beq.n	400558 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400554:	2019      	movs	r0, #25
  400556:	4770      	bx	lr
	afec->AFEC_CR = AFEC_CR_SWRST;
  400558:	2301      	movs	r3, #1
{
  40055a:	b5f0      	push	{r4, r5, r6, r7, lr}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40055c:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40055e:	1d0b      	adds	r3, r1, #4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400560:	7c0e      	ldrb	r6, [r1, #16]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400562:	f891 e013 	ldrb.w	lr, [r1, #19]
			AFEC_MR_TRACKTIM(config->tracktim) |
  400566:	0636      	lsls	r6, r6, #24
	if(afec == AFEC0) {
  400568:	4c26      	ldr	r4, [pc, #152]	; (400604 <afec_init+0xb8>)
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40056a:	f1be 0f00 	cmp.w	lr, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  40056e:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400572:	bf18      	it	ne
  400574:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  400578:	cba8      	ldmia	r3, {r3, r5, r7}
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40057a:	fbb3 f3f5 	udiv	r3, r3, r5
  40057e:	3b01      	subs	r3, #1
			AFEC_MR_TRANSFER(config->transfer) |
  400580:	7c4d      	ldrb	r5, [r1, #17]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400582:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400586:	021b      	lsls	r3, r3, #8
			AFEC_MR_TRANSFER(config->transfer) |
  400588:	072d      	lsls	r5, r5, #28
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40058a:	b29b      	uxth	r3, r3
			AFEC_MR_TRANSFER(config->transfer) |
  40058c:	f005 5540 	and.w	r5, r5, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400590:	433b      	orrs	r3, r7
  400592:	4333      	orrs	r3, r6
  400594:	432b      	orrs	r3, r5
  400596:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400598:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40059a:	7d0b      	ldrb	r3, [r1, #20]
			(config->stm ? AFEC_EMR_STM : 0);
  40059c:	7d4d      	ldrb	r5, [r1, #21]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40059e:	2b00      	cmp	r3, #0
  4005a0:	680a      	ldr	r2, [r1, #0]
  4005a2:	bf14      	ite	ne
  4005a4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005a8:	2300      	moveq	r3, #0
			(config->stm ? AFEC_EMR_STM : 0);
  4005aa:	2d00      	cmp	r5, #0
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005ac:	ea43 0302 	orr.w	r3, r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005b0:	bf14      	ite	ne
  4005b2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005b6:	2200      	moveq	r2, #0
	if(afec == AFEC0) {
  4005b8:	42a0      	cmp	r0, r4
			(config->resolution) |
  4005ba:	ea43 0302 	orr.w	r3, r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005be:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4005c0:	7d8b      	ldrb	r3, [r1, #22]
  4005c2:	ea4f 2303 	mov.w	r3, r3, lsl #8
  4005c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4005ca:	f043 030c 	orr.w	r3, r3, #12
  4005ce:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4005d2:	d00d      	beq.n	4005f0 <afec_init+0xa4>
	if(afec == AFEC1) {
  4005d4:	4b0c      	ldr	r3, [pc, #48]	; (400608 <afec_init+0xbc>)
  4005d6:	4298      	cmp	r0, r3
  4005d8:	d001      	beq.n	4005de <afec_init+0x92>
	return STATUS_OK;
  4005da:	2000      	movs	r0, #0
  4005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4005de:	4b0b      	ldr	r3, [pc, #44]	; (40060c <afec_init+0xc0>)
			afec_callback_pointer[1][i] = 0;
  4005e0:	2100      	movs	r1, #0
  4005e2:	f103 0240 	add.w	r2, r3, #64	; 0x40
  4005e6:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005ea:	4293      	cmp	r3, r2
  4005ec:	d1fb      	bne.n	4005e6 <afec_init+0x9a>
  4005ee:	e7f4      	b.n	4005da <afec_init+0x8e>
  4005f0:	4b07      	ldr	r3, [pc, #28]	; (400610 <afec_init+0xc4>)
			afec_callback_pointer[0][i] = 0;
  4005f2:	2100      	movs	r1, #0
  4005f4:	f103 0240 	add.w	r2, r3, #64	; 0x40
  4005f8:	f843 1f04 	str.w	r1, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005fc:	429a      	cmp	r2, r3
  4005fe:	d1fb      	bne.n	4005f8 <afec_init+0xac>
  400600:	e7eb      	b.n	4005da <afec_init+0x8e>
  400602:	bf00      	nop
  400604:	4003c000 	.word	0x4003c000
  400608:	40064000 	.word	0x40064000
  40060c:	20400c14 	.word	0x20400c14
  400610:	20400bd0 	.word	0x20400bd0

00400614 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400614:	4b0b      	ldr	r3, [pc, #44]	; (400644 <afec_enable_interrupt+0x30>)
  400616:	4299      	cmp	r1, r3
  400618:	d007      	beq.n	40062a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40061a:	290b      	cmp	r1, #11
  40061c:	d907      	bls.n	40062e <afec_enable_interrupt+0x1a>
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40061e:	290e      	cmp	r1, #14
  400620:	d90a      	bls.n	400638 <afec_enable_interrupt+0x24>
				+ AFEC_INTERRUPT_GAP2);
  400622:	310f      	adds	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400624:	2301      	movs	r3, #1
  400626:	fa03 f101 	lsl.w	r1, r3, r1
  40062a:	6241      	str	r1, [r0, #36]	; 0x24
  40062c:	4770      	bx	lr
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40062e:	d1f9      	bne.n	400624 <afec_enable_interrupt+0x10>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400630:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400634:	6243      	str	r3, [r0, #36]	; 0x24
  400636:	4770      	bx	lr
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400638:	310c      	adds	r1, #12
  40063a:	2301      	movs	r3, #1
  40063c:	fa03 f101 	lsl.w	r1, r3, r1
  400640:	6241      	str	r1, [r0, #36]	; 0x24
  400642:	4770      	bx	lr
  400644:	47000fff 	.word	0x47000fff

00400648 <afec_set_callback>:
{
  400648:	b4f0      	push	{r4, r5, r6, r7}
	if (afec == AFEC1) {
  40064a:	4c12      	ldr	r4, [pc, #72]	; (400694 <afec_set_callback+0x4c>)
  40064c:	42a0      	cmp	r0, r4
  40064e:	d00f      	beq.n	400670 <afec_set_callback+0x28>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400650:	015b      	lsls	r3, r3, #5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400652:	4c11      	ldr	r4, [pc, #68]	; (400698 <afec_set_callback+0x50>)
  400654:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	afec_callback_pointer[i][source] = callback;
  400658:	4e10      	ldr	r6, [pc, #64]	; (40069c <afec_set_callback+0x54>)
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40065a:	b2db      	uxtb	r3, r3
  40065c:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400660:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400664:	f884 331d 	strb.w	r3, [r4, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400668:	6025      	str	r5, [r4, #0]
	afec_enable_interrupt(afec, source);
  40066a:	4b0d      	ldr	r3, [pc, #52]	; (4006a0 <afec_set_callback+0x58>)
}
  40066c:	bcf0      	pop	{r4, r5, r6, r7}
	afec_enable_interrupt(afec, source);
  40066e:	4718      	bx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400670:	015b      	lsls	r3, r3, #5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400672:	4c09      	ldr	r4, [pc, #36]	; (400698 <afec_set_callback+0x50>)
  400674:	f44f 7680 	mov.w	r6, #256	; 0x100
	afec_callback_pointer[i][source] = callback;
  400678:	4f08      	ldr	r7, [pc, #32]	; (40069c <afec_set_callback+0x54>)
  40067a:	f101 0510 	add.w	r5, r1, #16
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40067e:	b2db      	uxtb	r3, r3
  400680:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400684:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400688:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40068c:	6066      	str	r6, [r4, #4]
	afec_enable_interrupt(afec, source);
  40068e:	4b04      	ldr	r3, [pc, #16]	; (4006a0 <afec_set_callback+0x58>)
}
  400690:	bcf0      	pop	{r4, r5, r6, r7}
	afec_enable_interrupt(afec, source);
  400692:	4718      	bx	r3
  400694:	40064000 	.word	0x40064000
  400698:	e000e100 	.word	0xe000e100
  40069c:	20400bd4 	.word	0x20400bd4
  4006a0:	00400615 	.word	0x00400615

004006a4 <AFEC0_Handler>:
/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
	afec_process_callback(AFEC0);
  4006a4:	4801      	ldr	r0, [pc, #4]	; (4006ac <AFEC0_Handler+0x8>)
  4006a6:	4b02      	ldr	r3, [pc, #8]	; (4006b0 <AFEC0_Handler+0xc>)
  4006a8:	4718      	bx	r3
  4006aa:	bf00      	nop
  4006ac:	4003c000 	.word	0x4003c000
  4006b0:	00400441 	.word	0x00400441

004006b4 <AFEC1_Handler>:
/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
	afec_process_callback(AFEC1);
  4006b4:	4801      	ldr	r0, [pc, #4]	; (4006bc <AFEC1_Handler+0x8>)
  4006b6:	4b02      	ldr	r3, [pc, #8]	; (4006c0 <AFEC1_Handler+0xc>)
  4006b8:	4718      	bx	r3
  4006ba:	bf00      	nop
  4006bc:	40064000 	.word	0x40064000
  4006c0:	00400441 	.word	0x00400441

004006c4 <afec_enable>:
	if (afec == AFEC1) {
  4006c4:	4a13      	ldr	r2, [pc, #76]	; (400714 <afec_enable+0x50>)
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4006c6:	4b14      	ldr	r3, [pc, #80]	; (400718 <afec_enable+0x54>)
  4006c8:	4290      	cmp	r0, r2
  4006ca:	bf0c      	ite	eq
  4006cc:	2028      	moveq	r0, #40	; 0x28
  4006ce:	201d      	movne	r0, #29
{
  4006d0:	b500      	push	{lr}
  4006d2:	b083      	sub	sp, #12
	pmc_enable_periph_clk(pid);
  4006d4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4006d6:	4a11      	ldr	r2, [pc, #68]	; (40071c <afec_enable+0x58>)
  4006d8:	7893      	ldrb	r3, [r2, #2]
  4006da:	2bff      	cmp	r3, #255	; 0xff
  4006dc:	d018      	beq.n	400710 <afec_enable+0x4c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006de:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006e2:	fab3 f383 	clz	r3, r3
  4006e6:	095b      	lsrs	r3, r3, #5
  4006e8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006ea:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4006ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006f0:	2000      	movs	r0, #0
  4006f2:	490b      	ldr	r1, [pc, #44]	; (400720 <afec_enable+0x5c>)
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4006f4:	7893      	ldrb	r3, [r2, #2]
  4006f6:	7008      	strb	r0, [r1, #0]
  4006f8:	3301      	adds	r3, #1
	return flags;
  4006fa:	9801      	ldr	r0, [sp, #4]
  4006fc:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4006fe:	b120      	cbz	r0, 40070a <afec_enable+0x46>
		cpu_irq_enable();
  400700:	2301      	movs	r3, #1
  400702:	700b      	strb	r3, [r1, #0]
  400704:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400708:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40070a:	b003      	add	sp, #12
  40070c:	f85d fb04 	ldr.w	pc, [sp], #4
  400710:	e7fe      	b.n	400710 <afec_enable+0x4c>
  400712:	bf00      	nop
  400714:	40064000 	.word	0x40064000
  400718:	004008d5 	.word	0x004008d5
  40071c:	20400bc0 	.word	0x20400bc0
  400720:	20400000 	.word	0x20400000

00400724 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400724:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400726:	4770      	bx	lr

00400728 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400728:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40072a:	4770      	bx	lr

0040072c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40072e:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400730:	4b0f      	ldr	r3, [pc, #60]	; (400770 <pio_handler_process+0x44>)
{
  400732:	460f      	mov	r7, r1
	status = pio_get_interrupt_status(p_pio);
  400734:	4798      	blx	r3
  400736:	4606      	mov	r6, r0
	status &= pio_get_interrupt_mask(p_pio);
  400738:	4b0e      	ldr	r3, [pc, #56]	; (400774 <pio_handler_process+0x48>)
  40073a:	4620      	mov	r0, r4
  40073c:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40073e:	4006      	ands	r6, r0
  400740:	d015      	beq.n	40076e <pio_handler_process+0x42>
  400742:	4c0d      	ldr	r4, [pc, #52]	; (400778 <pio_handler_process+0x4c>)
  400744:	2500      	movs	r5, #0
  400746:	e004      	b.n	400752 <pio_handler_process+0x26>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400748:	2d07      	cmp	r5, #7
  40074a:	f104 0410 	add.w	r4, r4, #16
  40074e:	d00e      	beq.n	40076e <pio_handler_process+0x42>
  400750:	b16e      	cbz	r6, 40076e <pio_handler_process+0x42>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400752:	6823      	ldr	r3, [r4, #0]
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  400754:	3501      	adds	r5, #1
			if (gs_interrupt_sources[i].id == ul_id) {
  400756:	42bb      	cmp	r3, r7
  400758:	d1f6      	bne.n	400748 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40075a:	6861      	ldr	r1, [r4, #4]
  40075c:	4231      	tst	r1, r6
  40075e:	d0f3      	beq.n	400748 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400760:	68e3      	ldr	r3, [r4, #12]
  400762:	4638      	mov	r0, r7
  400764:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400766:	6863      	ldr	r3, [r4, #4]
  400768:	ea26 0603 	bic.w	r6, r6, r3
  40076c:	e7ec      	b.n	400748 <pio_handler_process+0x1c>
  40076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400770:	00400725 	.word	0x00400725
  400774:	00400729 	.word	0x00400729
  400778:	204009d4 	.word	0x204009d4

0040077c <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
  40077c:	210a      	movs	r1, #10
  40077e:	4801      	ldr	r0, [pc, #4]	; (400784 <PIOA_Handler+0x8>)
  400780:	4b01      	ldr	r3, [pc, #4]	; (400788 <PIOA_Handler+0xc>)
  400782:	4718      	bx	r3
  400784:	400e0e00 	.word	0x400e0e00
  400788:	0040072d 	.word	0x0040072d

0040078c <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
  40078c:	210b      	movs	r1, #11
  40078e:	4801      	ldr	r0, [pc, #4]	; (400794 <PIOB_Handler+0x8>)
  400790:	4b01      	ldr	r3, [pc, #4]	; (400798 <PIOB_Handler+0xc>)
  400792:	4718      	bx	r3
  400794:	400e1000 	.word	0x400e1000
  400798:	0040072d 	.word	0x0040072d

0040079c <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
  40079c:	210c      	movs	r1, #12
  40079e:	4801      	ldr	r0, [pc, #4]	; (4007a4 <PIOC_Handler+0x8>)
  4007a0:	4b01      	ldr	r3, [pc, #4]	; (4007a8 <PIOC_Handler+0xc>)
  4007a2:	4718      	bx	r3
  4007a4:	400e1200 	.word	0x400e1200
  4007a8:	0040072d 	.word	0x0040072d

004007ac <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
  4007ac:	2110      	movs	r1, #16
  4007ae:	4801      	ldr	r0, [pc, #4]	; (4007b4 <PIOD_Handler+0x8>)
  4007b0:	4b01      	ldr	r3, [pc, #4]	; (4007b8 <PIOD_Handler+0xc>)
  4007b2:	4718      	bx	r3
  4007b4:	400e1400 	.word	0x400e1400
  4007b8:	0040072d 	.word	0x0040072d

004007bc <PIOE_Handler>:
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
	pio_handler_process(PIOE, ID_PIOE);
  4007bc:	2111      	movs	r1, #17
  4007be:	4801      	ldr	r0, [pc, #4]	; (4007c4 <PIOE_Handler+0x8>)
  4007c0:	4b01      	ldr	r3, [pc, #4]	; (4007c8 <PIOE_Handler+0xc>)
  4007c2:	4718      	bx	r3
  4007c4:	400e1600 	.word	0x400e1600
  4007c8:	0040072d 	.word	0x0040072d

004007cc <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4007cc:	3802      	subs	r0, #2
  4007ce:	2802      	cmp	r0, #2
  4007d0:	d80d      	bhi.n	4007ee <pmc_mck_set_division+0x22>
  4007d2:	4b08      	ldr	r3, [pc, #32]	; (4007f4 <pmc_mck_set_division+0x28>)
  4007d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4007d8:	4907      	ldr	r1, [pc, #28]	; (4007f8 <pmc_mck_set_division+0x2c>)
  4007da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007dc:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4007de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4007e2:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  4007e4:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007e8:	071b      	lsls	r3, r3, #28
  4007ea:	d5fc      	bpl.n	4007e6 <pmc_mck_set_division+0x1a>
}
  4007ec:	4770      	bx	lr
{
  4007ee:	2000      	movs	r0, #0
  4007f0:	e7f2      	b.n	4007d8 <pmc_mck_set_division+0xc>
  4007f2:	bf00      	nop
  4007f4:	0040882c 	.word	0x0040882c
  4007f8:	400e0600 	.word	0x400e0600

004007fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007fc:	4913      	ldr	r1, [pc, #76]	; (40084c <pmc_switch_mck_to_pllack+0x50>)
  4007fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400804:	4318      	orrs	r0, r3
  400806:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400808:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40080a:	0718      	lsls	r0, r3, #28
  40080c:	d407      	bmi.n	40081e <pmc_switch_mck_to_pllack+0x22>
  40080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400812:	e001      	b.n	400818 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400814:	3b01      	subs	r3, #1
  400816:	d016      	beq.n	400846 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400818:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40081a:	0712      	lsls	r2, r2, #28
  40081c:	d5fa      	bpl.n	400814 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40081e:	490b      	ldr	r1, [pc, #44]	; (40084c <pmc_switch_mck_to_pllack+0x50>)
  400820:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400822:	f023 0303 	bic.w	r3, r3, #3
  400826:	f043 0302 	orr.w	r3, r3, #2
  40082a:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40082c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40082e:	0718      	lsls	r0, r3, #28
  400830:	d407      	bmi.n	400842 <pmc_switch_mck_to_pllack+0x46>
  400832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400836:	e001      	b.n	40083c <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400838:	3b01      	subs	r3, #1
  40083a:	d004      	beq.n	400846 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40083c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40083e:	0712      	lsls	r2, r2, #28
  400840:	d5fa      	bpl.n	400838 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  400842:	2000      	movs	r0, #0
}
  400844:	4770      	bx	lr
			return 1;
  400846:	2001      	movs	r0, #1
  400848:	4770      	bx	lr
  40084a:	bf00      	nop
  40084c:	400e0600 	.word	0x400e0600

00400850 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400850:	b9a0      	cbnz	r0, 40087c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400852:	4b0e      	ldr	r3, [pc, #56]	; (40088c <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400854:	0209      	lsls	r1, r1, #8
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400856:	480e      	ldr	r0, [pc, #56]	; (400890 <pmc_switch_mainck_to_xtal+0x40>)
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400858:	b289      	uxth	r1, r1
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40085a:	461a      	mov	r2, r3
{
  40085c:	b430      	push	{r4, r5}
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40085e:	4c0d      	ldr	r4, [pc, #52]	; (400894 <pmc_switch_mainck_to_xtal+0x44>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400860:	6a1d      	ldr	r5, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400862:	402c      	ands	r4, r5
  400864:	4320      	orrs	r0, r4
  400866:	4301      	orrs	r1, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400868:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40086a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40086c:	07db      	lsls	r3, r3, #31
  40086e:	d5fc      	bpl.n	40086a <pmc_switch_mainck_to_xtal+0x1a>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400870:	6a11      	ldr	r1, [r2, #32]
  400872:	4b09      	ldr	r3, [pc, #36]	; (400898 <pmc_switch_mainck_to_xtal+0x48>)
  400874:	430b      	orrs	r3, r1
  400876:	6213      	str	r3, [r2, #32]
	}
}
  400878:	bc30      	pop	{r4, r5}
  40087a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40087c:	4903      	ldr	r1, [pc, #12]	; (40088c <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40087e:	4a07      	ldr	r2, [pc, #28]	; (40089c <pmc_switch_mainck_to_xtal+0x4c>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400880:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400882:	4b07      	ldr	r3, [pc, #28]	; (4008a0 <pmc_switch_mainck_to_xtal+0x50>)
  400884:	4002      	ands	r2, r0
  400886:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400888:	620b      	str	r3, [r1, #32]
  40088a:	4770      	bx	lr
  40088c:	400e0600 	.word	0x400e0600
  400890:	00370001 	.word	0x00370001
  400894:	ffc8fffc 	.word	0xffc8fffc
  400898:	01370000 	.word	0x01370000
  40089c:	fec8fffc 	.word	0xfec8fffc
  4008a0:	01370002 	.word	0x01370002

004008a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008a4:	4b02      	ldr	r3, [pc, #8]	; (4008b0 <pmc_osc_is_ready_mainck+0xc>)
  4008a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4008ac:	4770      	bx	lr
  4008ae:	bf00      	nop
  4008b0:	400e0600 	.word	0x400e0600

004008b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008b4:	4b02      	ldr	r3, [pc, #8]	; (4008c0 <pmc_disable_pllack+0xc>)
  4008b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008ba:	629a      	str	r2, [r3, #40]	; 0x28
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	400e0600 	.word	0x400e0600

004008c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008c4:	4b02      	ldr	r3, [pc, #8]	; (4008d0 <pmc_is_locked_pllack+0xc>)
  4008c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008c8:	f000 0002 	and.w	r0, r0, #2
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	400e0600 	.word	0x400e0600

004008d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4008d4:	283f      	cmp	r0, #63	; 0x3f
  4008d6:	d81a      	bhi.n	40090e <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  4008d8:	281f      	cmp	r0, #31
  4008da:	d80a      	bhi.n	4008f2 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008dc:	2301      	movs	r3, #1
  4008de:	4a0e      	ldr	r2, [pc, #56]	; (400918 <pmc_enable_periph_clk+0x44>)
  4008e0:	fa03 f000 	lsl.w	r0, r3, r0
  4008e4:	6991      	ldr	r1, [r2, #24]
  4008e6:	ea30 0301 	bics.w	r3, r0, r1
  4008ea:	d012      	beq.n	400912 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  4008ec:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008ee:	2000      	movs	r0, #0
  4008f0:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008f2:	2301      	movs	r3, #1
		ul_id -= 32;
  4008f4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008f6:	4a08      	ldr	r2, [pc, #32]	; (400918 <pmc_enable_periph_clk+0x44>)
  4008f8:	fa03 f000 	lsl.w	r0, r3, r0
  4008fc:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  400900:	ea30 0303 	bics.w	r3, r0, r3
  400904:	d005      	beq.n	400912 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400906:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  40090a:	2000      	movs	r0, #0
  40090c:	4770      	bx	lr
		return 1;
  40090e:	2001      	movs	r0, #1
  400910:	4770      	bx	lr
	return 0;
  400912:	2000      	movs	r0, #0
}
  400914:	4770      	bx	lr
  400916:	bf00      	nop
  400918:	400e0600 	.word	0x400e0600

0040091c <tc_init>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40091c:	0189      	lsls	r1, r1, #6
{
  40091e:	b430      	push	{r4, r5}
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400920:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400922:	2502      	movs	r5, #2

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400924:	f04f 34ff 	mov.w	r4, #4294967295
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400928:	5045      	str	r5, [r0, r1]
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40092a:	629c      	str	r4, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40092c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40092e:	605a      	str	r2, [r3, #4]
}
  400930:	bc30      	pop	{r4, r5}
  400932:	4770      	bx	lr

00400934 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400934:	0189      	lsls	r1, r1, #6
  400936:	2305      	movs	r3, #5
  400938:	5043      	str	r3, [r0, r1]
  40093a:	4770      	bx	lr

0040093c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40093c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400940:	61ca      	str	r2, [r1, #28]
  400942:	4770      	bx	lr

00400944 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400944:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400948:	624a      	str	r2, [r1, #36]	; 0x24
  40094a:	4770      	bx	lr

0040094c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40094c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400950:	6a08      	ldr	r0, [r1, #32]
}
  400952:	4770      	bx	lr

00400954 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400954:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400956:	2502      	movs	r5, #2
{
  400958:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40095a:	f04f 0e08 	mov.w	lr, #8
  40095e:	2720      	movs	r7, #32
  400960:	462e      	mov	r6, r5
  400962:	9501      	str	r5, [sp, #4]
  400964:	2580      	movs	r5, #128	; 0x80
{
  400966:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400968:	f8cd e008 	str.w	lr, [sp, #8]
  40096c:	f10d 0e04 	add.w	lr, sp, #4
  400970:	9504      	str	r5, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400972:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400974:	9703      	str	r7, [sp, #12]
  400976:	9405      	str	r4, [sp, #20]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400978:	2400      	movs	r4, #0
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  40097a:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40097e:	4285      	cmp	r5, r0
		ul_low  = ul_high / TC_DIV_FACTOR;
  400980:	ea4f 4715 	mov.w	r7, r5, lsr #16
		if (ul_freq > ul_high) {
  400984:	d30c      	bcc.n	4009a0 <tc_find_mck_divisor+0x4c>
			return 0;
		} else if (ul_freq >= ul_low) {
  400986:	4287      	cmp	r7, r0
  400988:	d90d      	bls.n	4009a6 <tc_find_mck_divisor+0x52>
			ul_index++) {
  40098a:	3401      	adds	r4, #1
	for (ul_index = 0;
  40098c:	2c05      	cmp	r4, #5
  40098e:	d007      	beq.n	4009a0 <tc_find_mck_divisor+0x4c>
  400990:	f85e 6024 	ldr.w	r6, [lr, r4, lsl #2]
		ul_high = ul_mck / divisors[ul_index];
  400994:	fbb1 f5f6 	udiv	r5, r1, r6
		if (ul_freq > ul_high) {
  400998:	4285      	cmp	r5, r0
		ul_low  = ul_high / TC_DIV_FACTOR;
  40099a:	ea4f 4715 	mov.w	r7, r5, lsr #16
		if (ul_freq > ul_high) {
  40099e:	d2f2      	bcs.n	400986 <tc_find_mck_divisor+0x32>
			return 0;
  4009a0:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4009a2:	b007      	add	sp, #28
  4009a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (p_uldiv) {
  4009a6:	b102      	cbz	r2, 4009aa <tc_find_mck_divisor+0x56>
		*p_uldiv = divisors[ul_index];
  4009a8:	6016      	str	r6, [r2, #0]
	if (p_ultcclks) {
  4009aa:	b11b      	cbz	r3, 4009b4 <tc_find_mck_divisor+0x60>
	return 1;
  4009ac:	2001      	movs	r0, #1
		*p_ultcclks = ul_index;
  4009ae:	601c      	str	r4, [r3, #0]
}
  4009b0:	b007      	add	sp, #28
  4009b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 1;
  4009b4:	2001      	movs	r0, #1
  4009b6:	e7f4      	b.n	4009a2 <tc_find_mck_divisor+0x4e>

004009b8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4009b8:	6943      	ldr	r3, [r0, #20]
  4009ba:	079b      	lsls	r3, r3, #30
  4009bc:	d502      	bpl.n	4009c4 <uart_write+0xc>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4009be:	61c1      	str	r1, [r0, #28]
	return 0;
  4009c0:	2000      	movs	r0, #0
  4009c2:	4770      	bx	lr
		return 1;
  4009c4:	2001      	movs	r0, #1
}
  4009c6:	4770      	bx	lr

004009c8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4009c8:	6943      	ldr	r3, [r0, #20]
  4009ca:	07db      	lsls	r3, r3, #31
  4009cc:	d503      	bpl.n	4009d6 <uart_read+0xe>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4009ce:	6983      	ldr	r3, [r0, #24]
	return 0;
  4009d0:	2000      	movs	r0, #0
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4009d2:	700b      	strb	r3, [r1, #0]
	return 0;
  4009d4:	4770      	bx	lr
		return 1;
  4009d6:	2001      	movs	r0, #1
}
  4009d8:	4770      	bx	lr
  4009da:	bf00      	nop

004009dc <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4009dc:	010b      	lsls	r3, r1, #4
  4009de:	4293      	cmp	r3, r2
{
  4009e0:	b410      	push	{r4}
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4009e2:	d814      	bhi.n	400a0e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4009e4:	0859      	lsrs	r1, r3, #1
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4009e6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4009ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4009ee:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4009f2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4009f4:	1e59      	subs	r1, r3, #1
  4009f6:	42a1      	cmp	r1, r4
  4009f8:	d815      	bhi.n	400a26 <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4009fa:	0412      	lsls	r2, r2, #16

	return 0;
  4009fc:	2100      	movs	r1, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4009fe:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400a02:	431a      	orrs	r2, r3
  400a04:	6202      	str	r2, [r0, #32]
}
  400a06:	4608      	mov	r0, r1
  400a08:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a0c:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a0e:	00c9      	lsls	r1, r1, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a10:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a14:	084b      	lsrs	r3, r1, #1
  400a16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400a1a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400a1e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a20:	1e59      	subs	r1, r3, #1
  400a22:	42a1      	cmp	r1, r4
  400a24:	d904      	bls.n	400a30 <usart_set_async_baudrate+0x54>
		return 1;
  400a26:	2101      	movs	r1, #1
}
  400a28:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a2c:	4608      	mov	r0, r1
  400a2e:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
  400a30:	6841      	ldr	r1, [r0, #4]
  400a32:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400a36:	6041      	str	r1, [r0, #4]
  400a38:	e7df      	b.n	4009fa <usart_set_async_baudrate+0x1e>
  400a3a:	bf00      	nop

00400a3c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_usart->US_MR = 0;
  400a3e:	2400      	movs	r4, #0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400a40:	4d14      	ldr	r5, [pc, #80]	; (400a94 <usart_init_rs232+0x58>)
	p_usart->US_CR = US_CR_RSTSTA;
  400a42:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400a46:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400a4a:	2724      	movs	r7, #36	; 0x24
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400a4c:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400a50:	6044      	str	r4, [r0, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400a52:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	p_usart->US_RTOR = 0;
  400a56:	6244      	str	r4, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400a58:	6284      	str	r4, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400a5a:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400a5e:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400a60:	6006      	str	r6, [r0, #0]
	ul_reg_val = 0;
  400a62:	4e0d      	ldr	r6, [pc, #52]	; (400a98 <usart_init_rs232+0x5c>)
	p_usart->US_CR = US_CR_RTSDIS;
  400a64:	6005      	str	r5, [r0, #0]
	ul_reg_val = 0;
  400a66:	6034      	str	r4, [r6, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400a68:	b189      	cbz	r1, 400a8e <usart_init_rs232+0x52>
  400a6a:	460d      	mov	r5, r1
  400a6c:	4b0b      	ldr	r3, [pc, #44]	; (400a9c <usart_init_rs232+0x60>)
  400a6e:	6809      	ldr	r1, [r1, #0]
  400a70:	4604      	mov	r4, r0
  400a72:	4798      	blx	r3
  400a74:	b958      	cbnz	r0, 400a8e <usart_init_rs232+0x52>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a76:	686a      	ldr	r2, [r5, #4]
  400a78:	68ab      	ldr	r3, [r5, #8]
  400a7a:	692f      	ldr	r7, [r5, #16]
  400a7c:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400a7e:	68e9      	ldr	r1, [r5, #12]
	p_usart->US_MR |= ul_reg_val;
  400a80:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a82:	433b      	orrs	r3, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400a84:	430b      	orrs	r3, r1
	p_usart->US_MR |= ul_reg_val;
  400a86:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a88:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
  400a8a:	6062      	str	r2, [r4, #4]
}
  400a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  400a8e:	2001      	movs	r0, #1
  400a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a92:	bf00      	nop
  400a94:	55534100 	.word	0x55534100
  400a98:	20400a44 	.word	0x20400a44
  400a9c:	004009dd 	.word	0x004009dd

00400aa0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400aa0:	2340      	movs	r3, #64	; 0x40
  400aa2:	6003      	str	r3, [r0, #0]
  400aa4:	4770      	bx	lr
  400aa6:	bf00      	nop

00400aa8 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400aa8:	2310      	movs	r3, #16
  400aaa:	6003      	str	r3, [r0, #0]
  400aac:	4770      	bx	lr
  400aae:	bf00      	nop

00400ab0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400ab0:	6942      	ldr	r2, [r0, #20]
{
  400ab2:	4603      	mov	r3, r0
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400ab4:	0792      	lsls	r2, r2, #30
  400ab6:	d504      	bpl.n	400ac2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400ab8:	f3c1 0108 	ubfx	r1, r1, #0, #9
	return 0;
  400abc:	2000      	movs	r0, #0
	p_usart->US_THR = US_THR_TXCHR(c);
  400abe:	61d9      	str	r1, [r3, #28]
	return 0;
  400ac0:	4770      	bx	lr
		return 1;
  400ac2:	2001      	movs	r0, #1
}
  400ac4:	4770      	bx	lr
  400ac6:	bf00      	nop

00400ac8 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400ac8:	6943      	ldr	r3, [r0, #20]
  400aca:	07db      	lsls	r3, r3, #31
  400acc:	d505      	bpl.n	400ada <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400ace:	6983      	ldr	r3, [r0, #24]
	return 0;
  400ad0:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400ad6:	600b      	str	r3, [r1, #0]
	return 0;
  400ad8:	4770      	bx	lr
		return 1;
  400ada:	2001      	movs	r0, #1
}
  400adc:	4770      	bx	lr
  400ade:	bf00      	nop

00400ae0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ae0:	e7fe      	b.n	400ae0 <Dummy_Handler>
  400ae2:	bf00      	nop

00400ae4 <Reset_Handler>:
        if (pSrc != pDest) {
  400ae4:	4924      	ldr	r1, [pc, #144]	; (400b78 <Reset_Handler+0x94>)
  400ae6:	4a25      	ldr	r2, [pc, #148]	; (400b7c <Reset_Handler+0x98>)
  400ae8:	4291      	cmp	r1, r2
{
  400aea:	b500      	push	{lr}
  400aec:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400aee:	d00e      	beq.n	400b0e <Reset_Handler+0x2a>
                for (; pDest < &_erelocate;) {
  400af0:	4823      	ldr	r0, [pc, #140]	; (400b80 <Reset_Handler+0x9c>)
  400af2:	4282      	cmp	r2, r0
  400af4:	d20b      	bcs.n	400b0e <Reset_Handler+0x2a>
  400af6:	43d3      	mvns	r3, r2
  400af8:	4403      	add	r3, r0
  400afa:	f023 0303 	bic.w	r3, r3, #3
  400afe:	3304      	adds	r3, #4
  400b00:	4413      	add	r3, r2
                        *pDest++ = *pSrc++;
  400b02:	f851 0b04 	ldr.w	r0, [r1], #4
  400b06:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400b0a:	429a      	cmp	r2, r3
  400b0c:	d1f9      	bne.n	400b02 <Reset_Handler+0x1e>
        for (pDest = &_szero; pDest < &_ezero;) {
  400b0e:	4a1d      	ldr	r2, [pc, #116]	; (400b84 <Reset_Handler+0xa0>)
  400b10:	491d      	ldr	r1, [pc, #116]	; (400b88 <Reset_Handler+0xa4>)
  400b12:	428a      	cmp	r2, r1
  400b14:	d20a      	bcs.n	400b2c <Reset_Handler+0x48>
  400b16:	43d3      	mvns	r3, r2
                *pDest++ = 0;
  400b18:	2000      	movs	r0, #0
  400b1a:	440b      	add	r3, r1
  400b1c:	f023 0303 	bic.w	r3, r3, #3
  400b20:	3304      	adds	r3, #4
  400b22:	4413      	add	r3, r2
  400b24:	f842 0b04 	str.w	r0, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400b28:	429a      	cmp	r2, r3
  400b2a:	d1fb      	bne.n	400b24 <Reset_Handler+0x40>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b2c:	4b17      	ldr	r3, [pc, #92]	; (400b8c <Reset_Handler+0xa8>)
  400b2e:	4a18      	ldr	r2, [pc, #96]	; (400b90 <Reset_Handler+0xac>)
  400b30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400b34:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b36:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400b3a:	fab3 f383 	clz	r3, r3
  400b3e:	095b      	lsrs	r3, r3, #5
  400b40:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400b42:	b672      	cpsid	i
  400b44:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b48:	4a12      	ldr	r2, [pc, #72]	; (400b94 <Reset_Handler+0xb0>)
  400b4a:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400b4c:	4912      	ldr	r1, [pc, #72]	; (400b98 <Reset_Handler+0xb4>)
  400b4e:	7013      	strb	r3, [r2, #0]
	return flags;
  400b50:	9801      	ldr	r0, [sp, #4]
  400b52:	680b      	ldr	r3, [r1, #0]
  400b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400b58:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  400b5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b5e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400b62:	b120      	cbz	r0, 400b6e <Reset_Handler+0x8a>
		cpu_irq_enable();
  400b64:	2301      	movs	r3, #1
  400b66:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  400b68:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b6c:	b662      	cpsie	i
        __libc_init_array();
  400b6e:	4b0b      	ldr	r3, [pc, #44]	; (400b9c <Reset_Handler+0xb8>)
  400b70:	4798      	blx	r3
        main();
  400b72:	4b0b      	ldr	r3, [pc, #44]	; (400ba0 <Reset_Handler+0xbc>)
  400b74:	4798      	blx	r3
  400b76:	e7fe      	b.n	400b76 <Reset_Handler+0x92>
  400b78:	00408ba4 	.word	0x00408ba4
  400b7c:	20400000 	.word	0x20400000
  400b80:	204009b8 	.word	0x204009b8
  400b84:	204009b8 	.word	0x204009b8
  400b88:	20400cc4 	.word	0x20400cc4
  400b8c:	00400000 	.word	0x00400000
  400b90:	e000ed00 	.word	0xe000ed00
  400b94:	20400000 	.word	0x20400000
  400b98:	e000ed88 	.word	0xe000ed88
  400b9c:	00403781 	.word	0x00403781
  400ba0:	00402e01 	.word	0x00402e01

00400ba4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400ba4:	4a31      	ldr	r2, [pc, #196]	; (400c6c <SystemCoreClockUpdate+0xc8>)
  400ba6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ba8:	f003 0303 	and.w	r3, r3, #3
  400bac:	2b01      	cmp	r3, #1
  400bae:	d03d      	beq.n	400c2c <SystemCoreClockUpdate+0x88>
  400bb0:	d326      	bcc.n	400c00 <SystemCoreClockUpdate+0x5c>
  400bb2:	2b02      	cmp	r3, #2
  400bb4:	d00d      	beq.n	400bd2 <SystemCoreClockUpdate+0x2e>
  400bb6:	492e      	ldr	r1, [pc, #184]	; (400c70 <SystemCoreClockUpdate+0xcc>)
  400bb8:	680b      	ldr	r3, [r1, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400bba:	482c      	ldr	r0, [pc, #176]	; (400c6c <SystemCoreClockUpdate+0xc8>)
  400bbc:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400bbe:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400bc2:	2a70      	cmp	r2, #112	; 0x70
  400bc4:	d02c      	beq.n	400c20 <SystemCoreClockUpdate+0x7c>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400bc6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400bc8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400bcc:	40d3      	lsrs	r3, r2
  400bce:	600b      	str	r3, [r1, #0]
  400bd0:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400bd2:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400bd4:	4926      	ldr	r1, [pc, #152]	; (400c70 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400bd6:	01db      	lsls	r3, r3, #7
  400bd8:	d538      	bpl.n	400c4c <SystemCoreClockUpdate+0xa8>
            SystemCoreClock *= 3U;
  400bda:	4b26      	ldr	r3, [pc, #152]	; (400c74 <SystemCoreClockUpdate+0xd0>)
  400bdc:	600b      	str	r3, [r1, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400bde:	4823      	ldr	r0, [pc, #140]	; (400c6c <SystemCoreClockUpdate+0xc8>)
  400be0:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400be2:	f002 0203 	and.w	r2, r2, #3
  400be6:	2a02      	cmp	r2, #2
  400be8:	d1e7      	bne.n	400bba <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bea:	6a82      	ldr	r2, [r0, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bec:	6a80      	ldr	r0, [r0, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bee:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bf2:	b2c0      	uxtb	r0, r0
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400bf4:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400bf8:	fbb3 f3f0 	udiv	r3, r3, r0
  400bfc:	600b      	str	r3, [r1, #0]
  400bfe:	e7dc      	b.n	400bba <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400c00:	4b1d      	ldr	r3, [pc, #116]	; (400c78 <SystemCoreClockUpdate+0xd4>)
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c02:	491b      	ldr	r1, [pc, #108]	; (400c70 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400c04:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400c06:	4819      	ldr	r0, [pc, #100]	; (400c6c <SystemCoreClockUpdate+0xc8>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400c08:	061b      	lsls	r3, r3, #24
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c0a:	bf4c      	ite	mi
  400c0c:	f44f 4300 	movmi.w	r3, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c10:	f44f 43fa 	movpl.w	r3, #32000	; 0x7d00
  400c14:	600b      	str	r3, [r1, #0]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400c16:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400c18:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400c1c:	2a70      	cmp	r2, #112	; 0x70
  400c1e:	d1d2      	bne.n	400bc6 <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  400c20:	4a16      	ldr	r2, [pc, #88]	; (400c7c <SystemCoreClockUpdate+0xd8>)
  400c22:	fba2 2303 	umull	r2, r3, r2, r3
  400c26:	085b      	lsrs	r3, r3, #1
  400c28:	600b      	str	r3, [r1, #0]
  400c2a:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400c2c:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c2e:	4910      	ldr	r1, [pc, #64]	; (400c70 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400c30:	01d8      	lsls	r0, r3, #7
  400c32:	d408      	bmi.n	400c46 <SystemCoreClockUpdate+0xa2>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c34:	4b12      	ldr	r3, [pc, #72]	; (400c80 <SystemCoreClockUpdate+0xdc>)
  400c36:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400c38:	6a12      	ldr	r2, [r2, #32]
  400c3a:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400c3e:	2a10      	cmp	r2, #16
  400c40:	d011      	beq.n	400c66 <SystemCoreClockUpdate+0xc2>
  400c42:	2a20      	cmp	r2, #32
  400c44:	d1b9      	bne.n	400bba <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 3U;
  400c46:	4b0b      	ldr	r3, [pc, #44]	; (400c74 <SystemCoreClockUpdate+0xd0>)
  400c48:	600b      	str	r3, [r1, #0]
          break;
  400c4a:	e7b6      	b.n	400bba <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c4c:	4b0c      	ldr	r3, [pc, #48]	; (400c80 <SystemCoreClockUpdate+0xdc>)
  400c4e:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400c50:	6a12      	ldr	r2, [r2, #32]
  400c52:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400c56:	2a10      	cmp	r2, #16
  400c58:	d002      	beq.n	400c60 <SystemCoreClockUpdate+0xbc>
  400c5a:	2a20      	cmp	r2, #32
  400c5c:	d0bd      	beq.n	400bda <SystemCoreClockUpdate+0x36>
  400c5e:	e7be      	b.n	400bde <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400c60:	4b08      	ldr	r3, [pc, #32]	; (400c84 <SystemCoreClockUpdate+0xe0>)
  400c62:	600b      	str	r3, [r1, #0]
          break;
  400c64:	e7bb      	b.n	400bde <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400c66:	4b07      	ldr	r3, [pc, #28]	; (400c84 <SystemCoreClockUpdate+0xe0>)
  400c68:	600b      	str	r3, [r1, #0]
          break;
  400c6a:	e7a6      	b.n	400bba <SystemCoreClockUpdate+0x16>
  400c6c:	400e0600 	.word	0x400e0600
  400c70:	20400004 	.word	0x20400004
  400c74:	00b71b00 	.word	0x00b71b00
  400c78:	400e1810 	.word	0x400e1810
  400c7c:	aaaaaaab 	.word	0xaaaaaaab
  400c80:	003d0900 	.word	0x003d0900
  400c84:	007a1200 	.word	0x007a1200

00400c88 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400c88:	4b16      	ldr	r3, [pc, #88]	; (400ce4 <system_init_flash+0x5c>)
  400c8a:	4298      	cmp	r0, r3
  400c8c:	d917      	bls.n	400cbe <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400c8e:	4b16      	ldr	r3, [pc, #88]	; (400ce8 <system_init_flash+0x60>)
  400c90:	4298      	cmp	r0, r3
  400c92:	d910      	bls.n	400cb6 <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400c94:	4b15      	ldr	r3, [pc, #84]	; (400cec <system_init_flash+0x64>)
  400c96:	4298      	cmp	r0, r3
  400c98:	d91a      	bls.n	400cd0 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400c9a:	4b15      	ldr	r3, [pc, #84]	; (400cf0 <system_init_flash+0x68>)
  400c9c:	4298      	cmp	r0, r3
  400c9e:	d913      	bls.n	400cc8 <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400ca0:	4b14      	ldr	r3, [pc, #80]	; (400cf4 <system_init_flash+0x6c>)
  400ca2:	4298      	cmp	r0, r3
  400ca4:	d918      	bls.n	400cd8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400ca6:	4b14      	ldr	r3, [pc, #80]	; (400cf8 <system_init_flash+0x70>)
  400ca8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400caa:	4b14      	ldr	r3, [pc, #80]	; (400cfc <system_init_flash+0x74>)
  400cac:	bf94      	ite	ls
  400cae:	4a14      	ldrls	r2, [pc, #80]	; (400d00 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400cb0:	4a14      	ldrhi	r2, [pc, #80]	; (400d04 <system_init_flash+0x7c>)
  400cb2:	601a      	str	r2, [r3, #0]
  400cb4:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400cb6:	4b11      	ldr	r3, [pc, #68]	; (400cfc <system_init_flash+0x74>)
  400cb8:	4a13      	ldr	r2, [pc, #76]	; (400d08 <system_init_flash+0x80>)
  400cba:	601a      	str	r2, [r3, #0]
  400cbc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400cbe:	4b0f      	ldr	r3, [pc, #60]	; (400cfc <system_init_flash+0x74>)
  400cc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400cc4:	601a      	str	r2, [r3, #0]
  400cc6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400cc8:	4b0c      	ldr	r3, [pc, #48]	; (400cfc <system_init_flash+0x74>)
  400cca:	4a10      	ldr	r2, [pc, #64]	; (400d0c <system_init_flash+0x84>)
  400ccc:	601a      	str	r2, [r3, #0]
  400cce:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400cd0:	4b0a      	ldr	r3, [pc, #40]	; (400cfc <system_init_flash+0x74>)
  400cd2:	4a0f      	ldr	r2, [pc, #60]	; (400d10 <system_init_flash+0x88>)
  400cd4:	601a      	str	r2, [r3, #0]
  400cd6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cd8:	4b08      	ldr	r3, [pc, #32]	; (400cfc <system_init_flash+0x74>)
  400cda:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400cde:	601a      	str	r2, [r3, #0]
  400ce0:	4770      	bx	lr
  400ce2:	bf00      	nop
  400ce4:	015ef3bf 	.word	0x015ef3bf
  400ce8:	02bde77f 	.word	0x02bde77f
  400cec:	041cdb3f 	.word	0x041cdb3f
  400cf0:	057bceff 	.word	0x057bceff
  400cf4:	06dac2bf 	.word	0x06dac2bf
  400cf8:	0839b67f 	.word	0x0839b67f
  400cfc:	400e0c00 	.word	0x400e0c00
  400d00:	04000500 	.word	0x04000500
  400d04:	04000600 	.word	0x04000600
  400d08:	04000100 	.word	0x04000100
  400d0c:	04000300 	.word	0x04000300
  400d10:	04000200 	.word	0x04000200

00400d14 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d14:	4a0d      	ldr	r2, [pc, #52]	; (400d4c <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  400d16:	490e      	ldr	r1, [pc, #56]	; (400d50 <_sbrk+0x3c>)
	if (heap == NULL) {
  400d18:	6813      	ldr	r3, [r2, #0]
  400d1a:	b143      	cbz	r3, 400d2e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  400d1c:	4418      	add	r0, r3
  400d1e:	4281      	cmp	r1, r0
  400d20:	db02      	blt.n	400d28 <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d22:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d24:	4618      	mov	r0, r3
  400d26:	4770      	bx	lr
		return (caddr_t) -1;	
  400d28:	f04f 30ff 	mov.w	r0, #4294967295
  400d2c:	4770      	bx	lr
{
  400d2e:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  400d30:	4c08      	ldr	r4, [pc, #32]	; (400d54 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  400d32:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  400d34:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  400d36:	4281      	cmp	r1, r0
  400d38:	db04      	blt.n	400d44 <_sbrk+0x30>
	heap += incr;
  400d3a:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  400d3c:	4620      	mov	r0, r4
}
  400d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d42:	4770      	bx	lr
		return (caddr_t) -1;	
  400d44:	f04f 30ff 	mov.w	r0, #4294967295
  400d48:	e7f9      	b.n	400d3e <_sbrk+0x2a>
  400d4a:	bf00      	nop
  400d4c:	20400a48 	.word	0x20400a48
  400d50:	2045fffc 	.word	0x2045fffc
  400d54:	20402ec8 	.word	0x20402ec8

00400d58 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d58:	f04f 30ff 	mov.w	r0, #4294967295
  400d5c:	4770      	bx	lr
  400d5e:	bf00      	nop

00400d60 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  400d64:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  400d66:	604b      	str	r3, [r1, #4]
}
  400d68:	4770      	bx	lr
  400d6a:	bf00      	nop

00400d6c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400d6c:	2001      	movs	r0, #1
  400d6e:	4770      	bx	lr

00400d70 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d70:	2000      	movs	r0, #0
  400d72:	4770      	bx	lr

00400d74 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d74:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400d78:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400d7c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400d7e:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d80:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d82:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d84:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d88:	4770      	bx	lr
  400d8a:	bf00      	nop

00400d8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400d8c:	2300      	movs	r3, #0
  400d8e:	6103      	str	r3, [r0, #16]
  400d90:	4770      	bx	lr
  400d92:	bf00      	nop

00400d94 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400d94:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400d96:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400d98:	689a      	ldr	r2, [r3, #8]
  400d9a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400d9c:	689a      	ldr	r2, [r3, #8]
  400d9e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400da0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400da2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400da4:	6803      	ldr	r3, [r0, #0]
  400da6:	3301      	adds	r3, #1
  400da8:	6003      	str	r3, [r0, #0]
  400daa:	4770      	bx	lr

00400dac <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400dac:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400dae:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400db0:	1c6b      	adds	r3, r5, #1
  400db2:	d011      	beq.n	400dd8 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400db4:	f100 0208 	add.w	r2, r0, #8
  400db8:	e000      	b.n	400dbc <vListInsert+0x10>
  400dba:	461a      	mov	r2, r3
  400dbc:	6853      	ldr	r3, [r2, #4]
  400dbe:	681c      	ldr	r4, [r3, #0]
  400dc0:	42a5      	cmp	r5, r4
  400dc2:	d2fa      	bcs.n	400dba <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400dc4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400dc6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400dc8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400dca:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400dcc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400dce:	6803      	ldr	r3, [r0, #0]
  400dd0:	3301      	adds	r3, #1
}
  400dd2:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
  400dd4:	6003      	str	r3, [r0, #0]
}
  400dd6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
  400dd8:	6902      	ldr	r2, [r0, #16]
  400dda:	6853      	ldr	r3, [r2, #4]
  400ddc:	e7f2      	b.n	400dc4 <vListInsert+0x18>
  400dde:	bf00      	nop

00400de0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400de0:	6842      	ldr	r2, [r0, #4]
  400de2:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400de4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400de6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400de8:	6882      	ldr	r2, [r0, #8]
  400dea:	6841      	ldr	r1, [r0, #4]
  400dec:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400dee:	685a      	ldr	r2, [r3, #4]
  400df0:	4290      	cmp	r0, r2
  400df2:	d005      	beq.n	400e00 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400df4:	2200      	movs	r2, #0
  400df6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400df8:	6818      	ldr	r0, [r3, #0]
  400dfa:	3801      	subs	r0, #1
  400dfc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400dfe:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400e00:	6882      	ldr	r2, [r0, #8]
  400e02:	605a      	str	r2, [r3, #4]
  400e04:	e7f6      	b.n	400df4 <uxListRemove+0x14>
  400e06:	bf00      	nop

00400e08 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400e08:	4b0c      	ldr	r3, [pc, #48]	; (400e3c <prvTaskExitError+0x34>)
  400e0a:	681b      	ldr	r3, [r3, #0]
  400e0c:	3301      	adds	r3, #1
  400e0e:	d00a      	beq.n	400e26 <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400e10:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e14:	b672      	cpsid	i
  400e16:	f383 8811 	msr	BASEPRI, r3
  400e1a:	f3bf 8f6f 	isb	sy
  400e1e:	f3bf 8f4f 	dsb	sy
  400e22:	b662      	cpsie	i
  400e24:	e7fe      	b.n	400e24 <prvTaskExitError+0x1c>
  400e26:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e2a:	b672      	cpsid	i
  400e2c:	f383 8811 	msr	BASEPRI, r3
  400e30:	f3bf 8f6f 	isb	sy
  400e34:	f3bf 8f4f 	dsb	sy
  400e38:	b662      	cpsie	i
  400e3a:	e7fe      	b.n	400e3a <prvTaskExitError+0x32>
  400e3c:	20400008 	.word	0x20400008

00400e40 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400e40:	4806      	ldr	r0, [pc, #24]	; (400e5c <prvPortStartFirstTask+0x1c>)
  400e42:	6800      	ldr	r0, [r0, #0]
  400e44:	6800      	ldr	r0, [r0, #0]
  400e46:	f380 8808 	msr	MSP, r0
  400e4a:	b662      	cpsie	i
  400e4c:	b661      	cpsie	f
  400e4e:	f3bf 8f4f 	dsb	sy
  400e52:	f3bf 8f6f 	isb	sy
  400e56:	df00      	svc	0
  400e58:	bf00      	nop
  400e5a:	0000      	.short	0x0000
  400e5c:	e000ed08 	.word	0xe000ed08

00400e60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400e60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400e70 <vPortEnableVFP+0x10>
  400e64:	6801      	ldr	r1, [r0, #0]
  400e66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400e6a:	6001      	str	r1, [r0, #0]
  400e6c:	4770      	bx	lr
  400e6e:	0000      	.short	0x0000
  400e70:	e000ed88 	.word	0xe000ed88

00400e74 <pxPortInitialiseStack>:
{
  400e74:	b470      	push	{r4, r5, r6}
  400e76:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400e78:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400e7c:	4d07      	ldr	r5, [pc, #28]	; (400e9c <pxPortInitialiseStack+0x28>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400e7e:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400e82:	f840 1c08 	str.w	r1, [r0, #-8]
}
  400e86:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400e88:	f843 2c20 	str.w	r2, [r3, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400e8c:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400e90:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400e94:	f843 4c24 	str.w	r4, [r3, #-36]
}
  400e98:	bc70      	pop	{r4, r5, r6}
  400e9a:	4770      	bx	lr
  400e9c:	00400e09 	.word	0x00400e09

00400ea0 <SVC_Handler>:
	__asm volatile (
  400ea0:	4b06      	ldr	r3, [pc, #24]	; (400ebc <pxCurrentTCBConst2>)
  400ea2:	6819      	ldr	r1, [r3, #0]
  400ea4:	6808      	ldr	r0, [r1, #0]
  400ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400eaa:	f380 8809 	msr	PSP, r0
  400eae:	f3bf 8f6f 	isb	sy
  400eb2:	f04f 0000 	mov.w	r0, #0
  400eb6:	f380 8811 	msr	BASEPRI, r0
  400eba:	4770      	bx	lr

00400ebc <pxCurrentTCBConst2>:
  400ebc:	20400a54 	.word	0x20400a54
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop

00400ec4 <vPortEnterCritical>:
  400ec4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ec8:	b672      	cpsid	i
  400eca:	f383 8811 	msr	BASEPRI, r3
  400ece:	f3bf 8f6f 	isb	sy
  400ed2:	f3bf 8f4f 	dsb	sy
  400ed6:	b662      	cpsie	i
	uxCriticalNesting++;
  400ed8:	4a0b      	ldr	r2, [pc, #44]	; (400f08 <vPortEnterCritical+0x44>)
  400eda:	6813      	ldr	r3, [r2, #0]
  400edc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
  400ede:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
  400ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400ee2:	d000      	beq.n	400ee6 <vPortEnterCritical+0x22>
  400ee4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400ee6:	4b09      	ldr	r3, [pc, #36]	; (400f0c <vPortEnterCritical+0x48>)
  400ee8:	681b      	ldr	r3, [r3, #0]
  400eea:	f013 0fff 	tst.w	r3, #255	; 0xff
  400eee:	d0f9      	beq.n	400ee4 <vPortEnterCritical+0x20>
  400ef0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ef4:	b672      	cpsid	i
  400ef6:	f383 8811 	msr	BASEPRI, r3
  400efa:	f3bf 8f6f 	isb	sy
  400efe:	f3bf 8f4f 	dsb	sy
  400f02:	b662      	cpsie	i
  400f04:	e7fe      	b.n	400f04 <vPortEnterCritical+0x40>
  400f06:	bf00      	nop
  400f08:	20400008 	.word	0x20400008
  400f0c:	e000ed04 	.word	0xe000ed04

00400f10 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400f10:	4a09      	ldr	r2, [pc, #36]	; (400f38 <vPortExitCritical+0x28>)
  400f12:	6813      	ldr	r3, [r2, #0]
  400f14:	b953      	cbnz	r3, 400f2c <vPortExitCritical+0x1c>
  400f16:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f1a:	b672      	cpsid	i
  400f1c:	f383 8811 	msr	BASEPRI, r3
  400f20:	f3bf 8f6f 	isb	sy
  400f24:	f3bf 8f4f 	dsb	sy
  400f28:	b662      	cpsie	i
  400f2a:	e7fe      	b.n	400f2a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400f2c:	3b01      	subs	r3, #1
  400f2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400f30:	b90b      	cbnz	r3, 400f36 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400f32:	f383 8811 	msr	BASEPRI, r3
  400f36:	4770      	bx	lr
  400f38:	20400008 	.word	0x20400008

00400f3c <PendSV_Handler>:
	__asm volatile
  400f3c:	f3ef 8009 	mrs	r0, PSP
  400f40:	f3bf 8f6f 	isb	sy
  400f44:	4b15      	ldr	r3, [pc, #84]	; (400f9c <pxCurrentTCBConst>)
  400f46:	681a      	ldr	r2, [r3, #0]
  400f48:	f01e 0f10 	tst.w	lr, #16
  400f4c:	bf08      	it	eq
  400f4e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400f52:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f56:	6010      	str	r0, [r2, #0]
  400f58:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400f5c:	f04f 0080 	mov.w	r0, #128	; 0x80
  400f60:	b672      	cpsid	i
  400f62:	f380 8811 	msr	BASEPRI, r0
  400f66:	f3bf 8f4f 	dsb	sy
  400f6a:	f3bf 8f6f 	isb	sy
  400f6e:	b662      	cpsie	i
  400f70:	f001 f86e 	bl	402050 <vTaskSwitchContext>
  400f74:	f04f 0000 	mov.w	r0, #0
  400f78:	f380 8811 	msr	BASEPRI, r0
  400f7c:	bc08      	pop	{r3}
  400f7e:	6819      	ldr	r1, [r3, #0]
  400f80:	6808      	ldr	r0, [r1, #0]
  400f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f86:	f01e 0f10 	tst.w	lr, #16
  400f8a:	bf08      	it	eq
  400f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400f90:	f380 8809 	msr	PSP, r0
  400f94:	f3bf 8f6f 	isb	sy
  400f98:	4770      	bx	lr
  400f9a:	bf00      	nop

00400f9c <pxCurrentTCBConst>:
  400f9c:	20400a54 	.word	0x20400a54
  400fa0:	4770      	bx	lr
  400fa2:	bf00      	nop

00400fa4 <SysTick_Handler>:
{
  400fa4:	b508      	push	{r3, lr}
	__asm volatile
  400fa6:	f3ef 8311 	mrs	r3, BASEPRI
  400faa:	f04f 0280 	mov.w	r2, #128	; 0x80
  400fae:	b672      	cpsid	i
  400fb0:	f382 8811 	msr	BASEPRI, r2
  400fb4:	f3bf 8f6f 	isb	sy
  400fb8:	f3bf 8f4f 	dsb	sy
  400fbc:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400fbe:	4b05      	ldr	r3, [pc, #20]	; (400fd4 <SysTick_Handler+0x30>)
  400fc0:	4798      	blx	r3
  400fc2:	b118      	cbz	r0, 400fcc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400fc4:	4b04      	ldr	r3, [pc, #16]	; (400fd8 <SysTick_Handler+0x34>)
  400fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fca:	601a      	str	r2, [r3, #0]
	__asm volatile
  400fcc:	2300      	movs	r3, #0
  400fce:	f383 8811 	msr	BASEPRI, r3
  400fd2:	bd08      	pop	{r3, pc}
  400fd4:	00401d11 	.word	0x00401d11
  400fd8:	e000ed04 	.word	0xe000ed04

00400fdc <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400fdc:	4903      	ldr	r1, [pc, #12]	; (400fec <vPortSetupTimerInterrupt+0x10>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400fde:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400fe0:	4803      	ldr	r0, [pc, #12]	; (400ff0 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400fe2:	4b04      	ldr	r3, [pc, #16]	; (400ff4 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400fe4:	6008      	str	r0, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400fe6:	601a      	str	r2, [r3, #0]
  400fe8:	4770      	bx	lr
  400fea:	bf00      	nop
  400fec:	e000e014 	.word	0xe000e014
  400ff0:	000927bf 	.word	0x000927bf
  400ff4:	e000e010 	.word	0xe000e010

00400ff8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400ff8:	4b23      	ldr	r3, [pc, #140]	; (401088 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400ffa:	2207      	movs	r2, #7
  400ffc:	4823      	ldr	r0, [pc, #140]	; (40108c <xPortStartScheduler+0x94>)
{
  400ffe:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401000:	7819      	ldrb	r1, [r3, #0]
{
  401002:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401004:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401006:	4c22      	ldr	r4, [pc, #136]	; (401090 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401008:	b2c9      	uxtb	r1, r1
  40100a:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40100c:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40100e:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401010:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401012:	b2db      	uxtb	r3, r3
  401014:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401018:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40101c:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401020:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401024:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401026:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401028:	d50d      	bpl.n	401046 <xPortStartScheduler+0x4e>
  40102a:	2206      	movs	r2, #6
  40102c:	e000      	b.n	401030 <xPortStartScheduler+0x38>
  40102e:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401030:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401034:	1e51      	subs	r1, r2, #1
  401036:	005b      	lsls	r3, r3, #1
  401038:	b2db      	uxtb	r3, r3
  40103a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40103e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401042:	061b      	lsls	r3, r3, #24
  401044:	d4f3      	bmi.n	40102e <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401046:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401048:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40104a:	4b12      	ldr	r3, [pc, #72]	; (401094 <xPortStartScheduler+0x9c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40104c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401050:	b2c9      	uxtb	r1, r1
  401052:	4c0d      	ldr	r4, [pc, #52]	; (401088 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401054:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401056:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401058:	681a      	ldr	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40105a:	490f      	ldr	r1, [pc, #60]	; (401098 <xPortStartScheduler+0xa0>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40105c:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401060:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401062:	681a      	ldr	r2, [r3, #0]
  401064:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401068:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40106a:	4788      	blx	r1
	uxCriticalNesting = 0;
  40106c:	4a0b      	ldr	r2, [pc, #44]	; (40109c <xPortStartScheduler+0xa4>)
  40106e:	2100      	movs	r1, #0
	vPortEnableVFP();
  401070:	4b0b      	ldr	r3, [pc, #44]	; (4010a0 <xPortStartScheduler+0xa8>)
	uxCriticalNesting = 0;
  401072:	6011      	str	r1, [r2, #0]
	vPortEnableVFP();
  401074:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401076:	4a0b      	ldr	r2, [pc, #44]	; (4010a4 <xPortStartScheduler+0xac>)
	prvPortStartFirstTask();
  401078:	490b      	ldr	r1, [pc, #44]	; (4010a8 <xPortStartScheduler+0xb0>)
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40107a:	6813      	ldr	r3, [r2, #0]
  40107c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401080:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401082:	4788      	blx	r1
	prvTaskExitError();
  401084:	4b09      	ldr	r3, [pc, #36]	; (4010ac <xPortStartScheduler+0xb4>)
  401086:	4798      	blx	r3
  401088:	e000e400 	.word	0xe000e400
  40108c:	20400a50 	.word	0x20400a50
  401090:	20400a4c 	.word	0x20400a4c
  401094:	e000ed20 	.word	0xe000ed20
  401098:	00400fdd 	.word	0x00400fdd
  40109c:	20400008 	.word	0x20400008
  4010a0:	00400e61 	.word	0x00400e61
  4010a4:	e000ef34 	.word	0xe000ef34
  4010a8:	00400e41 	.word	0x00400e41
  4010ac:	00400e09 	.word	0x00400e09

004010b0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4010b0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4010b4:	2b0f      	cmp	r3, #15
  4010b6:	d910      	bls.n	4010da <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4010b8:	4912      	ldr	r1, [pc, #72]	; (401104 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4010ba:	4a13      	ldr	r2, [pc, #76]	; (401108 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4010bc:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4010be:	7812      	ldrb	r2, [r2, #0]
  4010c0:	429a      	cmp	r2, r3
  4010c2:	d90a      	bls.n	4010da <vPortValidateInterruptPriority+0x2a>
	__asm volatile
  4010c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010c8:	b672      	cpsid	i
  4010ca:	f383 8811 	msr	BASEPRI, r3
  4010ce:	f3bf 8f6f 	isb	sy
  4010d2:	f3bf 8f4f 	dsb	sy
  4010d6:	b662      	cpsie	i
  4010d8:	e7fe      	b.n	4010d8 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4010da:	4b0c      	ldr	r3, [pc, #48]	; (40110c <vPortValidateInterruptPriority+0x5c>)
  4010dc:	4a0c      	ldr	r2, [pc, #48]	; (401110 <vPortValidateInterruptPriority+0x60>)
  4010de:	681b      	ldr	r3, [r3, #0]
  4010e0:	6812      	ldr	r2, [r2, #0]
  4010e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4010e6:	4293      	cmp	r3, r2
  4010e8:	d90a      	bls.n	401100 <vPortValidateInterruptPriority+0x50>
  4010ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010ee:	b672      	cpsid	i
  4010f0:	f383 8811 	msr	BASEPRI, r3
  4010f4:	f3bf 8f6f 	isb	sy
  4010f8:	f3bf 8f4f 	dsb	sy
  4010fc:	b662      	cpsie	i
  4010fe:	e7fe      	b.n	4010fe <vPortValidateInterruptPriority+0x4e>
  401100:	4770      	bx	lr
  401102:	bf00      	nop
  401104:	e000e3f0 	.word	0xe000e3f0
  401108:	20400a4c 	.word	0x20400a4c
  40110c:	e000ed0c 	.word	0xe000ed0c
  401110:	20400a50 	.word	0x20400a50

00401114 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401114:	b510      	push	{r4, lr}
  401116:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401118:	4b07      	ldr	r3, [pc, #28]	; (401138 <pvPortMalloc+0x24>)
  40111a:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  40111c:	4b07      	ldr	r3, [pc, #28]	; (40113c <pvPortMalloc+0x28>)
  40111e:	4620      	mov	r0, r4
  401120:	4798      	blx	r3
  401122:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401124:	4b06      	ldr	r3, [pc, #24]	; (401140 <pvPortMalloc+0x2c>)
  401126:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401128:	b10c      	cbz	r4, 40112e <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40112a:	4620      	mov	r0, r4
  40112c:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40112e:	4b05      	ldr	r3, [pc, #20]	; (401144 <pvPortMalloc+0x30>)
  401130:	4798      	blx	r3
}
  401132:	4620      	mov	r0, r4
  401134:	bd10      	pop	{r4, pc}
  401136:	bf00      	nop
  401138:	00401cf5 	.word	0x00401cf5
  40113c:	004037d1 	.word	0x004037d1
  401140:	00401e85 	.word	0x00401e85
  401144:	00402ba5 	.word	0x00402ba5

00401148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401148:	b150      	cbz	r0, 401160 <vPortFree+0x18>
	{
		vTaskSuspendAll();
  40114a:	4b06      	ldr	r3, [pc, #24]	; (401164 <vPortFree+0x1c>)
{
  40114c:	b510      	push	{r4, lr}
  40114e:	4604      	mov	r4, r0
		vTaskSuspendAll();
  401150:	4798      	blx	r3
		{
			free( pv );
  401152:	4b05      	ldr	r3, [pc, #20]	; (401168 <vPortFree+0x20>)
  401154:	4620      	mov	r0, r4
  401156:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401158:	4b04      	ldr	r3, [pc, #16]	; (40116c <vPortFree+0x24>)
	}
}
  40115a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		( void ) xTaskResumeAll();
  40115e:	4718      	bx	r3
  401160:	4770      	bx	lr
  401162:	bf00      	nop
  401164:	00401cf5 	.word	0x00401cf5
  401168:	004037e1 	.word	0x004037e1
  40116c:	00401e85 	.word	0x00401e85

00401170 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401170:	b538      	push	{r3, r4, r5, lr}
  401172:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401174:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  401176:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401178:	b942      	cbnz	r2, 40118c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40117a:	6805      	ldr	r5, [r0, #0]
  40117c:	b10d      	cbz	r5, 401182 <prvCopyDataToQueue+0x12>
BaseType_t xReturn = pdFALSE;
  40117e:	2000      	movs	r0, #0
  401180:	e029      	b.n	4011d6 <prvCopyDataToQueue+0x66>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401182:	6840      	ldr	r0, [r0, #4]
  401184:	4b16      	ldr	r3, [pc, #88]	; (4011e0 <prvCopyDataToQueue+0x70>)
  401186:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401188:	6065      	str	r5, [r4, #4]
  40118a:	e024      	b.n	4011d6 <prvCopyDataToQueue+0x66>
  40118c:	4b15      	ldr	r3, [pc, #84]	; (4011e4 <prvCopyDataToQueue+0x74>)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  40118e:	b965      	cbnz	r5, 4011aa <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401190:	6880      	ldr	r0, [r0, #8]
  401192:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401194:	68a3      	ldr	r3, [r4, #8]
  401196:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401198:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40119a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40119c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40119e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4011a0:	d3ed      	bcc.n	40117e <prvCopyDataToQueue+0xe>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4011a2:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
  4011a4:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4011a6:	60a3      	str	r3, [r4, #8]
  4011a8:	e015      	b.n	4011d6 <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4011aa:	68c0      	ldr	r0, [r0, #12]
  4011ac:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4011ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4011b0:	68e2      	ldr	r2, [r4, #12]
  4011b2:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4011b4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4011b6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4011b8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4011ba:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4011bc:	d202      	bcs.n	4011c4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4011be:	6862      	ldr	r2, [r4, #4]
  4011c0:	4413      	add	r3, r2
  4011c2:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  4011c4:	2d02      	cmp	r5, #2
  4011c6:	d1da      	bne.n	40117e <prvCopyDataToQueue+0xe>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4011c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4011ca:	2b00      	cmp	r3, #0
  4011cc:	d0d7      	beq.n	40117e <prvCopyDataToQueue+0xe>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  4011ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4011d0:	2000      	movs	r0, #0
				--( pxQueue->uxMessagesWaiting );
  4011d2:	3b01      	subs	r3, #1
  4011d4:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4011d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4011d8:	3301      	adds	r3, #1
  4011da:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4011dc:	bd38      	pop	{r3, r4, r5, pc}
  4011de:	bf00      	nop
  4011e0:	0040242d 	.word	0x0040242d
  4011e4:	00403d51 	.word	0x00403d51

004011e8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4011e8:	b530      	push	{r4, r5, lr}
  4011ea:	b083      	sub	sp, #12
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4011ec:	6d44      	ldr	r4, [r0, #84]	; 0x54
	{
  4011ee:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4011f0:	b1ac      	cbz	r4, 40121e <prvNotifyQueueSetContainer+0x36>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4011f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4011f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4011f6:	429a      	cmp	r2, r3
  4011f8:	d30a      	bcc.n	401210 <prvNotifyQueueSetContainer+0x28>
  4011fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011fe:	b672      	cpsid	i
  401200:	f383 8811 	msr	BASEPRI, r3
  401204:	f3bf 8f6f 	isb	sy
  401208:	f3bf 8f4f 	dsb	sy
  40120c:	b662      	cpsie	i
  40120e:	e7fe      	b.n	40120e <prvNotifyQueueSetContainer+0x26>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401210:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401212:	4293      	cmp	r3, r2
  401214:	d80e      	bhi.n	401234 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401216:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401218:	4628      	mov	r0, r5
  40121a:	b003      	add	sp, #12
  40121c:	bd30      	pop	{r4, r5, pc}
  40121e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401222:	b672      	cpsid	i
  401224:	f383 8811 	msr	BASEPRI, r3
  401228:	f3bf 8f6f 	isb	sy
  40122c:	f3bf 8f4f 	dsb	sy
  401230:	b662      	cpsie	i
  401232:	e7fe      	b.n	401232 <prvNotifyQueueSetContainer+0x4a>
  401234:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401236:	4b0d      	ldr	r3, [pc, #52]	; (40126c <prvNotifyQueueSetContainer+0x84>)
  401238:	a901      	add	r1, sp, #4
  40123a:	4620      	mov	r0, r4
  40123c:	4798      	blx	r3
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40123e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401240:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401242:	3301      	adds	r3, #1
  401244:	d005      	beq.n	401252 <prvNotifyQueueSetContainer+0x6a>
				( pxQueueSetContainer->xTxLock )++;
  401246:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	}
  401248:	4628      	mov	r0, r5
				( pxQueueSetContainer->xTxLock )++;
  40124a:	3301      	adds	r3, #1
  40124c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40124e:	b003      	add	sp, #12
  401250:	bd30      	pop	{r4, r5, pc}
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401252:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401254:	2b00      	cmp	r3, #0
  401256:	d0df      	beq.n	401218 <prvNotifyQueueSetContainer+0x30>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401258:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40125c:	4b04      	ldr	r3, [pc, #16]	; (401270 <prvNotifyQueueSetContainer+0x88>)
  40125e:	4798      	blx	r3
						xReturn = pdTRUE;
  401260:	2800      	cmp	r0, #0
  401262:	bf18      	it	ne
  401264:	2501      	movne	r5, #1
	}
  401266:	4628      	mov	r0, r5
  401268:	b003      	add	sp, #12
  40126a:	bd30      	pop	{r4, r5, pc}
  40126c:	00401171 	.word	0x00401171
  401270:	00402209 	.word	0x00402209

00401274 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401274:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  401276:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401278:	b172      	cbz	r2, 401298 <prvCopyDataFromQueue+0x24>
  40127a:	4608      	mov	r0, r1
{
  40127c:	b410      	push	{r4}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40127e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401280:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401282:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401284:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401286:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401288:	d301      	bcc.n	40128e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  40128a:	6819      	ldr	r1, [r3, #0]
  40128c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40128e:	68d9      	ldr	r1, [r3, #12]
}
  401290:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401294:	4b01      	ldr	r3, [pc, #4]	; (40129c <prvCopyDataFromQueue+0x28>)
  401296:	4718      	bx	r3
  401298:	4770      	bx	lr
  40129a:	bf00      	nop
  40129c:	00403d51 	.word	0x00403d51

004012a0 <prvUnlockQueue>:
{
  4012a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012a4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4012a6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 401344 <prvUnlockQueue+0xa4>
  4012aa:	47c0      	blx	r8
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4012ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012ae:	2b00      	cmp	r3, #0
  4012b0:	dd1a      	ble.n	4012e8 <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4012b2:	4d20      	ldr	r5, [pc, #128]	; (401334 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4012b4:	4f20      	ldr	r7, [pc, #128]	; (401338 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4012b6:	4e21      	ldr	r6, [pc, #132]	; (40133c <prvUnlockQueue+0x9c>)
  4012b8:	e008      	b.n	4012cc <prvUnlockQueue+0x2c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4012ba:	47a8      	blx	r5
  4012bc:	2801      	cmp	r0, #1
  4012be:	d011      	beq.n	4012e4 <prvUnlockQueue+0x44>
			--( pxQueue->xTxLock );
  4012c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012c2:	3b01      	subs	r3, #1
  4012c4:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4012c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012c8:	2b00      	cmp	r3, #0
  4012ca:	dd0d      	ble.n	4012e8 <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  4012cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4012ce:	2100      	movs	r1, #0
  4012d0:	4620      	mov	r0, r4
				if( pxQueue->pxQueueSetContainer != NULL )
  4012d2:	2b00      	cmp	r3, #0
  4012d4:	d1f1      	bne.n	4012ba <prvUnlockQueue+0x1a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4012d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4012d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4012dc:	b123      	cbz	r3, 4012e8 <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4012de:	47b0      	blx	r6
  4012e0:	2800      	cmp	r0, #0
  4012e2:	d0ed      	beq.n	4012c0 <prvUnlockQueue+0x20>
						vTaskMissedYield();
  4012e4:	47b8      	blx	r7
  4012e6:	e7eb      	b.n	4012c0 <prvUnlockQueue+0x20>
		pxQueue->xTxLock = queueUNLOCKED;
  4012e8:	f04f 33ff 	mov.w	r3, #4294967295
	taskEXIT_CRITICAL();
  4012ec:	4f14      	ldr	r7, [pc, #80]	; (401340 <prvUnlockQueue+0xa0>)
		pxQueue->xTxLock = queueUNLOCKED;
  4012ee:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4012f0:	47b8      	blx	r7
	taskENTER_CRITICAL();
  4012f2:	47c0      	blx	r8
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4012f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4012f6:	2b00      	cmp	r3, #0
  4012f8:	dd15      	ble.n	401326 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4012fa:	6923      	ldr	r3, [r4, #16]
  4012fc:	b19b      	cbz	r3, 401326 <prvUnlockQueue+0x86>
  4012fe:	f104 0610 	add.w	r6, r4, #16
  401302:	4d0e      	ldr	r5, [pc, #56]	; (40133c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401304:	f8df 8030 	ldr.w	r8, [pc, #48]	; 401338 <prvUnlockQueue+0x98>
  401308:	e007      	b.n	40131a <prvUnlockQueue+0x7a>
				--( pxQueue->xRxLock );
  40130a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40130c:	3b01      	subs	r3, #1
  40130e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401310:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401312:	2b00      	cmp	r3, #0
  401314:	dd07      	ble.n	401326 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401316:	6923      	ldr	r3, [r4, #16]
  401318:	b12b      	cbz	r3, 401326 <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40131a:	4630      	mov	r0, r6
  40131c:	47a8      	blx	r5
  40131e:	2800      	cmp	r0, #0
  401320:	d0f3      	beq.n	40130a <prvUnlockQueue+0x6a>
					vTaskMissedYield();
  401322:	47c0      	blx	r8
  401324:	e7f1      	b.n	40130a <prvUnlockQueue+0x6a>
		pxQueue->xRxLock = queueUNLOCKED;
  401326:	f04f 33ff 	mov.w	r3, #4294967295
  40132a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40132c:	463b      	mov	r3, r7
}
  40132e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  401332:	4718      	bx	r3
  401334:	004011e9 	.word	0x004011e9
  401338:	00402359 	.word	0x00402359
  40133c:	00402209 	.word	0x00402209
  401340:	00400f11 	.word	0x00400f11
  401344:	00400ec5 	.word	0x00400ec5

00401348 <xQueueGenericCreate.part.1>:
  401348:	f04f 0380 	mov.w	r3, #128	; 0x80
  40134c:	b672      	cpsid	i
  40134e:	f383 8811 	msr	BASEPRI, r3
  401352:	f3bf 8f6f 	isb	sy
  401356:	f3bf 8f4f 	dsb	sy
  40135a:	b662      	cpsie	i
  40135c:	e7fe      	b.n	40135c <xQueueGenericCreate.part.1+0x14>
	...

00401360 <xQueueGenericReset>:
{
  401360:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pxQueue );
  401362:	b1d8      	cbz	r0, 40139c <xQueueGenericReset+0x3c>
  401364:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401366:	4b1d      	ldr	r3, [pc, #116]	; (4013dc <xQueueGenericReset+0x7c>)
  401368:	460e      	mov	r6, r1
  40136a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40136c:	6c20      	ldr	r0, [r4, #64]	; 0x40
		pxQueue->xRxLock = queueUNLOCKED;
  40136e:	f04f 35ff 	mov.w	r5, #4294967295
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401374:	2100      	movs	r1, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401376:	6822      	ldr	r2, [r4, #0]
  401378:	fb03 f300 	mul.w	r3, r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40137c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40137e:	1a18      	subs	r0, r3, r0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401380:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401382:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401384:	4402      	add	r2, r0
		pxQueue->xRxLock = queueUNLOCKED;
  401386:	6465      	str	r5, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401388:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40138a:	60e2      	str	r2, [r4, #12]
		pxQueue->xTxLock = queueUNLOCKED;
  40138c:	64a5      	str	r5, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  40138e:	b9ce      	cbnz	r6, 4013c4 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401390:	6923      	ldr	r3, [r4, #16]
  401392:	b92b      	cbnz	r3, 4013a0 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
  401394:	4b12      	ldr	r3, [pc, #72]	; (4013e0 <xQueueGenericReset+0x80>)
  401396:	4798      	blx	r3
}
  401398:	2001      	movs	r0, #1
  40139a:	bd70      	pop	{r4, r5, r6, pc}
  40139c:	4b11      	ldr	r3, [pc, #68]	; (4013e4 <xQueueGenericReset+0x84>)
  40139e:	4798      	blx	r3
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4013a0:	f104 0010 	add.w	r0, r4, #16
  4013a4:	4b10      	ldr	r3, [pc, #64]	; (4013e8 <xQueueGenericReset+0x88>)
  4013a6:	4798      	blx	r3
  4013a8:	2801      	cmp	r0, #1
  4013aa:	d1f3      	bne.n	401394 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
  4013ac:	4b0f      	ldr	r3, [pc, #60]	; (4013ec <xQueueGenericReset+0x8c>)
  4013ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013b2:	601a      	str	r2, [r3, #0]
  4013b4:	f3bf 8f4f 	dsb	sy
  4013b8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
  4013bc:	4b08      	ldr	r3, [pc, #32]	; (4013e0 <xQueueGenericReset+0x80>)
  4013be:	4798      	blx	r3
}
  4013c0:	2001      	movs	r0, #1
  4013c2:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4013c4:	f104 0010 	add.w	r0, r4, #16
  4013c8:	4d09      	ldr	r5, [pc, #36]	; (4013f0 <xQueueGenericReset+0x90>)
  4013ca:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4013cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4013d0:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  4013d2:	4b03      	ldr	r3, [pc, #12]	; (4013e0 <xQueueGenericReset+0x80>)
  4013d4:	4798      	blx	r3
}
  4013d6:	2001      	movs	r0, #1
  4013d8:	bd70      	pop	{r4, r5, r6, pc}
  4013da:	bf00      	nop
  4013dc:	00400ec5 	.word	0x00400ec5
  4013e0:	00400f11 	.word	0x00400f11
  4013e4:	00401349 	.word	0x00401349
  4013e8:	00402209 	.word	0x00402209
  4013ec:	e000ed04 	.word	0xe000ed04
  4013f0:	00400d75 	.word	0x00400d75

004013f4 <xQueueGenericCreate>:
{
  4013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4013f6:	b950      	cbnz	r0, 40140e <xQueueGenericCreate+0x1a>
  4013f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013fc:	b672      	cpsid	i
  4013fe:	f383 8811 	msr	BASEPRI, r3
  401402:	f3bf 8f6f 	isb	sy
  401406:	f3bf 8f4f 	dsb	sy
  40140a:	b662      	cpsie	i
  40140c:	e7fe      	b.n	40140c <xQueueGenericCreate+0x18>
  40140e:	4606      	mov	r6, r0
  401410:	4617      	mov	r7, r2
  401412:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401414:	b1a9      	cbz	r1, 401442 <xQueueGenericCreate+0x4e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401416:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40141a:	4b0e      	ldr	r3, [pc, #56]	; (401454 <xQueueGenericCreate+0x60>)
  40141c:	3059      	adds	r0, #89	; 0x59
  40141e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401420:	4604      	mov	r4, r0
  401422:	b1a8      	cbz	r0, 401450 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401424:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401428:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
  40142a:	63e6      	str	r6, [r4, #60]	; 0x3c
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40142c:	2101      	movs	r1, #1
		pxNewQueue->uxItemSize = uxItemSize;
  40142e:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401430:	4620      	mov	r0, r4
  401432:	4b09      	ldr	r3, [pc, #36]	; (401458 <xQueueGenericCreate+0x64>)
  401434:	4798      	blx	r3
			pxNewQueue->pxQueueSetContainer = NULL;
  401436:	2300      	movs	r3, #0
			pxNewQueue->ucQueueType = ucQueueType;
  401438:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
}
  40143c:	4620      	mov	r0, r4
			pxNewQueue->pxQueueSetContainer = NULL;
  40143e:	6563      	str	r3, [r4, #84]	; 0x54
}
  401440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401442:	2058      	movs	r0, #88	; 0x58
  401444:	4b03      	ldr	r3, [pc, #12]	; (401454 <xQueueGenericCreate+0x60>)
  401446:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401448:	4604      	mov	r4, r0
  40144a:	b108      	cbz	r0, 401450 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40144c:	6024      	str	r4, [r4, #0]
  40144e:	e7ec      	b.n	40142a <xQueueGenericCreate+0x36>
  401450:	4b02      	ldr	r3, [pc, #8]	; (40145c <xQueueGenericCreate+0x68>)
  401452:	4798      	blx	r3
  401454:	00401115 	.word	0x00401115
  401458:	00401361 	.word	0x00401361
  40145c:	00401349 	.word	0x00401349

00401460 <xQueueGenericSend>:
{
  401460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401464:	b085      	sub	sp, #20
  401466:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401468:	2800      	cmp	r0, #0
  40146a:	f000 80b7 	beq.w	4015dc <xQueueGenericSend+0x17c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40146e:	2900      	cmp	r1, #0
  401470:	f000 809e 	beq.w	4015b0 <xQueueGenericSend+0x150>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401474:	2b02      	cmp	r3, #2
  401476:	f000 808c 	beq.w	401592 <xQueueGenericSend+0x132>
  40147a:	461e      	mov	r6, r3
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40147c:	4b63      	ldr	r3, [pc, #396]	; (40160c <xQueueGenericSend+0x1ac>)
  40147e:	4604      	mov	r4, r0
  401480:	4688      	mov	r8, r1
  401482:	4798      	blx	r3
  401484:	b910      	cbnz	r0, 40148c <xQueueGenericSend+0x2c>
  401486:	9b01      	ldr	r3, [sp, #4]
  401488:	2b00      	cmp	r3, #0
  40148a:	d16a      	bne.n	401562 <xQueueGenericSend+0x102>
  40148c:	f1a6 0502 	sub.w	r5, r6, #2
{
  401490:	f04f 0a00 	mov.w	sl, #0
  401494:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 401638 <xQueueGenericSend+0x1d8>
  401498:	fab5 f585 	clz	r5, r5
  40149c:	4f5c      	ldr	r7, [pc, #368]	; (401610 <xQueueGenericSend+0x1b0>)
					vTaskSetTimeOutState( &xTimeOut );
  40149e:	f8df b19c 	ldr.w	fp, [pc, #412]	; 40163c <xQueueGenericSend+0x1dc>
  4014a2:	096d      	lsrs	r5, r5, #5
  4014a4:	e022      	b.n	4014ec <xQueueGenericSend+0x8c>
  4014a6:	f10d 0a08 	add.w	sl, sp, #8
		taskEXIT_CRITICAL();
  4014aa:	47b8      	blx	r7
		vTaskSuspendAll();
  4014ac:	4b59      	ldr	r3, [pc, #356]	; (401614 <xQueueGenericSend+0x1b4>)
  4014ae:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4014b0:	47c8      	blx	r9
  4014b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4014b4:	3301      	adds	r3, #1
  4014b6:	f000 80a6 	beq.w	401606 <xQueueGenericSend+0x1a6>
  4014ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014bc:	3301      	adds	r3, #1
  4014be:	f000 809f 	beq.w	401600 <xQueueGenericSend+0x1a0>
  4014c2:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4014c4:	4650      	mov	r0, sl
  4014c6:	a901      	add	r1, sp, #4
  4014c8:	4b53      	ldr	r3, [pc, #332]	; (401618 <xQueueGenericSend+0x1b8>)
  4014ca:	4798      	blx	r3
  4014cc:	2800      	cmp	r0, #0
  4014ce:	f040 8090 	bne.w	4015f2 <xQueueGenericSend+0x192>
	taskENTER_CRITICAL();
  4014d2:	47c8      	blx	r9
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4014d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014d8:	429a      	cmp	r2, r3
  4014da:	d017      	beq.n	40150c <xQueueGenericSend+0xac>
	taskEXIT_CRITICAL();
  4014dc:	47b8      	blx	r7
				prvUnlockQueue( pxQueue );
  4014de:	4b4f      	ldr	r3, [pc, #316]	; (40161c <xQueueGenericSend+0x1bc>)
  4014e0:	4620      	mov	r0, r4
  4014e2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4014e4:	4b4e      	ldr	r3, [pc, #312]	; (401620 <xQueueGenericSend+0x1c0>)
  4014e6:	4798      	blx	r3
  4014e8:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  4014ec:	47c8      	blx	r9
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4014ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014f2:	429a      	cmp	r2, r3
  4014f4:	d325      	bcc.n	401542 <xQueueGenericSend+0xe2>
  4014f6:	bb25      	cbnz	r5, 401542 <xQueueGenericSend+0xe2>
				if( xTicksToWait == ( TickType_t ) 0 )
  4014f8:	9b01      	ldr	r3, [sp, #4]
  4014fa:	b1eb      	cbz	r3, 401538 <xQueueGenericSend+0xd8>
				else if( xEntryTimeSet == pdFALSE )
  4014fc:	f1ba 0f00 	cmp.w	sl, #0
  401500:	d1d1      	bne.n	4014a6 <xQueueGenericSend+0x46>
					vTaskSetTimeOutState( &xTimeOut );
  401502:	f10d 0a08 	add.w	sl, sp, #8
  401506:	4650      	mov	r0, sl
  401508:	47d8      	blx	fp
  40150a:	e7ce      	b.n	4014aa <xQueueGenericSend+0x4a>
	taskEXIT_CRITICAL();
  40150c:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40150e:	9901      	ldr	r1, [sp, #4]
  401510:	f104 0010 	add.w	r0, r4, #16
  401514:	4b43      	ldr	r3, [pc, #268]	; (401624 <xQueueGenericSend+0x1c4>)
  401516:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401518:	4b40      	ldr	r3, [pc, #256]	; (40161c <xQueueGenericSend+0x1bc>)
  40151a:	4620      	mov	r0, r4
  40151c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40151e:	4b40      	ldr	r3, [pc, #256]	; (401620 <xQueueGenericSend+0x1c0>)
  401520:	4798      	blx	r3
  401522:	2800      	cmp	r0, #0
  401524:	d1e0      	bne.n	4014e8 <xQueueGenericSend+0x88>
					portYIELD_WITHIN_API();
  401526:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40152a:	4a3f      	ldr	r2, [pc, #252]	; (401628 <xQueueGenericSend+0x1c8>)
  40152c:	6013      	str	r3, [r2, #0]
  40152e:	f3bf 8f4f 	dsb	sy
  401532:	f3bf 8f6f 	isb	sy
  401536:	e7d7      	b.n	4014e8 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
  401538:	47b8      	blx	r7
					return errQUEUE_FULL;
  40153a:	4628      	mov	r0, r5
}
  40153c:	b005      	add	sp, #20
  40153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401542:	4b3a      	ldr	r3, [pc, #232]	; (40162c <xQueueGenericSend+0x1cc>)
  401544:	4641      	mov	r1, r8
  401546:	4632      	mov	r2, r6
  401548:	4620      	mov	r0, r4
  40154a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  40154c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40154e:	b19b      	cbz	r3, 401578 <xQueueGenericSend+0x118>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401550:	4631      	mov	r1, r6
  401552:	4620      	mov	r0, r4
  401554:	4b36      	ldr	r3, [pc, #216]	; (401630 <xQueueGenericSend+0x1d0>)
  401556:	4798      	blx	r3
  401558:	2801      	cmp	r0, #1
  40155a:	d011      	beq.n	401580 <xQueueGenericSend+0x120>
				taskEXIT_CRITICAL();
  40155c:	47b8      	blx	r7
				return pdPASS;
  40155e:	2001      	movs	r0, #1
  401560:	e7ec      	b.n	40153c <xQueueGenericSend+0xdc>
  401562:	f04f 0380 	mov.w	r3, #128	; 0x80
  401566:	b672      	cpsid	i
  401568:	f383 8811 	msr	BASEPRI, r3
  40156c:	f3bf 8f6f 	isb	sy
  401570:	f3bf 8f4f 	dsb	sy
  401574:	b662      	cpsie	i
  401576:	e7fe      	b.n	401576 <xQueueGenericSend+0x116>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401578:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40157a:	bb43      	cbnz	r3, 4015ce <xQueueGenericSend+0x16e>
						else if( xYieldRequired != pdFALSE )
  40157c:	2800      	cmp	r0, #0
  40157e:	d0ed      	beq.n	40155c <xQueueGenericSend+0xfc>
							queueYIELD_IF_USING_PREEMPTION();
  401580:	4b29      	ldr	r3, [pc, #164]	; (401628 <xQueueGenericSend+0x1c8>)
  401582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401586:	601a      	str	r2, [r3, #0]
  401588:	f3bf 8f4f 	dsb	sy
  40158c:	f3bf 8f6f 	isb	sy
  401590:	e7e4      	b.n	40155c <xQueueGenericSend+0xfc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401592:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  401594:	2a01      	cmp	r2, #1
  401596:	f43f af70 	beq.w	40147a <xQueueGenericSend+0x1a>
  40159a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40159e:	b672      	cpsid	i
  4015a0:	f383 8811 	msr	BASEPRI, r3
  4015a4:	f3bf 8f6f 	isb	sy
  4015a8:	f3bf 8f4f 	dsb	sy
  4015ac:	b662      	cpsie	i
  4015ae:	e7fe      	b.n	4015ae <xQueueGenericSend+0x14e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4015b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4015b2:	2a00      	cmp	r2, #0
  4015b4:	f43f af5e 	beq.w	401474 <xQueueGenericSend+0x14>
  4015b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015bc:	b672      	cpsid	i
  4015be:	f383 8811 	msr	BASEPRI, r3
  4015c2:	f3bf 8f6f 	isb	sy
  4015c6:	f3bf 8f4f 	dsb	sy
  4015ca:	b662      	cpsie	i
  4015cc:	e7fe      	b.n	4015cc <xQueueGenericSend+0x16c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4015ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015d2:	4b18      	ldr	r3, [pc, #96]	; (401634 <xQueueGenericSend+0x1d4>)
  4015d4:	4798      	blx	r3
  4015d6:	2801      	cmp	r0, #1
  4015d8:	d1c0      	bne.n	40155c <xQueueGenericSend+0xfc>
  4015da:	e7d1      	b.n	401580 <xQueueGenericSend+0x120>
  4015dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015e0:	b672      	cpsid	i
  4015e2:	f383 8811 	msr	BASEPRI, r3
  4015e6:	f3bf 8f6f 	isb	sy
  4015ea:	f3bf 8f4f 	dsb	sy
  4015ee:	b662      	cpsie	i
  4015f0:	e7fe      	b.n	4015f0 <xQueueGenericSend+0x190>
			prvUnlockQueue( pxQueue );
  4015f2:	4620      	mov	r0, r4
  4015f4:	4b09      	ldr	r3, [pc, #36]	; (40161c <xQueueGenericSend+0x1bc>)
  4015f6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4015f8:	4b09      	ldr	r3, [pc, #36]	; (401620 <xQueueGenericSend+0x1c0>)
  4015fa:	4798      	blx	r3
			return errQUEUE_FULL;
  4015fc:	2000      	movs	r0, #0
  4015fe:	e79d      	b.n	40153c <xQueueGenericSend+0xdc>
		prvLockQueue( pxQueue );
  401600:	2300      	movs	r3, #0
  401602:	64a3      	str	r3, [r4, #72]	; 0x48
  401604:	e75d      	b.n	4014c2 <xQueueGenericSend+0x62>
  401606:	2300      	movs	r3, #0
  401608:	6463      	str	r3, [r4, #68]	; 0x44
  40160a:	e756      	b.n	4014ba <xQueueGenericSend+0x5a>
  40160c:	00402365 	.word	0x00402365
  401610:	00400f11 	.word	0x00400f11
  401614:	00401cf5 	.word	0x00401cf5
  401618:	004022c1 	.word	0x004022c1
  40161c:	004012a1 	.word	0x004012a1
  401620:	00401e85 	.word	0x00401e85
  401624:	00402101 	.word	0x00402101
  401628:	e000ed04 	.word	0xe000ed04
  40162c:	00401171 	.word	0x00401171
  401630:	004011e9 	.word	0x004011e9
  401634:	00402209 	.word	0x00402209
  401638:	00400ec5 	.word	0x00400ec5
  40163c:	0040229d 	.word	0x0040229d

00401640 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401640:	b328      	cbz	r0, 40168e <xQueueGenericSendFromISR+0x4e>
{
  401642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401646:	2900      	cmp	r1, #0
  401648:	d047      	beq.n	4016da <xQueueGenericSendFromISR+0x9a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40164a:	2b02      	cmp	r3, #2
  40164c:	d037      	beq.n	4016be <xQueueGenericSendFromISR+0x7e>
  40164e:	461d      	mov	r5, r3
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401650:	4b37      	ldr	r3, [pc, #220]	; (401730 <xQueueGenericSendFromISR+0xf0>)
  401652:	4604      	mov	r4, r0
  401654:	4690      	mov	r8, r2
  401656:	460e      	mov	r6, r1
  401658:	4798      	blx	r3
	__asm volatile
  40165a:	f3ef 8711 	mrs	r7, BASEPRI
  40165e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401662:	b672      	cpsid	i
  401664:	f383 8811 	msr	BASEPRI, r3
  401668:	f3bf 8f6f 	isb	sy
  40166c:	f3bf 8f4f 	dsb	sy
  401670:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401672:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401676:	429a      	cmp	r2, r3
  401678:	d314      	bcc.n	4016a4 <xQueueGenericSendFromISR+0x64>
  40167a:	f1a5 0002 	sub.w	r0, r5, #2
  40167e:	fab0 f080 	clz	r0, r0
  401682:	0940      	lsrs	r0, r0, #5
  401684:	b970      	cbnz	r0, 4016a4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
  401686:	f387 8811 	msr	BASEPRI, r7
}
  40168a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40168e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401692:	b672      	cpsid	i
  401694:	f383 8811 	msr	BASEPRI, r3
  401698:	f3bf 8f6f 	isb	sy
  40169c:	f3bf 8f4f 	dsb	sy
  4016a0:	b662      	cpsie	i
  4016a2:	e7fe      	b.n	4016a2 <xQueueGenericSendFromISR+0x62>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4016a4:	4b23      	ldr	r3, [pc, #140]	; (401734 <xQueueGenericSendFromISR+0xf4>)
  4016a6:	4631      	mov	r1, r6
  4016a8:	462a      	mov	r2, r5
  4016aa:	4620      	mov	r0, r4
  4016ac:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4016ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4016b0:	3301      	adds	r3, #1
  4016b2:	d020      	beq.n	4016f6 <xQueueGenericSendFromISR+0xb6>
				++( pxQueue->xTxLock );
  4016b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4016b6:	2001      	movs	r0, #1
				++( pxQueue->xTxLock );
  4016b8:	4403      	add	r3, r0
  4016ba:	64a3      	str	r3, [r4, #72]	; 0x48
  4016bc:	e7e3      	b.n	401686 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016be:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  4016c0:	2c01      	cmp	r4, #1
  4016c2:	d0c4      	beq.n	40164e <xQueueGenericSendFromISR+0xe>
  4016c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016c8:	b672      	cpsid	i
  4016ca:	f383 8811 	msr	BASEPRI, r3
  4016ce:	f3bf 8f6f 	isb	sy
  4016d2:	f3bf 8f4f 	dsb	sy
  4016d6:	b662      	cpsie	i
  4016d8:	e7fe      	b.n	4016d8 <xQueueGenericSendFromISR+0x98>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016da:	6c04      	ldr	r4, [r0, #64]	; 0x40
  4016dc:	2c00      	cmp	r4, #0
  4016de:	d0b4      	beq.n	40164a <xQueueGenericSendFromISR+0xa>
  4016e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016e4:	b672      	cpsid	i
  4016e6:	f383 8811 	msr	BASEPRI, r3
  4016ea:	f3bf 8f6f 	isb	sy
  4016ee:	f3bf 8f4f 	dsb	sy
  4016f2:	b662      	cpsie	i
  4016f4:	e7fe      	b.n	4016f4 <xQueueGenericSendFromISR+0xb4>
					if( pxQueue->pxQueueSetContainer != NULL )
  4016f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4016f8:	b163      	cbz	r3, 401714 <xQueueGenericSendFromISR+0xd4>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4016fa:	4629      	mov	r1, r5
  4016fc:	4620      	mov	r0, r4
  4016fe:	4b0e      	ldr	r3, [pc, #56]	; (401738 <xQueueGenericSendFromISR+0xf8>)
  401700:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401702:	2801      	cmp	r0, #1
  401704:	d108      	bne.n	401718 <xQueueGenericSendFromISR+0xd8>
  401706:	f1b8 0f00 	cmp.w	r8, #0
  40170a:	d005      	beq.n	401718 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40170c:	2001      	movs	r0, #1
  40170e:	f8c8 0000 	str.w	r0, [r8]
  401712:	e7b8      	b.n	401686 <xQueueGenericSendFromISR+0x46>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401714:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401716:	b90b      	cbnz	r3, 40171c <xQueueGenericSendFromISR+0xdc>
			xReturn = pdPASS;
  401718:	2001      	movs	r0, #1
  40171a:	e7b4      	b.n	401686 <xQueueGenericSendFromISR+0x46>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40171c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401720:	4b06      	ldr	r3, [pc, #24]	; (40173c <xQueueGenericSendFromISR+0xfc>)
  401722:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401724:	f1b8 0f00 	cmp.w	r8, #0
  401728:	d0f6      	beq.n	401718 <xQueueGenericSendFromISR+0xd8>
  40172a:	2800      	cmp	r0, #0
  40172c:	d1ee      	bne.n	40170c <xQueueGenericSendFromISR+0xcc>
  40172e:	e7f3      	b.n	401718 <xQueueGenericSendFromISR+0xd8>
  401730:	004010b1 	.word	0x004010b1
  401734:	00401171 	.word	0x00401171
  401738:	004011e9 	.word	0x004011e9
  40173c:	00402209 	.word	0x00402209

00401740 <xQueueGenericReceive>:
{
  401740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401744:	b087      	sub	sp, #28
  401746:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
  401748:	2800      	cmp	r0, #0
  40174a:	d066      	beq.n	40181a <xQueueGenericReceive+0xda>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40174c:	2900      	cmp	r1, #0
  40174e:	f000 80af 	beq.w	4018b0 <xQueueGenericReceive+0x170>
  401752:	9301      	str	r3, [sp, #4]
  401754:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401756:	4b5e      	ldr	r3, [pc, #376]	; (4018d0 <xQueueGenericReceive+0x190>)
  401758:	460f      	mov	r7, r1
  40175a:	4798      	blx	r3
  40175c:	b960      	cbnz	r0, 401778 <xQueueGenericReceive+0x38>
  40175e:	9b03      	ldr	r3, [sp, #12]
  401760:	b15b      	cbz	r3, 40177a <xQueueGenericReceive+0x3a>
  401762:	f04f 0380 	mov.w	r3, #128	; 0x80
  401766:	b672      	cpsid	i
  401768:	f383 8811 	msr	BASEPRI, r3
  40176c:	f3bf 8f6f 	isb	sy
  401770:	f3bf 8f4f 	dsb	sy
  401774:	b662      	cpsie	i
  401776:	e7fe      	b.n	401776 <xQueueGenericReceive+0x36>
  401778:	2300      	movs	r3, #0
  40177a:	4e56      	ldr	r6, [pc, #344]	; (4018d4 <xQueueGenericReceive+0x194>)
  40177c:	4d56      	ldr	r5, [pc, #344]	; (4018d8 <xQueueGenericReceive+0x198>)
					vTaskSetTimeOutState( &xTimeOut );
  40177e:	f8df b180 	ldr.w	fp, [pc, #384]	; 401900 <xQueueGenericReceive+0x1c0>
		vTaskSuspendAll();
  401782:	f8df a180 	ldr.w	sl, [pc, #384]	; 401904 <xQueueGenericReceive+0x1c4>
					portYIELD_WITHIN_API();
  401786:	f8df 9174 	ldr.w	r9, [pc, #372]	; 4018fc <xQueueGenericReceive+0x1bc>
  40178a:	e006      	b.n	40179a <xQueueGenericReceive+0x5a>
	taskEXIT_CRITICAL();
  40178c:	47a8      	blx	r5
				prvUnlockQueue( pxQueue );
  40178e:	4b53      	ldr	r3, [pc, #332]	; (4018dc <xQueueGenericReceive+0x19c>)
  401790:	4620      	mov	r0, r4
  401792:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401794:	4b52      	ldr	r3, [pc, #328]	; (4018e0 <xQueueGenericReceive+0x1a0>)
  401796:	4798      	blx	r3
  401798:	2301      	movs	r3, #1
  40179a:	9302      	str	r3, [sp, #8]
		taskENTER_CRITICAL();
  40179c:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40179e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4017a0:	9b02      	ldr	r3, [sp, #8]
  4017a2:	2a00      	cmp	r2, #0
  4017a4:	d156      	bne.n	401854 <xQueueGenericReceive+0x114>
				if( xTicksToWait == ( TickType_t ) 0 )
  4017a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4017aa:	f1b8 0f00 	cmp.w	r8, #0
  4017ae:	d04e      	beq.n	40184e <xQueueGenericReceive+0x10e>
					vTaskSetTimeOutState( &xTimeOut );
  4017b0:	f10d 0810 	add.w	r8, sp, #16
				else if( xEntryTimeSet == pdFALSE )
  4017b4:	b90b      	cbnz	r3, 4017ba <xQueueGenericReceive+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
  4017b6:	4640      	mov	r0, r8
  4017b8:	47d8      	blx	fp
		taskEXIT_CRITICAL();
  4017ba:	47a8      	blx	r5
		vTaskSuspendAll();
  4017bc:	47d0      	blx	sl
		prvLockQueue( pxQueue );
  4017be:	47b0      	blx	r6
  4017c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4017c2:	3301      	adds	r3, #1
  4017c4:	d101      	bne.n	4017ca <xQueueGenericReceive+0x8a>
  4017c6:	2300      	movs	r3, #0
  4017c8:	6463      	str	r3, [r4, #68]	; 0x44
  4017ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4017cc:	3301      	adds	r3, #1
  4017ce:	d101      	bne.n	4017d4 <xQueueGenericReceive+0x94>
  4017d0:	2300      	movs	r3, #0
  4017d2:	64a3      	str	r3, [r4, #72]	; 0x48
  4017d4:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4017d6:	4640      	mov	r0, r8
  4017d8:	a903      	add	r1, sp, #12
  4017da:	4b42      	ldr	r3, [pc, #264]	; (4018e4 <xQueueGenericReceive+0x1a4>)
  4017dc:	4798      	blx	r3
  4017de:	2800      	cmp	r0, #0
  4017e0:	d12c      	bne.n	40183c <xQueueGenericReceive+0xfc>
	taskENTER_CRITICAL();
  4017e2:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4017e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4017e6:	2b00      	cmp	r3, #0
  4017e8:	d1d0      	bne.n	40178c <xQueueGenericReceive+0x4c>
	taskEXIT_CRITICAL();
  4017ea:	47a8      	blx	r5
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4017ec:	6823      	ldr	r3, [r4, #0]
  4017ee:	b1fb      	cbz	r3, 401830 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4017f0:	9903      	ldr	r1, [sp, #12]
  4017f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4017f6:	4b3c      	ldr	r3, [pc, #240]	; (4018e8 <xQueueGenericReceive+0x1a8>)
  4017f8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4017fa:	4b38      	ldr	r3, [pc, #224]	; (4018dc <xQueueGenericReceive+0x19c>)
  4017fc:	4620      	mov	r0, r4
  4017fe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401800:	4b37      	ldr	r3, [pc, #220]	; (4018e0 <xQueueGenericReceive+0x1a0>)
  401802:	4798      	blx	r3
  401804:	2800      	cmp	r0, #0
  401806:	d1c7      	bne.n	401798 <xQueueGenericReceive+0x58>
					portYIELD_WITHIN_API();
  401808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40180c:	f8c9 3000 	str.w	r3, [r9]
  401810:	f3bf 8f4f 	dsb	sy
  401814:	f3bf 8f6f 	isb	sy
  401818:	e7be      	b.n	401798 <xQueueGenericReceive+0x58>
  40181a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40181e:	b672      	cpsid	i
  401820:	f383 8811 	msr	BASEPRI, r3
  401824:	f3bf 8f6f 	isb	sy
  401828:	f3bf 8f4f 	dsb	sy
  40182c:	b662      	cpsie	i
  40182e:	e7fe      	b.n	40182e <xQueueGenericReceive+0xee>
						taskENTER_CRITICAL();
  401830:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401832:	6860      	ldr	r0, [r4, #4]
  401834:	4b2d      	ldr	r3, [pc, #180]	; (4018ec <xQueueGenericReceive+0x1ac>)
  401836:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401838:	47a8      	blx	r5
  40183a:	e7d9      	b.n	4017f0 <xQueueGenericReceive+0xb0>
			prvUnlockQueue( pxQueue );
  40183c:	4620      	mov	r0, r4
  40183e:	4b27      	ldr	r3, [pc, #156]	; (4018dc <xQueueGenericReceive+0x19c>)
  401840:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401842:	4b27      	ldr	r3, [pc, #156]	; (4018e0 <xQueueGenericReceive+0x1a0>)
  401844:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401846:	2000      	movs	r0, #0
}
  401848:	b007      	add	sp, #28
  40184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					taskEXIT_CRITICAL();
  40184e:	47a8      	blx	r5
					return errQUEUE_EMPTY;
  401850:	4640      	mov	r0, r8
  401852:	e7f9      	b.n	401848 <xQueueGenericReceive+0x108>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401854:	4b26      	ldr	r3, [pc, #152]	; (4018f0 <xQueueGenericReceive+0x1b0>)
  401856:	4639      	mov	r1, r7
  401858:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  40185a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40185c:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40185e:	9b01      	ldr	r3, [sp, #4]
  401860:	b963      	cbnz	r3, 40187c <xQueueGenericReceive+0x13c>
					--( pxQueue->uxMessagesWaiting );
  401862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401864:	6822      	ldr	r2, [r4, #0]
					--( pxQueue->uxMessagesWaiting );
  401866:	3b01      	subs	r3, #1
  401868:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40186a:	b912      	cbnz	r2, 401872 <xQueueGenericReceive+0x132>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40186c:	4b21      	ldr	r3, [pc, #132]	; (4018f4 <xQueueGenericReceive+0x1b4>)
  40186e:	4798      	blx	r3
  401870:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401872:	6923      	ldr	r3, [r4, #16]
  401874:	b9ab      	cbnz	r3, 4018a2 <xQueueGenericReceive+0x162>
				taskEXIT_CRITICAL();
  401876:	47a8      	blx	r5
				return pdPASS;
  401878:	2001      	movs	r0, #1
  40187a:	e7e5      	b.n	401848 <xQueueGenericReceive+0x108>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40187c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40187e:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401880:	2b00      	cmp	r3, #0
  401882:	d0f8      	beq.n	401876 <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401884:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401888:	4b1b      	ldr	r3, [pc, #108]	; (4018f8 <xQueueGenericReceive+0x1b8>)
  40188a:	4798      	blx	r3
  40188c:	2800      	cmp	r0, #0
  40188e:	d0f2      	beq.n	401876 <xQueueGenericReceive+0x136>
							queueYIELD_IF_USING_PREEMPTION();
  401890:	4b1a      	ldr	r3, [pc, #104]	; (4018fc <xQueueGenericReceive+0x1bc>)
  401892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401896:	601a      	str	r2, [r3, #0]
  401898:	f3bf 8f4f 	dsb	sy
  40189c:	f3bf 8f6f 	isb	sy
  4018a0:	e7e9      	b.n	401876 <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4018a2:	f104 0010 	add.w	r0, r4, #16
  4018a6:	4b14      	ldr	r3, [pc, #80]	; (4018f8 <xQueueGenericReceive+0x1b8>)
  4018a8:	4798      	blx	r3
  4018aa:	2801      	cmp	r0, #1
  4018ac:	d1e3      	bne.n	401876 <xQueueGenericReceive+0x136>
  4018ae:	e7ef      	b.n	401890 <xQueueGenericReceive+0x150>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4018b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4018b2:	2a00      	cmp	r2, #0
  4018b4:	f43f af4d 	beq.w	401752 <xQueueGenericReceive+0x12>
  4018b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018bc:	b672      	cpsid	i
  4018be:	f383 8811 	msr	BASEPRI, r3
  4018c2:	f3bf 8f6f 	isb	sy
  4018c6:	f3bf 8f4f 	dsb	sy
  4018ca:	b662      	cpsie	i
  4018cc:	e7fe      	b.n	4018cc <xQueueGenericReceive+0x18c>
  4018ce:	bf00      	nop
  4018d0:	00402365 	.word	0x00402365
  4018d4:	00400ec5 	.word	0x00400ec5
  4018d8:	00400f11 	.word	0x00400f11
  4018dc:	004012a1 	.word	0x004012a1
  4018e0:	00401e85 	.word	0x00401e85
  4018e4:	004022c1 	.word	0x004022c1
  4018e8:	00402101 	.word	0x00402101
  4018ec:	00402385 	.word	0x00402385
  4018f0:	00401275 	.word	0x00401275
  4018f4:	004024f5 	.word	0x004024f5
  4018f8:	00402209 	.word	0x00402209
  4018fc:	e000ed04 	.word	0xe000ed04
  401900:	0040229d 	.word	0x0040229d
  401904:	00401cf5 	.word	0x00401cf5

00401908 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401908:	2300      	movs	r3, #0
  40190a:	4a08      	ldr	r2, [pc, #32]	; (40192c <vQueueAddToRegistry+0x24>)
	{
  40190c:	b430      	push	{r4, r5}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40190e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  401912:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
  401916:	b124      	cbz	r4, 401922 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401918:	3301      	adds	r3, #1
  40191a:	2b08      	cmp	r3, #8
  40191c:	d1f7      	bne.n	40190e <vQueueAddToRegistry+0x6>
	}
  40191e:	bc30      	pop	{r4, r5}
  401920:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401922:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401926:	6068      	str	r0, [r5, #4]
	}
  401928:	bc30      	pop	{r4, r5}
  40192a:	4770      	bx	lr
  40192c:	20400c54 	.word	0x20400c54

00401930 <vQueueWaitForMessageRestricted>:
	{
  401930:	b570      	push	{r4, r5, r6, lr}
  401932:	4604      	mov	r4, r0
		prvLockQueue( pxQueue );
  401934:	4b0f      	ldr	r3, [pc, #60]	; (401974 <vQueueWaitForMessageRestricted+0x44>)
	{
  401936:	460d      	mov	r5, r1
  401938:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  40193a:	4798      	blx	r3
  40193c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40193e:	3301      	adds	r3, #1
  401940:	d014      	beq.n	40196c <vQueueWaitForMessageRestricted+0x3c>
  401942:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401944:	3301      	adds	r3, #1
  401946:	d00e      	beq.n	401966 <vQueueWaitForMessageRestricted+0x36>
  401948:	4b0b      	ldr	r3, [pc, #44]	; (401978 <vQueueWaitForMessageRestricted+0x48>)
  40194a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40194c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40194e:	b92b      	cbnz	r3, 40195c <vQueueWaitForMessageRestricted+0x2c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401950:	4632      	mov	r2, r6
  401952:	4629      	mov	r1, r5
  401954:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401958:	4b08      	ldr	r3, [pc, #32]	; (40197c <vQueueWaitForMessageRestricted+0x4c>)
  40195a:	4798      	blx	r3
		prvUnlockQueue( pxQueue );
  40195c:	4620      	mov	r0, r4
  40195e:	4b08      	ldr	r3, [pc, #32]	; (401980 <vQueueWaitForMessageRestricted+0x50>)
	}
  401960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
  401964:	4718      	bx	r3
		prvLockQueue( pxQueue );
  401966:	2300      	movs	r3, #0
  401968:	64a3      	str	r3, [r4, #72]	; 0x48
  40196a:	e7ed      	b.n	401948 <vQueueWaitForMessageRestricted+0x18>
  40196c:	2300      	movs	r3, #0
  40196e:	6463      	str	r3, [r4, #68]	; 0x44
  401970:	e7e7      	b.n	401942 <vQueueWaitForMessageRestricted+0x12>
  401972:	bf00      	nop
  401974:	00400ec5 	.word	0x00400ec5
  401978:	00400f11 	.word	0x00400f11
  40197c:	00402185 	.word	0x00402185
  401980:	004012a1 	.word	0x004012a1

00401984 <prvResetNextTaskUnblockTime.part.2>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401984:	4a03      	ldr	r2, [pc, #12]	; (401994 <prvResetNextTaskUnblockTime.part.2+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401986:	4b04      	ldr	r3, [pc, #16]	; (401998 <prvResetNextTaskUnblockTime.part.2+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401988:	6812      	ldr	r2, [r2, #0]
  40198a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40198c:	68d2      	ldr	r2, [r2, #12]
  40198e:	6852      	ldr	r2, [r2, #4]
  401990:	601a      	str	r2, [r3, #0]
  401992:	4770      	bx	lr
  401994:	20400a58 	.word	0x20400a58
  401998:	20400b04 	.word	0x20400b04

0040199c <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40199c:	4b0d      	ldr	r3, [pc, #52]	; (4019d4 <prvAddCurrentTaskToDelayedList+0x38>)
	if( xTimeToWake < xTickCount )
  40199e:	4a0e      	ldr	r2, [pc, #56]	; (4019d8 <prvAddCurrentTaskToDelayedList+0x3c>)
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4019a0:	6819      	ldr	r1, [r3, #0]
	if( xTimeToWake < xTickCount )
  4019a2:	6812      	ldr	r2, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4019a4:	6048      	str	r0, [r1, #4]
	if( xTimeToWake < xTickCount )
  4019a6:	4290      	cmp	r0, r2
  4019a8:	d30d      	bcc.n	4019c6 <prvAddCurrentTaskToDelayedList+0x2a>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4019aa:	490c      	ldr	r1, [pc, #48]	; (4019dc <prvAddCurrentTaskToDelayedList+0x40>)
  4019ac:	4a0c      	ldr	r2, [pc, #48]	; (4019e0 <prvAddCurrentTaskToDelayedList+0x44>)
{
  4019ae:	b510      	push	{r4, lr}
  4019b0:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4019b2:	6808      	ldr	r0, [r1, #0]
  4019b4:	6819      	ldr	r1, [r3, #0]
  4019b6:	3104      	adds	r1, #4
  4019b8:	4790      	blx	r2
		if( xTimeToWake < xNextTaskUnblockTime )
  4019ba:	4b0a      	ldr	r3, [pc, #40]	; (4019e4 <prvAddCurrentTaskToDelayedList+0x48>)
  4019bc:	681a      	ldr	r2, [r3, #0]
  4019be:	4294      	cmp	r4, r2
  4019c0:	d200      	bcs.n	4019c4 <prvAddCurrentTaskToDelayedList+0x28>
			xNextTaskUnblockTime = xTimeToWake;
  4019c2:	601c      	str	r4, [r3, #0]
  4019c4:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4019c6:	4908      	ldr	r1, [pc, #32]	; (4019e8 <prvAddCurrentTaskToDelayedList+0x4c>)
  4019c8:	4a05      	ldr	r2, [pc, #20]	; (4019e0 <prvAddCurrentTaskToDelayedList+0x44>)
  4019ca:	6808      	ldr	r0, [r1, #0]
  4019cc:	6819      	ldr	r1, [r3, #0]
  4019ce:	3104      	adds	r1, #4
  4019d0:	4710      	bx	r2
  4019d2:	bf00      	nop
  4019d4:	20400a54 	.word	0x20400a54
  4019d8:	20400b4c 	.word	0x20400b4c
  4019dc:	20400a58 	.word	0x20400a58
  4019e0:	00400dad 	.word	0x00400dad
  4019e4:	20400b04 	.word	0x20400b04
  4019e8:	20400a5c 	.word	0x20400a5c

004019ec <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
  4019ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4019f2:	4680      	mov	r8, r0
  4019f4:	460d      	mov	r5, r1
  4019f6:	4692      	mov	sl, r2
  4019f8:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019fa:	2e00      	cmp	r6, #0
  4019fc:	f000 8096 	beq.w	401b2c <xTaskGenericCreate.part.5+0x140>
  401a00:	4c64      	ldr	r4, [pc, #400]	; (401b94 <xTaskGenericCreate.part.5+0x1a8>)
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401a02:	2058      	movs	r0, #88	; 0x58
  401a04:	47a0      	blx	r4
			if( pxNewTCB != NULL )
  401a06:	4604      	mov	r4, r0
  401a08:	2800      	cmp	r0, #0
  401a0a:	f000 809a 	beq.w	401b42 <xTaskGenericCreate.part.5+0x156>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401a0e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
				pxNewTCB->pxStack = pxStack;
  401a12:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401a14:	21a5      	movs	r1, #165	; 0xa5
  401a16:	4b60      	ldr	r3, [pc, #384]	; (401b98 <xTaskGenericCreate.part.5+0x1ac>)
  401a18:	4652      	mov	r2, sl
  401a1a:	4630      	mov	r0, r6
  401a1c:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401a1e:	f1aa 0a04 	sub.w	sl, sl, #4
  401a22:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401a24:	1e6b      	subs	r3, r5, #1
  401a26:	f105 0109 	add.w	r1, r5, #9
  401a2a:	f104 0533 	add.w	r5, r4, #51	; 0x33
  401a2e:	4482      	add	sl, r0
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401a30:	f02a 0a07 	bic.w	sl, sl, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401a34:	785a      	ldrb	r2, [r3, #1]
  401a36:	f805 2f01 	strb.w	r2, [r5, #1]!
		if( pcName[ x ] == 0x00 )
  401a3a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  401a3e:	b10a      	cbz	r2, 401a44 <xTaskGenericCreate.part.5+0x58>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401a40:	4299      	cmp	r1, r3
  401a42:	d1f7      	bne.n	401a34 <xTaskGenericCreate.part.5+0x48>
  401a44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401a46:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a48:	f104 0b04 	add.w	fp, r4, #4
  401a4c:	4e53      	ldr	r6, [pc, #332]	; (401b9c <xTaskGenericCreate.part.5+0x1b0>)
  401a4e:	2d04      	cmp	r5, #4
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401a50:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a54:	4658      	mov	r0, fp
		pxTCB->uxMutexesHeld = 0;
  401a56:	64e7      	str	r7, [r4, #76]	; 0x4c
  401a58:	bf28      	it	cs
  401a5a:	2504      	movcs	r5, #4
	pxTCB->uxPriority = uxPriority;
  401a5c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401a5e:	64a5      	str	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a60:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a64:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401a66:	f104 0018 	add.w	r0, r4, #24
  401a6a:	47b0      	blx	r6
		pxTCB->ulNotifiedValue = 0;
  401a6c:	6527      	str	r7, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a6e:	4b4c      	ldr	r3, [pc, #304]	; (401ba0 <xTaskGenericCreate.part.5+0x1b4>)
  401a70:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a72:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a74:	4641      	mov	r1, r8
		pxTCB->eNotifyState = eNotWaitingNotification;
  401a76:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a7a:	4650      	mov	r0, sl
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401a7c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401a7e:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a80:	4798      	blx	r3
		if( ( void * ) pxCreatedTask != NULL )
  401a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a84:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401a86:	b103      	cbz	r3, 401a8a <xTaskGenericCreate.part.5+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401a88:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
  401a8a:	4b46      	ldr	r3, [pc, #280]	; (401ba4 <xTaskGenericCreate.part.5+0x1b8>)
  401a8c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401a8e:	4a46      	ldr	r2, [pc, #280]	; (401ba8 <xTaskGenericCreate.part.5+0x1bc>)
			if( pxCurrentTCB == NULL )
  401a90:	4e46      	ldr	r6, [pc, #280]	; (401bac <xTaskGenericCreate.part.5+0x1c0>)
			uxCurrentNumberOfTasks++;
  401a92:	6813      	ldr	r3, [r2, #0]
  401a94:	3301      	adds	r3, #1
  401a96:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401a98:	6833      	ldr	r3, [r6, #0]
  401a9a:	2b00      	cmp	r3, #0
  401a9c:	d03f      	beq.n	401b1e <xTaskGenericCreate.part.5+0x132>
				if( xSchedulerRunning == pdFALSE )
  401a9e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 401bec <xTaskGenericCreate.part.5+0x200>
  401aa2:	f8d8 3000 	ldr.w	r3, [r8]
  401aa6:	b92b      	cbnz	r3, 401ab4 <xTaskGenericCreate.part.5+0xc8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401aa8:	6833      	ldr	r3, [r6, #0]
  401aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401aae:	429a      	cmp	r2, r3
  401ab0:	d300      	bcc.n	401ab4 <xTaskGenericCreate.part.5+0xc8>
						pxCurrentTCB = pxNewTCB;
  401ab2:	6034      	str	r4, [r6, #0]
			uxTaskNumber++;
  401ab4:	f8df e138 	ldr.w	lr, [pc, #312]	; 401bf0 <xTaskGenericCreate.part.5+0x204>
			prvAddTaskToReadyList( pxNewTCB );
  401ab8:	2501      	movs	r5, #1
  401aba:	f8df c138 	ldr.w	ip, [pc, #312]	; 401bf4 <xTaskGenericCreate.part.5+0x208>
  401abe:	4659      	mov	r1, fp
  401ac0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ac2:	f8dc 9000 	ldr.w	r9, [ip]
			uxTaskNumber++;
  401ac6:	f8de 2000 	ldr.w	r2, [lr]
			prvAddTaskToReadyList( pxNewTCB );
  401aca:	fa05 f300 	lsl.w	r3, r5, r0
  401ace:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ad2:	ea43 0309 	orr.w	r3, r3, r9
			uxTaskNumber++;
  401ad6:	442a      	add	r2, r5
			prvAddTaskToReadyList( pxNewTCB );
  401ad8:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 401bc4 <xTaskGenericCreate.part.5+0x1d8>
			uxTaskNumber++;
  401adc:	f8ce 2000 	str.w	r2, [lr]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401ae0:	6422      	str	r2, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401ae2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401ae6:	4a32      	ldr	r2, [pc, #200]	; (401bb0 <xTaskGenericCreate.part.5+0x1c4>)
  401ae8:	f8cc 3000 	str.w	r3, [ip]
  401aec:	4790      	blx	r2
		taskEXIT_CRITICAL();
  401aee:	4b31      	ldr	r3, [pc, #196]	; (401bb4 <xTaskGenericCreate.part.5+0x1c8>)
  401af0:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401af2:	f8d8 3000 	ldr.w	r3, [r8]
  401af6:	b17b      	cbz	r3, 401b18 <xTaskGenericCreate.part.5+0x12c>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401af8:	6833      	ldr	r3, [r6, #0]
  401afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401afe:	429a      	cmp	r2, r3
  401b00:	d90a      	bls.n	401b18 <xTaskGenericCreate.part.5+0x12c>
				taskYIELD_IF_USING_PREEMPTION();
  401b02:	4b2d      	ldr	r3, [pc, #180]	; (401bb8 <xTaskGenericCreate.part.5+0x1cc>)
  401b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b08:	601a      	str	r2, [r3, #0]
  401b0a:	f3bf 8f4f 	dsb	sy
  401b0e:	f3bf 8f6f 	isb	sy
  401b12:	4628      	mov	r0, r5
  401b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( pxCurrentTCB->uxPriority < uxPriority )
  401b18:	4628      	mov	r0, r5
}
  401b1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxCurrentTCB =  pxNewTCB;
  401b1e:	6034      	str	r4, [r6, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401b20:	6813      	ldr	r3, [r2, #0]
  401b22:	2b01      	cmp	r3, #1
  401b24:	d014      	beq.n	401b50 <xTaskGenericCreate.part.5+0x164>
  401b26:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 401bec <xTaskGenericCreate.part.5+0x200>
  401b2a:	e7c3      	b.n	401ab4 <xTaskGenericCreate.part.5+0xc8>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b2c:	0090      	lsls	r0, r2, #2
  401b2e:	4c19      	ldr	r4, [pc, #100]	; (401b94 <xTaskGenericCreate.part.5+0x1a8>)
  401b30:	47a0      	blx	r4
		if( pxStack != NULL )
  401b32:	4606      	mov	r6, r0
  401b34:	2800      	cmp	r0, #0
  401b36:	f47f af64 	bne.w	401a02 <xTaskGenericCreate.part.5+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401b3a:	f04f 30ff 	mov.w	r0, #4294967295
  401b3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401b42:	4630      	mov	r0, r6
  401b44:	4b1d      	ldr	r3, [pc, #116]	; (401bbc <xTaskGenericCreate.part.5+0x1d0>)
  401b46:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401b48:	f04f 30ff 	mov.w	r0, #4294967295
  401b4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b50:	4d1b      	ldr	r5, [pc, #108]	; (401bc0 <xTaskGenericCreate.part.5+0x1d4>)
  401b52:	481c      	ldr	r0, [pc, #112]	; (401bc4 <xTaskGenericCreate.part.5+0x1d8>)
  401b54:	47a8      	blx	r5
  401b56:	481c      	ldr	r0, [pc, #112]	; (401bc8 <xTaskGenericCreate.part.5+0x1dc>)
  401b58:	47a8      	blx	r5
  401b5a:	481c      	ldr	r0, [pc, #112]	; (401bcc <xTaskGenericCreate.part.5+0x1e0>)
  401b5c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401b5e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401bf8 <xTaskGenericCreate.part.5+0x20c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b62:	481b      	ldr	r0, [pc, #108]	; (401bd0 <xTaskGenericCreate.part.5+0x1e4>)
  401b64:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401b66:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401bfc <xTaskGenericCreate.part.5+0x210>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b6a:	481a      	ldr	r0, [pc, #104]	; (401bd4 <xTaskGenericCreate.part.5+0x1e8>)
  401b6c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401b6e:	4640      	mov	r0, r8
  401b70:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401b72:	4648      	mov	r0, r9
  401b74:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401b76:	4818      	ldr	r0, [pc, #96]	; (401bd8 <xTaskGenericCreate.part.5+0x1ec>)
  401b78:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401b7a:	4818      	ldr	r0, [pc, #96]	; (401bdc <xTaskGenericCreate.part.5+0x1f0>)
  401b7c:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401b7e:	4818      	ldr	r0, [pc, #96]	; (401be0 <xTaskGenericCreate.part.5+0x1f4>)
  401b80:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401b82:	4a18      	ldr	r2, [pc, #96]	; (401be4 <xTaskGenericCreate.part.5+0x1f8>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401b84:	4b18      	ldr	r3, [pc, #96]	; (401be8 <xTaskGenericCreate.part.5+0x1fc>)
	pxDelayedTaskList = &xDelayedTaskList1;
  401b86:	f8c2 8000 	str.w	r8, [r2]
  401b8a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 401bec <xTaskGenericCreate.part.5+0x200>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401b8e:	f8c3 9000 	str.w	r9, [r3]
  401b92:	e78f      	b.n	401ab4 <xTaskGenericCreate.part.5+0xc8>
  401b94:	00401115 	.word	0x00401115
  401b98:	00403e85 	.word	0x00403e85
  401b9c:	00400d8d 	.word	0x00400d8d
  401ba0:	00400e75 	.word	0x00400e75
  401ba4:	00400ec5 	.word	0x00400ec5
  401ba8:	20400ac4 	.word	0x20400ac4
  401bac:	20400a54 	.word	0x20400a54
  401bb0:	00400d95 	.word	0x00400d95
  401bb4:	00400f11 	.word	0x00400f11
  401bb8:	e000ed04 	.word	0xe000ed04
  401bbc:	00401149 	.word	0x00401149
  401bc0:	00400d75 	.word	0x00400d75
  401bc4:	20400a60 	.word	0x20400a60
  401bc8:	20400a74 	.word	0x20400a74
  401bcc:	20400a88 	.word	0x20400a88
  401bd0:	20400a9c 	.word	0x20400a9c
  401bd4:	20400ab0 	.word	0x20400ab0
  401bd8:	20400b0c 	.word	0x20400b0c
  401bdc:	20400b38 	.word	0x20400b38
  401be0:	20400b24 	.word	0x20400b24
  401be4:	20400a58 	.word	0x20400a58
  401be8:	20400a5c 	.word	0x20400a5c
  401bec:	20400b20 	.word	0x20400b20
  401bf0:	20400ad0 	.word	0x20400ad0
  401bf4:	20400ad8 	.word	0x20400ad8
  401bf8:	20400adc 	.word	0x20400adc
  401bfc:	20400af0 	.word	0x20400af0

00401c00 <prvTaskIsTaskSuspended.part.0>:
  401c00:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c04:	b672      	cpsid	i
  401c06:	f383 8811 	msr	BASEPRI, r3
  401c0a:	f3bf 8f6f 	isb	sy
  401c0e:	f3bf 8f4f 	dsb	sy
  401c12:	b662      	cpsie	i
  401c14:	e7fe      	b.n	401c14 <prvTaskIsTaskSuspended.part.0+0x14>
  401c16:	bf00      	nop

00401c18 <xTaskGenericCreate>:
{
  401c18:	b470      	push	{r4, r5, r6}
  401c1a:	ac03      	add	r4, sp, #12
  401c1c:	cc70      	ldmia	r4, {r4, r5, r6}
	configASSERT( pxTaskCode );
  401c1e:	b160      	cbz	r0, 401c3a <xTaskGenericCreate+0x22>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401c20:	2c04      	cmp	r4, #4
  401c22:	d915      	bls.n	401c50 <xTaskGenericCreate+0x38>
  401c24:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c28:	b672      	cpsid	i
  401c2a:	f383 8811 	msr	BASEPRI, r3
  401c2e:	f3bf 8f6f 	isb	sy
  401c32:	f3bf 8f4f 	dsb	sy
  401c36:	b662      	cpsie	i
  401c38:	e7fe      	b.n	401c38 <xTaskGenericCreate+0x20>
  401c3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c3e:	b672      	cpsid	i
  401c40:	f383 8811 	msr	BASEPRI, r3
  401c44:	f3bf 8f6f 	isb	sy
  401c48:	f3bf 8f4f 	dsb	sy
  401c4c:	b662      	cpsie	i
  401c4e:	e7fe      	b.n	401c4e <xTaskGenericCreate+0x36>
  401c50:	9403      	str	r4, [sp, #12]
  401c52:	4c03      	ldr	r4, [pc, #12]	; (401c60 <xTaskGenericCreate+0x48>)
  401c54:	9605      	str	r6, [sp, #20]
  401c56:	9504      	str	r5, [sp, #16]
  401c58:	46a4      	mov	ip, r4
}
  401c5a:	bc70      	pop	{r4, r5, r6}
  401c5c:	4760      	bx	ip
  401c5e:	bf00      	nop
  401c60:	004019ed 	.word	0x004019ed

00401c64 <vTaskStartScheduler>:
{
  401c64:	b570      	push	{r4, r5, r6, lr}
  401c66:	2400      	movs	r4, #0
  401c68:	b084      	sub	sp, #16
  401c6a:	2282      	movs	r2, #130	; 0x82
  401c6c:	4919      	ldr	r1, [pc, #100]	; (401cd4 <vTaskStartScheduler+0x70>)
  401c6e:	9402      	str	r4, [sp, #8]
  401c70:	4623      	mov	r3, r4
  401c72:	9401      	str	r4, [sp, #4]
  401c74:	9400      	str	r4, [sp, #0]
  401c76:	4818      	ldr	r0, [pc, #96]	; (401cd8 <vTaskStartScheduler+0x74>)
  401c78:	4d18      	ldr	r5, [pc, #96]	; (401cdc <vTaskStartScheduler+0x78>)
  401c7a:	47a8      	blx	r5
		if( xReturn == pdPASS )
  401c7c:	2801      	cmp	r0, #1
  401c7e:	d00d      	beq.n	401c9c <vTaskStartScheduler+0x38>
		configASSERT( xReturn );
  401c80:	b950      	cbnz	r0, 401c98 <vTaskStartScheduler+0x34>
  401c82:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c86:	b672      	cpsid	i
  401c88:	f383 8811 	msr	BASEPRI, r3
  401c8c:	f3bf 8f6f 	isb	sy
  401c90:	f3bf 8f4f 	dsb	sy
  401c94:	b662      	cpsie	i
  401c96:	e7fe      	b.n	401c96 <vTaskStartScheduler+0x32>
}
  401c98:	b004      	add	sp, #16
  401c9a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xTimerCreateTimerTask();
  401c9c:	4b10      	ldr	r3, [pc, #64]	; (401ce0 <vTaskStartScheduler+0x7c>)
  401c9e:	4798      	blx	r3
	if( xReturn == pdPASS )
  401ca0:	2801      	cmp	r0, #1
  401ca2:	d1ed      	bne.n	401c80 <vTaskStartScheduler+0x1c>
  401ca4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ca8:	b672      	cpsid	i
  401caa:	f383 8811 	msr	BASEPRI, r3
  401cae:	f3bf 8f6f 	isb	sy
  401cb2:	f3bf 8f4f 	dsb	sy
  401cb6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401cb8:	4d0a      	ldr	r5, [pc, #40]	; (401ce4 <vTaskStartScheduler+0x80>)
  401cba:	f04f 36ff 	mov.w	r6, #4294967295
		xSchedulerRunning = pdTRUE;
  401cbe:	490a      	ldr	r1, [pc, #40]	; (401ce8 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) 0U;
  401cc0:	4a0a      	ldr	r2, [pc, #40]	; (401cec <vTaskStartScheduler+0x88>)
		if( xPortStartScheduler() != pdFALSE )
  401cc2:	4b0b      	ldr	r3, [pc, #44]	; (401cf0 <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
  401cc4:	602e      	str	r6, [r5, #0]
		xSchedulerRunning = pdTRUE;
  401cc6:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) 0U;
  401cc8:	6014      	str	r4, [r2, #0]
}
  401cca:	b004      	add	sp, #16
  401ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
  401cd0:	4718      	bx	r3
  401cd2:	bf00      	nop
  401cd4:	00408838 	.word	0x00408838
  401cd8:	00401fa5 	.word	0x00401fa5
  401cdc:	004019ed 	.word	0x004019ed
  401ce0:	004025e5 	.word	0x004025e5
  401ce4:	20400b04 	.word	0x20400b04
  401ce8:	20400b20 	.word	0x20400b20
  401cec:	20400b4c 	.word	0x20400b4c
  401cf0:	00400ff9 	.word	0x00400ff9

00401cf4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401cf4:	4a02      	ldr	r2, [pc, #8]	; (401d00 <vTaskSuspendAll+0xc>)
  401cf6:	6813      	ldr	r3, [r2, #0]
  401cf8:	3301      	adds	r3, #1
  401cfa:	6013      	str	r3, [r2, #0]
  401cfc:	4770      	bx	lr
  401cfe:	bf00      	nop
  401d00:	20400acc 	.word	0x20400acc

00401d04 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401d04:	4b01      	ldr	r3, [pc, #4]	; (401d0c <xTaskGetTickCount+0x8>)
  401d06:	6818      	ldr	r0, [r3, #0]
}
  401d08:	4770      	bx	lr
  401d0a:	bf00      	nop
  401d0c:	20400b4c 	.word	0x20400b4c

00401d10 <xTaskIncrementTick>:
{
  401d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401d14:	4b4c      	ldr	r3, [pc, #304]	; (401e48 <xTaskIncrementTick+0x138>)
  401d16:	681b      	ldr	r3, [r3, #0]
  401d18:	2b00      	cmp	r3, #0
  401d1a:	d170      	bne.n	401dfe <xTaskIncrementTick+0xee>
		++xTickCount;
  401d1c:	4b4b      	ldr	r3, [pc, #300]	; (401e4c <xTaskIncrementTick+0x13c>)
  401d1e:	681a      	ldr	r2, [r3, #0]
  401d20:	3201      	adds	r2, #1
  401d22:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401d24:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401d26:	2e00      	cmp	r6, #0
  401d28:	d05a      	beq.n	401de0 <xTaskIncrementTick+0xd0>
  401d2a:	f8df a150 	ldr.w	sl, [pc, #336]	; 401e7c <xTaskIncrementTick+0x16c>
			if( xConstTickCount >= xNextTaskUnblockTime )
  401d2e:	f8da 2000 	ldr.w	r2, [sl]
  401d32:	2400      	movs	r4, #0
  401d34:	4296      	cmp	r6, r2
  401d36:	d36a      	bcc.n	401e0e <xTaskIncrementTick+0xfe>
  401d38:	4d45      	ldr	r5, [pc, #276]	; (401e50 <xTaskIncrementTick+0x140>)
  401d3a:	4f46      	ldr	r7, [pc, #280]	; (401e54 <xTaskIncrementTick+0x144>)
  401d3c:	f8df 8140 	ldr.w	r8, [pc, #320]	; 401e80 <xTaskIncrementTick+0x170>
  401d40:	e02f      	b.n	401da2 <xTaskIncrementTick+0x92>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401d42:	682a      	ldr	r2, [r5, #0]
  401d44:	68d2      	ldr	r2, [r2, #12]
  401d46:	f8d2 900c 	ldr.w	r9, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401d4a:	f8d9 1004 	ldr.w	r1, [r9, #4]
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d4e:	f109 0b04 	add.w	fp, r9, #4
						if( xConstTickCount < xItemValue )
  401d52:	428e      	cmp	r6, r1
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d54:	4658      	mov	r0, fp
						if( xConstTickCount < xItemValue )
  401d56:	d36d      	bcc.n	401e34 <xTaskIncrementTick+0x124>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d58:	4b3f      	ldr	r3, [pc, #252]	; (401e58 <xTaskIncrementTick+0x148>)
  401d5a:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401d5c:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d60:	f109 0018 	add.w	r0, r9, #24
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401d64:	b109      	cbz	r1, 401d6a <xTaskIncrementTick+0x5a>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d66:	4b3c      	ldr	r3, [pc, #240]	; (401e58 <xTaskIncrementTick+0x148>)
  401d68:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  401d6a:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
  401d6e:	f04f 0e01 	mov.w	lr, #1
  401d72:	4b3a      	ldr	r3, [pc, #232]	; (401e5c <xTaskIncrementTick+0x14c>)
  401d74:	4659      	mov	r1, fp
  401d76:	fa0e fe00 	lsl.w	lr, lr, r0
  401d7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d7e:	681b      	ldr	r3, [r3, #0]
  401d80:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  401d84:	ea4e 0e03 	orr.w	lr, lr, r3
  401d88:	4b34      	ldr	r3, [pc, #208]	; (401e5c <xTaskIncrementTick+0x14c>)
  401d8a:	f8c3 e000 	str.w	lr, [r3]
  401d8e:	4b34      	ldr	r3, [pc, #208]	; (401e60 <xTaskIncrementTick+0x150>)
  401d90:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401d92:	f8d8 0000 	ldr.w	r0, [r8]
  401d96:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  401d9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401d9c:	4291      	cmp	r1, r2
  401d9e:	bf28      	it	cs
  401da0:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401da2:	682a      	ldr	r2, [r5, #0]
  401da4:	6812      	ldr	r2, [r2, #0]
  401da6:	2a00      	cmp	r2, #0
  401da8:	d1cb      	bne.n	401d42 <xTaskIncrementTick+0x32>
						xNextTaskUnblockTime = portMAX_DELAY;
  401daa:	f04f 32ff 	mov.w	r2, #4294967295
  401dae:	f8ca 2000 	str.w	r2, [sl]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401db2:	f8d8 3000 	ldr.w	r3, [r8]
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401db6:	4a2b      	ldr	r2, [pc, #172]	; (401e64 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401dba:	6812      	ldr	r2, [r2, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401dbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401dc0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401dc4:	2b02      	cmp	r3, #2
  401dc6:	bf28      	it	cs
  401dc8:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401dca:	b90a      	cbnz	r2, 401dd0 <xTaskIncrementTick+0xc0>
				vApplicationTickHook();
  401dcc:	4b26      	ldr	r3, [pc, #152]	; (401e68 <xTaskIncrementTick+0x158>)
  401dce:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401dd0:	4b26      	ldr	r3, [pc, #152]	; (401e6c <xTaskIncrementTick+0x15c>)
  401dd2:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401dd4:	2b00      	cmp	r3, #0
  401dd6:	bf18      	it	ne
  401dd8:	2401      	movne	r4, #1
}
  401dda:	4620      	mov	r0, r4
  401ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				taskSWITCH_DELAYED_LISTS();
  401de0:	4d1b      	ldr	r5, [pc, #108]	; (401e50 <xTaskIncrementTick+0x140>)
  401de2:	682b      	ldr	r3, [r5, #0]
  401de4:	681b      	ldr	r3, [r3, #0]
  401de6:	b1b3      	cbz	r3, 401e16 <xTaskIncrementTick+0x106>
  401de8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dec:	b672      	cpsid	i
  401dee:	f383 8811 	msr	BASEPRI, r3
  401df2:	f3bf 8f6f 	isb	sy
  401df6:	f3bf 8f4f 	dsb	sy
  401dfa:	b662      	cpsie	i
  401dfc:	e7fe      	b.n	401dfc <xTaskIncrementTick+0xec>
		++uxPendedTicks;
  401dfe:	4a19      	ldr	r2, [pc, #100]	; (401e64 <xTaskIncrementTick+0x154>)
BaseType_t xSwitchRequired = pdFALSE;
  401e00:	2400      	movs	r4, #0
			vApplicationTickHook();
  401e02:	4919      	ldr	r1, [pc, #100]	; (401e68 <xTaskIncrementTick+0x158>)
		++uxPendedTicks;
  401e04:	6813      	ldr	r3, [r2, #0]
  401e06:	3301      	adds	r3, #1
  401e08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401e0a:	4788      	blx	r1
  401e0c:	e7e0      	b.n	401dd0 <xTaskIncrementTick+0xc0>
  401e0e:	4f11      	ldr	r7, [pc, #68]	; (401e54 <xTaskIncrementTick+0x144>)
  401e10:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401e80 <xTaskIncrementTick+0x170>
  401e14:	e7cd      	b.n	401db2 <xTaskIncrementTick+0xa2>
				taskSWITCH_DELAYED_LISTS();
  401e16:	4b16      	ldr	r3, [pc, #88]	; (401e70 <xTaskIncrementTick+0x160>)
  401e18:	6829      	ldr	r1, [r5, #0]
  401e1a:	4a16      	ldr	r2, [pc, #88]	; (401e74 <xTaskIncrementTick+0x164>)
  401e1c:	6818      	ldr	r0, [r3, #0]
  401e1e:	6028      	str	r0, [r5, #0]
  401e20:	6019      	str	r1, [r3, #0]
  401e22:	6813      	ldr	r3, [r2, #0]
  401e24:	3301      	adds	r3, #1
  401e26:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e28:	682b      	ldr	r3, [r5, #0]
  401e2a:	681b      	ldr	r3, [r3, #0]
  401e2c:	b12b      	cbz	r3, 401e3a <xTaskIncrementTick+0x12a>
  401e2e:	4b12      	ldr	r3, [pc, #72]	; (401e78 <xTaskIncrementTick+0x168>)
  401e30:	4798      	blx	r3
  401e32:	e77a      	b.n	401d2a <xTaskIncrementTick+0x1a>
							xNextTaskUnblockTime = xItemValue;
  401e34:	f8ca 1000 	str.w	r1, [sl]
							break;
  401e38:	e7bb      	b.n	401db2 <xTaskIncrementTick+0xa2>
		xNextTaskUnblockTime = portMAX_DELAY;
  401e3a:	f8df a040 	ldr.w	sl, [pc, #64]	; 401e7c <xTaskIncrementTick+0x16c>
  401e3e:	f04f 32ff 	mov.w	r2, #4294967295
  401e42:	f8ca 2000 	str.w	r2, [sl]
  401e46:	e772      	b.n	401d2e <xTaskIncrementTick+0x1e>
  401e48:	20400acc 	.word	0x20400acc
  401e4c:	20400b4c 	.word	0x20400b4c
  401e50:	20400a58 	.word	0x20400a58
  401e54:	20400a60 	.word	0x20400a60
  401e58:	00400de1 	.word	0x00400de1
  401e5c:	20400ad8 	.word	0x20400ad8
  401e60:	00400d95 	.word	0x00400d95
  401e64:	20400ac8 	.word	0x20400ac8
  401e68:	00402ba1 	.word	0x00402ba1
  401e6c:	20400b50 	.word	0x20400b50
  401e70:	20400a5c 	.word	0x20400a5c
  401e74:	20400b08 	.word	0x20400b08
  401e78:	00401985 	.word	0x00401985
  401e7c:	20400b04 	.word	0x20400b04
  401e80:	20400a54 	.word	0x20400a54

00401e84 <xTaskResumeAll>:
{
  401e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
  401e88:	4c38      	ldr	r4, [pc, #224]	; (401f6c <xTaskResumeAll+0xe8>)
{
  401e8a:	b083      	sub	sp, #12
	configASSERT( uxSchedulerSuspended );
  401e8c:	6823      	ldr	r3, [r4, #0]
  401e8e:	b953      	cbnz	r3, 401ea6 <xTaskResumeAll+0x22>
  401e90:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e94:	b672      	cpsid	i
  401e96:	f383 8811 	msr	BASEPRI, r3
  401e9a:	f3bf 8f6f 	isb	sy
  401e9e:	f3bf 8f4f 	dsb	sy
  401ea2:	b662      	cpsie	i
  401ea4:	e7fe      	b.n	401ea4 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
  401ea6:	4b32      	ldr	r3, [pc, #200]	; (401f70 <xTaskResumeAll+0xec>)
  401ea8:	4798      	blx	r3
		--uxSchedulerSuspended;
  401eaa:	6823      	ldr	r3, [r4, #0]
  401eac:	3b01      	subs	r3, #1
  401eae:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401eb0:	6823      	ldr	r3, [r4, #0]
  401eb2:	2b00      	cmp	r3, #0
  401eb4:	d137      	bne.n	401f26 <xTaskResumeAll+0xa2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401eb6:	4b2f      	ldr	r3, [pc, #188]	; (401f74 <xTaskResumeAll+0xf0>)
  401eb8:	681b      	ldr	r3, [r3, #0]
  401eba:	2b00      	cmp	r3, #0
  401ebc:	d033      	beq.n	401f26 <xTaskResumeAll+0xa2>
  401ebe:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 401f98 <xTaskResumeAll+0x114>
  401ec2:	4b2d      	ldr	r3, [pc, #180]	; (401f78 <xTaskResumeAll+0xf4>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401ec4:	4e2d      	ldr	r6, [pc, #180]	; (401f7c <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList( pxTCB );
  401ec6:	4d2e      	ldr	r5, [pc, #184]	; (401f80 <xTaskResumeAll+0xfc>)
  401ec8:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 401f9c <xTaskResumeAll+0x118>
  401ecc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 401fa0 <xTaskResumeAll+0x11c>
  401ed0:	e01e      	b.n	401f10 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401ed2:	68da      	ldr	r2, [r3, #12]
  401ed4:	9301      	str	r3, [sp, #4]
  401ed6:	68d4      	ldr	r4, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401ed8:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401edc:	f104 0018 	add.w	r0, r4, #24
  401ee0:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401ee2:	4640      	mov	r0, r8
  401ee4:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401ee6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ee8:	f8d5 e000 	ldr.w	lr, [r5]
  401eec:	4641      	mov	r1, r8
  401eee:	fa07 f200 	lsl.w	r2, r7, r0
  401ef2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ef6:	ea42 020e 	orr.w	r2, r2, lr
  401efa:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
  401efe:	602a      	str	r2, [r5, #0]
  401f00:	47c8      	blx	r9
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401f02:	4a20      	ldr	r2, [pc, #128]	; (401f84 <xTaskResumeAll+0x100>)
  401f04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401f06:	6812      	ldr	r2, [r2, #0]
  401f08:	9b01      	ldr	r3, [sp, #4]
  401f0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401f0c:	4291      	cmp	r1, r2
  401f0e:	d211      	bcs.n	401f34 <xTaskResumeAll+0xb0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401f10:	681a      	ldr	r2, [r3, #0]
					prvAddTaskToReadyList( pxTCB );
  401f12:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401f14:	2a00      	cmp	r2, #0
  401f16:	d1dc      	bne.n	401ed2 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401f18:	4c1b      	ldr	r4, [pc, #108]	; (401f88 <xTaskResumeAll+0x104>)
  401f1a:	6823      	ldr	r3, [r4, #0]
  401f1c:	b96b      	cbnz	r3, 401f3a <xTaskResumeAll+0xb6>
				if( xYieldPending == pdTRUE )
  401f1e:	f8db 4000 	ldr.w	r4, [fp]
  401f22:	2c01      	cmp	r4, #1
  401f24:	d019      	beq.n	401f5a <xTaskResumeAll+0xd6>
BaseType_t xAlreadyYielded = pdFALSE;
  401f26:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401f28:	4b18      	ldr	r3, [pc, #96]	; (401f8c <xTaskResumeAll+0x108>)
  401f2a:	4798      	blx	r3
}
  401f2c:	4620      	mov	r0, r4
  401f2e:	b003      	add	sp, #12
  401f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						xYieldPending = pdTRUE;
  401f34:	f8cb 7000 	str.w	r7, [fp]
  401f38:	e7ea      	b.n	401f10 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401f3a:	6823      	ldr	r3, [r4, #0]
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d0ee      	beq.n	401f1e <xTaskResumeAll+0x9a>
  401f40:	4e13      	ldr	r6, [pc, #76]	; (401f90 <xTaskResumeAll+0x10c>)
							xYieldPending = pdTRUE;
  401f42:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
  401f44:	47b0      	blx	r6
  401f46:	b108      	cbz	r0, 401f4c <xTaskResumeAll+0xc8>
							xYieldPending = pdTRUE;
  401f48:	f8cb 5000 	str.w	r5, [fp]
						--uxPendedTicks;
  401f4c:	6823      	ldr	r3, [r4, #0]
  401f4e:	3b01      	subs	r3, #1
  401f50:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401f52:	6823      	ldr	r3, [r4, #0]
  401f54:	2b00      	cmp	r3, #0
  401f56:	d1f5      	bne.n	401f44 <xTaskResumeAll+0xc0>
  401f58:	e7e1      	b.n	401f1e <xTaskResumeAll+0x9a>
					taskYIELD_IF_USING_PREEMPTION();
  401f5a:	4b0e      	ldr	r3, [pc, #56]	; (401f94 <xTaskResumeAll+0x110>)
  401f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f60:	601a      	str	r2, [r3, #0]
  401f62:	f3bf 8f4f 	dsb	sy
  401f66:	f3bf 8f6f 	isb	sy
  401f6a:	e7dd      	b.n	401f28 <xTaskResumeAll+0xa4>
  401f6c:	20400acc 	.word	0x20400acc
  401f70:	00400ec5 	.word	0x00400ec5
  401f74:	20400ac4 	.word	0x20400ac4
  401f78:	20400b0c 	.word	0x20400b0c
  401f7c:	00400de1 	.word	0x00400de1
  401f80:	20400ad8 	.word	0x20400ad8
  401f84:	20400a54 	.word	0x20400a54
  401f88:	20400ac8 	.word	0x20400ac8
  401f8c:	00400f11 	.word	0x00400f11
  401f90:	00401d11 	.word	0x00401d11
  401f94:	e000ed04 	.word	0xe000ed04
  401f98:	20400b50 	.word	0x20400b50
  401f9c:	20400a60 	.word	0x20400a60
  401fa0:	00400d95 	.word	0x00400d95

00401fa4 <prvIdleTask>:
{
  401fa4:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  401fa8:	4c1e      	ldr	r4, [pc, #120]	; (402024 <prvIdleTask+0x80>)
  401faa:	4e1f      	ldr	r6, [pc, #124]	; (402028 <prvIdleTask+0x84>)
  401fac:	4f1f      	ldr	r7, [pc, #124]	; (40202c <prvIdleTask+0x88>)
  401fae:	f8df 9094 	ldr.w	r9, [pc, #148]	; 402044 <prvIdleTask+0xa0>
  401fb2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402048 <prvIdleTask+0xa4>
  401fb6:	4d1e      	ldr	r5, [pc, #120]	; (402030 <prvIdleTask+0x8c>)
  401fb8:	f8df a090 	ldr.w	sl, [pc, #144]	; 40204c <prvIdleTask+0xa8>
  401fbc:	e008      	b.n	401fd0 <prvIdleTask+0x2c>
	++uxSchedulerSuspended;
  401fbe:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401fc0:	f8d6 b000 	ldr.w	fp, [r6]
	++uxSchedulerSuspended;
  401fc4:	3301      	adds	r3, #1
  401fc6:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
  401fc8:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401fca:	f1bb 0f00 	cmp.w	fp, #0
  401fce:	d10f      	bne.n	401ff0 <prvIdleTask+0x4c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401fd0:	682b      	ldr	r3, [r5, #0]
  401fd2:	2b00      	cmp	r3, #0
  401fd4:	d1f3      	bne.n	401fbe <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401fd6:	f8da 3000 	ldr.w	r3, [sl]
  401fda:	2b01      	cmp	r3, #1
  401fdc:	d9f8      	bls.n	401fd0 <prvIdleTask+0x2c>
				taskYIELD();
  401fde:	4b15      	ldr	r3, [pc, #84]	; (402034 <prvIdleTask+0x90>)
  401fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fe4:	601a      	str	r2, [r3, #0]
  401fe6:	f3bf 8f4f 	dsb	sy
  401fea:	f3bf 8f6f 	isb	sy
  401fee:	e7ef      	b.n	401fd0 <prvIdleTask+0x2c>
				taskENTER_CRITICAL();
  401ff0:	4b11      	ldr	r3, [pc, #68]	; (402038 <prvIdleTask+0x94>)
  401ff2:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401ff4:	68f3      	ldr	r3, [r6, #12]
  401ff6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401ffa:	4b10      	ldr	r3, [pc, #64]	; (40203c <prvIdleTask+0x98>)
  401ffc:	f10b 0004 	add.w	r0, fp, #4
  402000:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402002:	f8d9 3000 	ldr.w	r3, [r9]
  402006:	3b01      	subs	r3, #1
  402008:	f8c9 3000 	str.w	r3, [r9]
					--uxTasksDeleted;
  40200c:	682b      	ldr	r3, [r5, #0]
  40200e:	3b01      	subs	r3, #1
  402010:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402012:	4b0b      	ldr	r3, [pc, #44]	; (402040 <prvIdleTask+0x9c>)
  402014:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402016:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
  40201a:	47c0      	blx	r8
		vPortFree( pxTCB );
  40201c:	4658      	mov	r0, fp
  40201e:	47c0      	blx	r8
  402020:	e7d6      	b.n	401fd0 <prvIdleTask+0x2c>
  402022:	bf00      	nop
  402024:	20400acc 	.word	0x20400acc
  402028:	20400b38 	.word	0x20400b38
  40202c:	00401e85 	.word	0x00401e85
  402030:	20400ad4 	.word	0x20400ad4
  402034:	e000ed04 	.word	0xe000ed04
  402038:	00400ec5 	.word	0x00400ec5
  40203c:	00400de1 	.word	0x00400de1
  402040:	00400f11 	.word	0x00400f11
  402044:	20400ac4 	.word	0x20400ac4
  402048:	00401149 	.word	0x00401149
  40204c:	20400a60 	.word	0x20400a60

00402050 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402050:	4b25      	ldr	r3, [pc, #148]	; (4020e8 <vTaskSwitchContext+0x98>)
  402052:	681b      	ldr	r3, [r3, #0]
  402054:	2b00      	cmp	r3, #0
  402056:	d135      	bne.n	4020c4 <vTaskSwitchContext+0x74>
		xYieldPending = pdFALSE;
  402058:	4a24      	ldr	r2, [pc, #144]	; (4020ec <vTaskSwitchContext+0x9c>)
{
  40205a:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
  40205c:	4c24      	ldr	r4, [pc, #144]	; (4020f0 <vTaskSwitchContext+0xa0>)
		xYieldPending = pdFALSE;
  40205e:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402060:	6823      	ldr	r3, [r4, #0]
  402062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402064:	681a      	ldr	r2, [r3, #0]
  402066:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40206a:	d103      	bne.n	402074 <vTaskSwitchContext+0x24>
  40206c:	685a      	ldr	r2, [r3, #4]
  40206e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402072:	d02b      	beq.n	4020cc <vTaskSwitchContext+0x7c>
  402074:	6820      	ldr	r0, [r4, #0]
  402076:	6821      	ldr	r1, [r4, #0]
  402078:	4b1e      	ldr	r3, [pc, #120]	; (4020f4 <vTaskSwitchContext+0xa4>)
  40207a:	3134      	adds	r1, #52	; 0x34
  40207c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40207e:	4b1e      	ldr	r3, [pc, #120]	; (4020f8 <vTaskSwitchContext+0xa8>)
  402080:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402082:	fab3 f383 	clz	r3, r3
  402086:	b2db      	uxtb	r3, r3
  402088:	4a1c      	ldr	r2, [pc, #112]	; (4020fc <vTaskSwitchContext+0xac>)
  40208a:	f1c3 031f 	rsb	r3, r3, #31
  40208e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402092:	009b      	lsls	r3, r3, #2
  402094:	58d0      	ldr	r0, [r2, r3]
  402096:	18d1      	adds	r1, r2, r3
  402098:	b950      	cbnz	r0, 4020b0 <vTaskSwitchContext+0x60>
	__asm volatile
  40209a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40209e:	b672      	cpsid	i
  4020a0:	f383 8811 	msr	BASEPRI, r3
  4020a4:	f3bf 8f6f 	isb	sy
  4020a8:	f3bf 8f4f 	dsb	sy
  4020ac:	b662      	cpsie	i
  4020ae:	e7fe      	b.n	4020ae <vTaskSwitchContext+0x5e>
  4020b0:	3308      	adds	r3, #8
  4020b2:	6848      	ldr	r0, [r1, #4]
  4020b4:	441a      	add	r2, r3
  4020b6:	6843      	ldr	r3, [r0, #4]
  4020b8:	4293      	cmp	r3, r2
  4020ba:	604b      	str	r3, [r1, #4]
  4020bc:	d00f      	beq.n	4020de <vTaskSwitchContext+0x8e>
  4020be:	68db      	ldr	r3, [r3, #12]
  4020c0:	6023      	str	r3, [r4, #0]
  4020c2:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  4020c4:	4b09      	ldr	r3, [pc, #36]	; (4020ec <vTaskSwitchContext+0x9c>)
  4020c6:	2201      	movs	r2, #1
  4020c8:	601a      	str	r2, [r3, #0]
  4020ca:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4020cc:	689a      	ldr	r2, [r3, #8]
  4020ce:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4020d2:	d1cf      	bne.n	402074 <vTaskSwitchContext+0x24>
  4020d4:	68db      	ldr	r3, [r3, #12]
  4020d6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4020da:	d1cb      	bne.n	402074 <vTaskSwitchContext+0x24>
  4020dc:	e7cf      	b.n	40207e <vTaskSwitchContext+0x2e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4020de:	685b      	ldr	r3, [r3, #4]
  4020e0:	604b      	str	r3, [r1, #4]
  4020e2:	68db      	ldr	r3, [r3, #12]
  4020e4:	6023      	str	r3, [r4, #0]
  4020e6:	bd10      	pop	{r4, pc}
  4020e8:	20400acc 	.word	0x20400acc
  4020ec:	20400b50 	.word	0x20400b50
  4020f0:	20400a54 	.word	0x20400a54
  4020f4:	00402b89 	.word	0x00402b89
  4020f8:	20400ad8 	.word	0x20400ad8
  4020fc:	20400a60 	.word	0x20400a60

00402100 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  402100:	b1e8      	cbz	r0, 40213e <vTaskPlaceOnEventList+0x3e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402102:	4b18      	ldr	r3, [pc, #96]	; (402164 <vTaskPlaceOnEventList+0x64>)
{
  402104:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402106:	4d18      	ldr	r5, [pc, #96]	; (402168 <vTaskPlaceOnEventList+0x68>)
  402108:	460c      	mov	r4, r1
  40210a:	6829      	ldr	r1, [r5, #0]
  40210c:	3118      	adds	r1, #24
  40210e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402110:	6828      	ldr	r0, [r5, #0]
  402112:	4b16      	ldr	r3, [pc, #88]	; (40216c <vTaskPlaceOnEventList+0x6c>)
  402114:	3004      	adds	r0, #4
  402116:	4798      	blx	r3
  402118:	b940      	cbnz	r0, 40212c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40211a:	682b      	ldr	r3, [r5, #0]
  40211c:	2201      	movs	r2, #1
  40211e:	4914      	ldr	r1, [pc, #80]	; (402170 <vTaskPlaceOnEventList+0x70>)
  402120:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402122:	680b      	ldr	r3, [r1, #0]
  402124:	4082      	lsls	r2, r0
  402126:	ea23 0302 	bic.w	r3, r3, r2
  40212a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40212c:	1c63      	adds	r3, r4, #1
  40212e:	d011      	beq.n	402154 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402130:	4a10      	ldr	r2, [pc, #64]	; (402174 <vTaskPlaceOnEventList+0x74>)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402132:	4b11      	ldr	r3, [pc, #68]	; (402178 <vTaskPlaceOnEventList+0x78>)
			xTimeToWake = xTickCount + xTicksToWait;
  402134:	6810      	ldr	r0, [r2, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402136:	4420      	add	r0, r4
}
  402138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40213c:	4718      	bx	r3
  40213e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402142:	b672      	cpsid	i
  402144:	f383 8811 	msr	BASEPRI, r3
  402148:	f3bf 8f6f 	isb	sy
  40214c:	f3bf 8f4f 	dsb	sy
  402150:	b662      	cpsie	i
  402152:	e7fe      	b.n	402152 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402154:	6829      	ldr	r1, [r5, #0]
  402156:	4809      	ldr	r0, [pc, #36]	; (40217c <vTaskPlaceOnEventList+0x7c>)
  402158:	3104      	adds	r1, #4
  40215a:	4b09      	ldr	r3, [pc, #36]	; (402180 <vTaskPlaceOnEventList+0x80>)
}
  40215c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402160:	4718      	bx	r3
  402162:	bf00      	nop
  402164:	00400dad 	.word	0x00400dad
  402168:	20400a54 	.word	0x20400a54
  40216c:	00400de1 	.word	0x00400de1
  402170:	20400ad8 	.word	0x20400ad8
  402174:	20400b4c 	.word	0x20400b4c
  402178:	0040199d 	.word	0x0040199d
  40217c:	20400b24 	.word	0x20400b24
  402180:	00400d95 	.word	0x00400d95

00402184 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402184:	b1f8      	cbz	r0, 4021c6 <vTaskPlaceOnEventListRestricted+0x42>
	{
  402186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40218a:	4c18      	ldr	r4, [pc, #96]	; (4021ec <vTaskPlaceOnEventListRestricted+0x68>)
  40218c:	460d      	mov	r5, r1
  40218e:	4f18      	ldr	r7, [pc, #96]	; (4021f0 <vTaskPlaceOnEventListRestricted+0x6c>)
  402190:	4616      	mov	r6, r2
  402192:	6821      	ldr	r1, [r4, #0]
  402194:	3118      	adds	r1, #24
  402196:	47b8      	blx	r7
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402198:	6820      	ldr	r0, [r4, #0]
  40219a:	4b16      	ldr	r3, [pc, #88]	; (4021f4 <vTaskPlaceOnEventListRestricted+0x70>)
  40219c:	3004      	adds	r0, #4
  40219e:	4798      	blx	r3
  4021a0:	b940      	cbnz	r0, 4021b4 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4021a2:	6823      	ldr	r3, [r4, #0]
  4021a4:	2201      	movs	r2, #1
  4021a6:	4914      	ldr	r1, [pc, #80]	; (4021f8 <vTaskPlaceOnEventListRestricted+0x74>)
  4021a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4021aa:	680b      	ldr	r3, [r1, #0]
  4021ac:	4082      	lsls	r2, r0
  4021ae:	ea23 0302 	bic.w	r3, r3, r2
  4021b2:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4021b4:	2e01      	cmp	r6, #1
  4021b6:	d011      	beq.n	4021dc <vTaskPlaceOnEventListRestricted+0x58>
				xTimeToWake = xTickCount + xTicksToWait;
  4021b8:	4a10      	ldr	r2, [pc, #64]	; (4021fc <vTaskPlaceOnEventListRestricted+0x78>)
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4021ba:	4b11      	ldr	r3, [pc, #68]	; (402200 <vTaskPlaceOnEventListRestricted+0x7c>)
				xTimeToWake = xTickCount + xTicksToWait;
  4021bc:	6810      	ldr	r0, [r2, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4021be:	4428      	add	r0, r5
	}
  4021c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4021c4:	4718      	bx	r3
  4021c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ca:	b672      	cpsid	i
  4021cc:	f383 8811 	msr	BASEPRI, r3
  4021d0:	f3bf 8f6f 	isb	sy
  4021d4:	f3bf 8f4f 	dsb	sy
  4021d8:	b662      	cpsie	i
  4021da:	e7fe      	b.n	4021da <vTaskPlaceOnEventListRestricted+0x56>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021dc:	6821      	ldr	r1, [r4, #0]
  4021de:	463b      	mov	r3, r7
  4021e0:	4808      	ldr	r0, [pc, #32]	; (402204 <vTaskPlaceOnEventListRestricted+0x80>)
  4021e2:	3104      	adds	r1, #4
	}
  4021e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021e8:	4718      	bx	r3
  4021ea:	bf00      	nop
  4021ec:	20400a54 	.word	0x20400a54
  4021f0:	00400d95 	.word	0x00400d95
  4021f4:	00400de1 	.word	0x00400de1
  4021f8:	20400ad8 	.word	0x20400ad8
  4021fc:	20400b4c 	.word	0x20400b4c
  402200:	0040199d 	.word	0x0040199d
  402204:	20400b24 	.word	0x20400b24

00402208 <xTaskRemoveFromEventList>:
{
  402208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40220a:	68c3      	ldr	r3, [r0, #12]
  40220c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40220e:	b31c      	cbz	r4, 402258 <xTaskRemoveFromEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402210:	f104 0518 	add.w	r5, r4, #24
  402214:	4f19      	ldr	r7, [pc, #100]	; (40227c <xTaskRemoveFromEventList+0x74>)
  402216:	4628      	mov	r0, r5
  402218:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40221a:	4b19      	ldr	r3, [pc, #100]	; (402280 <xTaskRemoveFromEventList+0x78>)
  40221c:	681b      	ldr	r3, [r3, #0]
  40221e:	bb43      	cbnz	r3, 402272 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402220:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
  402222:	4d18      	ldr	r5, [pc, #96]	; (402284 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402224:	4630      	mov	r0, r6
  402226:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
  402228:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40222a:	2301      	movs	r3, #1
  40222c:	4816      	ldr	r0, [pc, #88]	; (402288 <xTaskRemoveFromEventList+0x80>)
  40222e:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  402232:	4631      	mov	r1, r6
  402234:	4093      	lsls	r3, r2
  402236:	682a      	ldr	r2, [r5, #0]
  402238:	eb00 0087 	add.w	r0, r0, r7, lsl #2
  40223c:	4313      	orrs	r3, r2
  40223e:	4a13      	ldr	r2, [pc, #76]	; (40228c <xTaskRemoveFromEventList+0x84>)
  402240:	602b      	str	r3, [r5, #0]
  402242:	4790      	blx	r2
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402244:	4b12      	ldr	r3, [pc, #72]	; (402290 <xTaskRemoveFromEventList+0x88>)
  402246:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402248:	681b      	ldr	r3, [r3, #0]
  40224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40224c:	429a      	cmp	r2, r3
  40224e:	d90e      	bls.n	40226e <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
  402250:	4b10      	ldr	r3, [pc, #64]	; (402294 <xTaskRemoveFromEventList+0x8c>)
  402252:	2001      	movs	r0, #1
  402254:	6018      	str	r0, [r3, #0]
  402256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402258:	f04f 0380 	mov.w	r3, #128	; 0x80
  40225c:	b672      	cpsid	i
  40225e:	f383 8811 	msr	BASEPRI, r3
  402262:	f3bf 8f6f 	isb	sy
  402266:	f3bf 8f4f 	dsb	sy
  40226a:	b662      	cpsie	i
  40226c:	e7fe      	b.n	40226c <xTaskRemoveFromEventList+0x64>
		xReturn = pdFALSE;
  40226e:	2000      	movs	r0, #0
}
  402270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402272:	4629      	mov	r1, r5
  402274:	4808      	ldr	r0, [pc, #32]	; (402298 <xTaskRemoveFromEventList+0x90>)
  402276:	4b05      	ldr	r3, [pc, #20]	; (40228c <xTaskRemoveFromEventList+0x84>)
  402278:	4798      	blx	r3
  40227a:	e7e3      	b.n	402244 <xTaskRemoveFromEventList+0x3c>
  40227c:	00400de1 	.word	0x00400de1
  402280:	20400acc 	.word	0x20400acc
  402284:	20400ad8 	.word	0x20400ad8
  402288:	20400a60 	.word	0x20400a60
  40228c:	00400d95 	.word	0x00400d95
  402290:	20400a54 	.word	0x20400a54
  402294:	20400b50 	.word	0x20400b50
  402298:	20400b0c 	.word	0x20400b0c

0040229c <vTaskSetTimeOutState>:
{
  40229c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  40229e:	b130      	cbz	r0, 4022ae <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4022a0:	4a04      	ldr	r2, [pc, #16]	; (4022b4 <vTaskSetTimeOutState+0x18>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  4022a2:	4b05      	ldr	r3, [pc, #20]	; (4022b8 <vTaskSetTimeOutState+0x1c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4022a4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4022a6:	681b      	ldr	r3, [r3, #0]
  4022a8:	e880 000c 	stmia.w	r0, {r2, r3}
  4022ac:	bd08      	pop	{r3, pc}
  4022ae:	4b03      	ldr	r3, [pc, #12]	; (4022bc <vTaskSetTimeOutState+0x20>)
  4022b0:	4798      	blx	r3
  4022b2:	bf00      	nop
  4022b4:	20400b08 	.word	0x20400b08
  4022b8:	20400b4c 	.word	0x20400b4c
  4022bc:	00401c01 	.word	0x00401c01

004022c0 <xTaskCheckForTimeOut>:
{
  4022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
  4022c2:	2800      	cmp	r0, #0
  4022c4:	d030      	beq.n	402328 <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
  4022c6:	b321      	cbz	r1, 402312 <xTaskCheckForTimeOut+0x52>
  4022c8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4022ca:	4b1f      	ldr	r3, [pc, #124]	; (402348 <xTaskCheckForTimeOut+0x88>)
  4022cc:	4604      	mov	r4, r0
  4022ce:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
  4022d0:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
  4022d2:	481e      	ldr	r0, [pc, #120]	; (40234c <xTaskCheckForTimeOut+0x8c>)
			if( *pxTicksToWait == portMAX_DELAY )
  4022d4:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
  4022d6:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4022d8:	d031      	beq.n	40233e <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4022da:	4e1d      	ldr	r6, [pc, #116]	; (402350 <xTaskCheckForTimeOut+0x90>)
  4022dc:	6827      	ldr	r7, [r4, #0]
  4022de:	6832      	ldr	r2, [r6, #0]
  4022e0:	4297      	cmp	r7, r2
  4022e2:	6862      	ldr	r2, [r4, #4]
  4022e4:	d006      	beq.n	4022f4 <xTaskCheckForTimeOut+0x34>
  4022e6:	4291      	cmp	r1, r2
  4022e8:	d304      	bcc.n	4022f4 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
  4022ea:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
  4022ec:	4b19      	ldr	r3, [pc, #100]	; (402354 <xTaskCheckForTimeOut+0x94>)
  4022ee:	4798      	blx	r3
}
  4022f0:	4630      	mov	r0, r6
  4022f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4022f4:	1a8f      	subs	r7, r1, r2
  4022f6:	42bb      	cmp	r3, r7
  4022f8:	d9f7      	bls.n	4022ea <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4022fa:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4022fc:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4022fe:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
  402300:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402302:	4413      	add	r3, r2
  402304:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402306:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402308:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
  40230a:	4b12      	ldr	r3, [pc, #72]	; (402354 <xTaskCheckForTimeOut+0x94>)
  40230c:	4798      	blx	r3
}
  40230e:	4630      	mov	r0, r6
  402310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402312:	f04f 0380 	mov.w	r3, #128	; 0x80
  402316:	b672      	cpsid	i
  402318:	f383 8811 	msr	BASEPRI, r3
  40231c:	f3bf 8f6f 	isb	sy
  402320:	f3bf 8f4f 	dsb	sy
  402324:	b662      	cpsie	i
  402326:	e7fe      	b.n	402326 <xTaskCheckForTimeOut+0x66>
  402328:	f04f 0380 	mov.w	r3, #128	; 0x80
  40232c:	b672      	cpsid	i
  40232e:	f383 8811 	msr	BASEPRI, r3
  402332:	f3bf 8f6f 	isb	sy
  402336:	f3bf 8f4f 	dsb	sy
  40233a:	b662      	cpsie	i
  40233c:	e7fe      	b.n	40233c <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
  40233e:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
  402340:	4b04      	ldr	r3, [pc, #16]	; (402354 <xTaskCheckForTimeOut+0x94>)
  402342:	4798      	blx	r3
}
  402344:	4630      	mov	r0, r6
  402346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402348:	00400ec5 	.word	0x00400ec5
  40234c:	20400b4c 	.word	0x20400b4c
  402350:	20400b08 	.word	0x20400b08
  402354:	00400f11 	.word	0x00400f11

00402358 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402358:	4b01      	ldr	r3, [pc, #4]	; (402360 <vTaskMissedYield+0x8>)
  40235a:	2201      	movs	r2, #1
  40235c:	601a      	str	r2, [r3, #0]
  40235e:	4770      	bx	lr
  402360:	20400b50 	.word	0x20400b50

00402364 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402364:	4b05      	ldr	r3, [pc, #20]	; (40237c <xTaskGetSchedulerState+0x18>)
  402366:	681b      	ldr	r3, [r3, #0]
  402368:	b133      	cbz	r3, 402378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40236a:	4b05      	ldr	r3, [pc, #20]	; (402380 <xTaskGetSchedulerState+0x1c>)
  40236c:	681b      	ldr	r3, [r3, #0]
  40236e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402370:	bf0c      	ite	eq
  402372:	2002      	moveq	r0, #2
  402374:	2000      	movne	r0, #0
  402376:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402378:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40237a:	4770      	bx	lr
  40237c:	20400b20 	.word	0x20400b20
  402380:	20400acc 	.word	0x20400acc

00402384 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402384:	2800      	cmp	r0, #0
  402386:	d046      	beq.n	402416 <vTaskPriorityInherit+0x92>
	{
  402388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40238c:	4c22      	ldr	r4, [pc, #136]	; (402418 <vTaskPriorityInherit+0x94>)
  40238e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402390:	6822      	ldr	r2, [r4, #0]
  402392:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402394:	4293      	cmp	r3, r2
  402396:	d212      	bcs.n	4023be <vTaskPriorityInherit+0x3a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402398:	6982      	ldr	r2, [r0, #24]
  40239a:	2a00      	cmp	r2, #0
  40239c:	db04      	blt.n	4023a8 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40239e:	6822      	ldr	r2, [r4, #0]
  4023a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4023a2:	f1c2 0205 	rsb	r2, r2, #5
  4023a6:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4023a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4023ac:	4d1b      	ldr	r5, [pc, #108]	; (40241c <vTaskPriorityInherit+0x98>)
  4023ae:	6942      	ldr	r2, [r0, #20]
  4023b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4023b4:	429a      	cmp	r2, r3
  4023b6:	d004      	beq.n	4023c2 <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4023b8:	6823      	ldr	r3, [r4, #0]
  4023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4023bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  4023be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4023c2:	1d07      	adds	r7, r0, #4
  4023c4:	4606      	mov	r6, r0
  4023c6:	4b16      	ldr	r3, [pc, #88]	; (402420 <vTaskPriorityInherit+0x9c>)
  4023c8:	4638      	mov	r0, r7
  4023ca:	4798      	blx	r3
  4023cc:	bb08      	cbnz	r0, 402412 <vTaskPriorityInherit+0x8e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4023ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  4023d0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4023d4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4023d8:	b9da      	cbnz	r2, 402412 <vTaskPriorityInherit+0x8e>
  4023da:	4a12      	ldr	r2, [pc, #72]	; (402424 <vTaskPriorityInherit+0xa0>)
  4023dc:	2001      	movs	r0, #1
  4023de:	6811      	ldr	r1, [r2, #0]
  4023e0:	fa00 f303 	lsl.w	r3, r0, r3
  4023e4:	ea21 0303 	bic.w	r3, r1, r3
  4023e8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4023ea:	6820      	ldr	r0, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
  4023ec:	2301      	movs	r3, #1
  4023ee:	f8d2 e000 	ldr.w	lr, [r2]
  4023f2:	4639      	mov	r1, r7
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4023f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4023f6:	4c0c      	ldr	r4, [pc, #48]	; (402428 <vTaskPriorityInherit+0xa4>)
  4023f8:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4023fa:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4023fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402400:	ea43 030e 	orr.w	r3, r3, lr
  402404:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  402408:	6013      	str	r3, [r2, #0]
  40240a:	4623      	mov	r3, r4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  40240c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
  402410:	4718      	bx	r3
  402412:	4a04      	ldr	r2, [pc, #16]	; (402424 <vTaskPriorityInherit+0xa0>)
  402414:	e7e9      	b.n	4023ea <vTaskPriorityInherit+0x66>
  402416:	4770      	bx	lr
  402418:	20400a54 	.word	0x20400a54
  40241c:	20400a60 	.word	0x20400a60
  402420:	00400de1 	.word	0x00400de1
  402424:	20400ad8 	.word	0x20400ad8
  402428:	00400d95 	.word	0x00400d95

0040242c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40242c:	2800      	cmp	r0, #0
  40242e:	d042      	beq.n	4024b6 <xTaskPriorityDisinherit+0x8a>
	{
  402430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402432:	4b2b      	ldr	r3, [pc, #172]	; (4024e0 <xTaskPriorityDisinherit+0xb4>)
  402434:	681b      	ldr	r3, [r3, #0]
  402436:	4298      	cmp	r0, r3
  402438:	d00a      	beq.n	402450 <xTaskPriorityDisinherit+0x24>
  40243a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40243e:	b672      	cpsid	i
  402440:	f383 8811 	msr	BASEPRI, r3
  402444:	f3bf 8f6f 	isb	sy
  402448:	f3bf 8f4f 	dsb	sy
  40244c:	b662      	cpsie	i
  40244e:	e7fe      	b.n	40244e <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  402450:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  402452:	b953      	cbnz	r3, 40246a <xTaskPriorityDisinherit+0x3e>
  402454:	f04f 0380 	mov.w	r3, #128	; 0x80
  402458:	b672      	cpsid	i
  40245a:	f383 8811 	msr	BASEPRI, r3
  40245e:	f3bf 8f6f 	isb	sy
  402462:	f3bf 8f4f 	dsb	sy
  402466:	b662      	cpsie	i
  402468:	e7fe      	b.n	402468 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40246a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
  40246c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40246e:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
  402470:	64c3      	str	r3, [r0, #76]	; 0x4c
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402472:	4291      	cmp	r1, r2
  402474:	d031      	beq.n	4024da <xTaskPriorityDisinherit+0xae>
  402476:	2b00      	cmp	r3, #0
  402478:	d12f      	bne.n	4024da <xTaskPriorityDisinherit+0xae>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40247a:	1d07      	adds	r7, r0, #4
  40247c:	4604      	mov	r4, r0
  40247e:	4b19      	ldr	r3, [pc, #100]	; (4024e4 <xTaskPriorityDisinherit+0xb8>)
  402480:	4638      	mov	r0, r7
  402482:	4798      	blx	r3
  402484:	b1c8      	cbz	r0, 4024ba <xTaskPriorityDisinherit+0x8e>
  402486:	4818      	ldr	r0, [pc, #96]	; (4024e8 <xTaskPriorityDisinherit+0xbc>)
  402488:	4a18      	ldr	r2, [pc, #96]	; (4024ec <xTaskPriorityDisinherit+0xc0>)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40248a:	6ca3      	ldr	r3, [r4, #72]	; 0x48

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
  40248c:	2501      	movs	r5, #1
  40248e:	f8d2 e000 	ldr.w	lr, [r2]
  402492:	4639      	mov	r1, r7
  402494:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402498:	f1c3 0705 	rsb	r7, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40249c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  40249e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024a2:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4024a6:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4024a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4024ac:	4b10      	ldr	r3, [pc, #64]	; (4024f0 <xTaskPriorityDisinherit+0xc4>)
  4024ae:	6016      	str	r6, [r2, #0]
  4024b0:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4024b2:	4628      	mov	r0, r5
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4024b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
  4024b6:	2000      	movs	r0, #0
	}
  4024b8:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4024ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4024bc:	480a      	ldr	r0, [pc, #40]	; (4024e8 <xTaskPriorityDisinherit+0xbc>)
  4024be:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4024c2:	4a0a      	ldr	r2, [pc, #40]	; (4024ec <xTaskPriorityDisinherit+0xc0>)
  4024c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  4024c8:	2b00      	cmp	r3, #0
  4024ca:	d1de      	bne.n	40248a <xTaskPriorityDisinherit+0x5e>
  4024cc:	2501      	movs	r5, #1
  4024ce:	6813      	ldr	r3, [r2, #0]
  4024d0:	40b5      	lsls	r5, r6
  4024d2:	ea23 0305 	bic.w	r3, r3, r5
  4024d6:	6013      	str	r3, [r2, #0]
  4024d8:	e7d7      	b.n	40248a <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
  4024da:	2000      	movs	r0, #0
  4024dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024de:	bf00      	nop
  4024e0:	20400a54 	.word	0x20400a54
  4024e4:	00400de1 	.word	0x00400de1
  4024e8:	20400a60 	.word	0x20400a60
  4024ec:	20400ad8 	.word	0x20400ad8
  4024f0:	00400d95 	.word	0x00400d95

004024f4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4024f4:	4b04      	ldr	r3, [pc, #16]	; (402508 <pvTaskIncrementMutexHeldCount+0x14>)
  4024f6:	681a      	ldr	r2, [r3, #0]
  4024f8:	b11a      	cbz	r2, 402502 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4024fa:	6819      	ldr	r1, [r3, #0]
  4024fc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
  4024fe:	3201      	adds	r2, #1
  402500:	64ca      	str	r2, [r1, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402502:	6818      	ldr	r0, [r3, #0]
	}
  402504:	4770      	bx	lr
  402506:	bf00      	nop
  402508:	20400a54 	.word	0x20400a54

0040250c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
  40250c:	4291      	cmp	r1, r2
{
  40250e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402510:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402512:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
  402514:	d805      	bhi.n	402522 <prvInsertTimerInActiveList+0x16>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402516:	1ad2      	subs	r2, r2, r3
  402518:	6983      	ldr	r3, [r0, #24]
  40251a:	429a      	cmp	r2, r3
  40251c:	d307      	bcc.n	40252e <prvInsertTimerInActiveList+0x22>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40251e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402520:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402522:	429a      	cmp	r2, r3
  402524:	d201      	bcs.n	40252a <prvInsertTimerInActiveList+0x1e>
  402526:	4299      	cmp	r1, r3
  402528:	d2f9      	bcs.n	40251e <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40252a:	4a04      	ldr	r2, [pc, #16]	; (40253c <prvInsertTimerInActiveList+0x30>)
  40252c:	e000      	b.n	402530 <prvInsertTimerInActiveList+0x24>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40252e:	4a04      	ldr	r2, [pc, #16]	; (402540 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402530:	1d01      	adds	r1, r0, #4
  402532:	4b04      	ldr	r3, [pc, #16]	; (402544 <prvInsertTimerInActiveList+0x38>)
  402534:	6810      	ldr	r0, [r2, #0]
  402536:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402538:	2000      	movs	r0, #0
  40253a:	bd08      	pop	{r3, pc}
  40253c:	20400b54 	.word	0x20400b54
  402540:	20400b58 	.word	0x20400b58
  402544:	00400dad 	.word	0x00400dad

00402548 <prvCheckForValidListAndQueue.part.1>:
  402548:	f04f 0380 	mov.w	r3, #128	; 0x80
  40254c:	b672      	cpsid	i
  40254e:	f383 8811 	msr	BASEPRI, r3
  402552:	f3bf 8f6f 	isb	sy
  402556:	f3bf 8f4f 	dsb	sy
  40255a:	b662      	cpsie	i
  40255c:	e7fe      	b.n	40255c <prvCheckForValidListAndQueue.part.1+0x14>
  40255e:	bf00      	nop

00402560 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
  402564:	4c13      	ldr	r4, [pc, #76]	; (4025b4 <prvCheckForValidListAndQueue+0x54>)
	taskENTER_CRITICAL();
  402566:	4b14      	ldr	r3, [pc, #80]	; (4025b8 <prvCheckForValidListAndQueue+0x58>)
  402568:	4798      	blx	r3
		if( xTimerQueue == NULL )
  40256a:	6827      	ldr	r7, [r4, #0]
  40256c:	b11f      	cbz	r7, 402576 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40256e:	4b13      	ldr	r3, [pc, #76]	; (4025bc <prvCheckForValidListAndQueue+0x5c>)
}
  402570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  402574:	4718      	bx	r3
			vListInitialise( &xActiveTimerList1 );
  402576:	4e12      	ldr	r6, [pc, #72]	; (4025c0 <prvCheckForValidListAndQueue+0x60>)
			vListInitialise( &xActiveTimerList2 );
  402578:	4d12      	ldr	r5, [pc, #72]	; (4025c4 <prvCheckForValidListAndQueue+0x64>)
			vListInitialise( &xActiveTimerList1 );
  40257a:	4630      	mov	r0, r6
  40257c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4025dc <prvCheckForValidListAndQueue+0x7c>
  402580:	47c0      	blx	r8
			vListInitialise( &xActiveTimerList2 );
  402582:	4628      	mov	r0, r5
  402584:	47c0      	blx	r8
			pxCurrentTimerList = &xActiveTimerList1;
  402586:	4b10      	ldr	r3, [pc, #64]	; (4025c8 <prvCheckForValidListAndQueue+0x68>)
			pxOverflowTimerList = &xActiveTimerList2;
  402588:	f8df e054 	ldr.w	lr, [pc, #84]	; 4025e0 <prvCheckForValidListAndQueue+0x80>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40258c:	463a      	mov	r2, r7
			pxCurrentTimerList = &xActiveTimerList1;
  40258e:	601e      	str	r6, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402590:	2110      	movs	r1, #16
  402592:	2005      	movs	r0, #5
  402594:	4b0d      	ldr	r3, [pc, #52]	; (4025cc <prvCheckForValidListAndQueue+0x6c>)
			pxOverflowTimerList = &xActiveTimerList2;
  402596:	f8ce 5000 	str.w	r5, [lr]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40259a:	4798      	blx	r3
  40259c:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
  40259e:	b130      	cbz	r0, 4025ae <prvCheckForValidListAndQueue+0x4e>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4025a0:	4b0b      	ldr	r3, [pc, #44]	; (4025d0 <prvCheckForValidListAndQueue+0x70>)
  4025a2:	490c      	ldr	r1, [pc, #48]	; (4025d4 <prvCheckForValidListAndQueue+0x74>)
  4025a4:	4798      	blx	r3
	taskEXIT_CRITICAL();
  4025a6:	4b05      	ldr	r3, [pc, #20]	; (4025bc <prvCheckForValidListAndQueue+0x5c>)
}
  4025a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  4025ac:	4718      	bx	r3
  4025ae:	4b0a      	ldr	r3, [pc, #40]	; (4025d8 <prvCheckForValidListAndQueue+0x78>)
  4025b0:	4798      	blx	r3
  4025b2:	bf00      	nop
  4025b4:	20400b88 	.word	0x20400b88
  4025b8:	00400ec5 	.word	0x00400ec5
  4025bc:	00400f11 	.word	0x00400f11
  4025c0:	20400b5c 	.word	0x20400b5c
  4025c4:	20400b70 	.word	0x20400b70
  4025c8:	20400b54 	.word	0x20400b54
  4025cc:	004013f5 	.word	0x004013f5
  4025d0:	00401909 	.word	0x00401909
  4025d4:	00408840 	.word	0x00408840
  4025d8:	00402549 	.word	0x00402549
  4025dc:	00400d75 	.word	0x00400d75
  4025e0:	20400b58 	.word	0x20400b58

004025e4 <xTimerCreateTimerTask>:
{
  4025e4:	b510      	push	{r4, lr}
	prvCheckForValidListAndQueue();
  4025e6:	4b10      	ldr	r3, [pc, #64]	; (402628 <xTimerCreateTimerTask+0x44>)
{
  4025e8:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  4025ea:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4025ec:	4b0f      	ldr	r3, [pc, #60]	; (40262c <xTimerCreateTimerTask+0x48>)
  4025ee:	681b      	ldr	r3, [r3, #0]
  4025f0:	b17b      	cbz	r3, 402612 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4025f2:	2000      	movs	r0, #0
  4025f4:	2404      	movs	r4, #4
  4025f6:	f44f 7282 	mov.w	r2, #260	; 0x104
  4025fa:	490d      	ldr	r1, [pc, #52]	; (402630 <xTimerCreateTimerTask+0x4c>)
  4025fc:	9003      	str	r0, [sp, #12]
  4025fe:	4603      	mov	r3, r0
  402600:	9002      	str	r0, [sp, #8]
  402602:	9001      	str	r0, [sp, #4]
  402604:	9400      	str	r4, [sp, #0]
  402606:	480b      	ldr	r0, [pc, #44]	; (402634 <xTimerCreateTimerTask+0x50>)
  402608:	4c0b      	ldr	r4, [pc, #44]	; (402638 <xTimerCreateTimerTask+0x54>)
  40260a:	47a0      	blx	r4
	configASSERT( xReturn );
  40260c:	b108      	cbz	r0, 402612 <xTimerCreateTimerTask+0x2e>
}
  40260e:	b004      	add	sp, #16
  402610:	bd10      	pop	{r4, pc}
  402612:	f04f 0380 	mov.w	r3, #128	; 0x80
  402616:	b672      	cpsid	i
  402618:	f383 8811 	msr	BASEPRI, r3
  40261c:	f3bf 8f6f 	isb	sy
  402620:	f3bf 8f4f 	dsb	sy
  402624:	b662      	cpsie	i
  402626:	e7fe      	b.n	402626 <xTimerCreateTimerTask+0x42>
  402628:	00402561 	.word	0x00402561
  40262c:	20400b88 	.word	0x20400b88
  402630:	00408848 	.word	0x00408848
  402634:	0040273d 	.word	0x0040273d
  402638:	00401c19 	.word	0x00401c19

0040263c <xTimerGenericCommand>:
{
  40263c:	b530      	push	{r4, r5, lr}
  40263e:	b085      	sub	sp, #20
	configASSERT( xTimer );
  402640:	b310      	cbz	r0, 402688 <xTimerGenericCommand+0x4c>
	if( xTimerQueue != NULL )
  402642:	4c12      	ldr	r4, [pc, #72]	; (40268c <xTimerGenericCommand+0x50>)
  402644:	4605      	mov	r5, r0
  402646:	6820      	ldr	r0, [r4, #0]
  402648:	b168      	cbz	r0, 402666 <xTimerGenericCommand+0x2a>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40264a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40264c:	e88d 0026 	stmia.w	sp, {r1, r2, r5}
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402650:	dc0b      	bgt.n	40266a <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402652:	4b0f      	ldr	r3, [pc, #60]	; (402690 <xTimerGenericCommand+0x54>)
  402654:	4798      	blx	r3
  402656:	2802      	cmp	r0, #2
  402658:	d00e      	beq.n	402678 <xTimerGenericCommand+0x3c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40265a:	2300      	movs	r3, #0
  40265c:	6820      	ldr	r0, [r4, #0]
  40265e:	4669      	mov	r1, sp
  402660:	4c0c      	ldr	r4, [pc, #48]	; (402694 <xTimerGenericCommand+0x58>)
  402662:	461a      	mov	r2, r3
  402664:	47a0      	blx	r4
}
  402666:	b005      	add	sp, #20
  402668:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40266a:	461a      	mov	r2, r3
  40266c:	4669      	mov	r1, sp
  40266e:	2300      	movs	r3, #0
  402670:	4c09      	ldr	r4, [pc, #36]	; (402698 <xTimerGenericCommand+0x5c>)
  402672:	47a0      	blx	r4
}
  402674:	b005      	add	sp, #20
  402676:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402678:	6820      	ldr	r0, [r4, #0]
  40267a:	2300      	movs	r3, #0
  40267c:	9a08      	ldr	r2, [sp, #32]
  40267e:	4669      	mov	r1, sp
  402680:	4c04      	ldr	r4, [pc, #16]	; (402694 <xTimerGenericCommand+0x58>)
  402682:	47a0      	blx	r4
}
  402684:	b005      	add	sp, #20
  402686:	bd30      	pop	{r4, r5, pc}
  402688:	4b04      	ldr	r3, [pc, #16]	; (40269c <xTimerGenericCommand+0x60>)
  40268a:	4798      	blx	r3
  40268c:	20400b88 	.word	0x20400b88
  402690:	00402365 	.word	0x00402365
  402694:	00401461 	.word	0x00401461
  402698:	00401641 	.word	0x00401641
  40269c:	00402549 	.word	0x00402549

004026a0 <prvSwitchTimerLists>:
{
  4026a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026a4:	4e20      	ldr	r6, [pc, #128]	; (402728 <prvSwitchTimerLists+0x88>)
  4026a6:	b082      	sub	sp, #8
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026a8:	4f20      	ldr	r7, [pc, #128]	; (40272c <prvSwitchTimerLists+0x8c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026aa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402734 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4026ae:	e00c      	b.n	4026ca <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026b0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026b2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026b4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026b8:	1d25      	adds	r5, r4, #4
  4026ba:	4628      	mov	r0, r5
  4026bc:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4026be:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4026c0:	4620      	mov	r0, r4
  4026c2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4026c4:	69e3      	ldr	r3, [r4, #28]
  4026c6:	2b01      	cmp	r3, #1
  4026c8:	d00a      	beq.n	4026e0 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4026ca:	6833      	ldr	r3, [r6, #0]
  4026cc:	681a      	ldr	r2, [r3, #0]
  4026ce:	2a00      	cmp	r2, #0
  4026d0:	d1ee      	bne.n	4026b0 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
  4026d2:	4a17      	ldr	r2, [pc, #92]	; (402730 <prvSwitchTimerLists+0x90>)
  4026d4:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
  4026d6:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
  4026d8:	6031      	str	r1, [r6, #0]
}
  4026da:	b002      	add	sp, #8
  4026dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4026e0:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026e2:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026e4:	f04f 0e00 	mov.w	lr, #0
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026e8:	f8df a04c 	ldr.w	sl, [pc, #76]	; 402738 <prvSwitchTimerLists+0x98>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4026ec:	eb09 0503 	add.w	r5, r9, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026f0:	464a      	mov	r2, r9
  4026f2:	4673      	mov	r3, lr
  4026f4:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
  4026f6:	45a9      	cmp	r9, r5
  4026f8:	d204      	bcs.n	402704 <prvSwitchTimerLists+0x64>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4026fa:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4026fc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026fe:	6830      	ldr	r0, [r6, #0]
  402700:	47d0      	blx	sl
  402702:	e7e2      	b.n	4026ca <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402704:	f8cd e000 	str.w	lr, [sp]
  402708:	4671      	mov	r1, lr
  40270a:	47c0      	blx	r8
				configASSERT( xResult );
  40270c:	2800      	cmp	r0, #0
  40270e:	d1dc      	bne.n	4026ca <prvSwitchTimerLists+0x2a>
  402710:	f04f 0380 	mov.w	r3, #128	; 0x80
  402714:	b672      	cpsid	i
  402716:	f383 8811 	msr	BASEPRI, r3
  40271a:	f3bf 8f6f 	isb	sy
  40271e:	f3bf 8f4f 	dsb	sy
  402722:	b662      	cpsie	i
  402724:	e7fe      	b.n	402724 <prvSwitchTimerLists+0x84>
  402726:	bf00      	nop
  402728:	20400b54 	.word	0x20400b54
  40272c:	00400de1 	.word	0x00400de1
  402730:	20400b58 	.word	0x20400b58
  402734:	0040263d 	.word	0x0040263d
  402738:	00400dad 	.word	0x00400dad

0040273c <prvTimerTask>:
{
  40273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402740:	f8df 9204 	ldr.w	r9, [pc, #516]	; 402948 <prvTimerTask+0x20c>
  402744:	b089      	sub	sp, #36	; 0x24
  402746:	f8df a204 	ldr.w	sl, [pc, #516]	; 40294c <prvTimerTask+0x210>
  40274a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 402950 <prvTimerTask+0x214>
  40274e:	4d72      	ldr	r5, [pc, #456]	; (402918 <prvTimerTask+0x1dc>)
  402750:	4e72      	ldr	r6, [pc, #456]	; (40291c <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402752:	f8d9 3000 	ldr.w	r3, [r9]
	if( *pxListWasEmpty == pdFALSE )
  402756:	681c      	ldr	r4, [r3, #0]
  402758:	2c00      	cmp	r4, #0
  40275a:	d04e      	beq.n	4027fa <prvTimerTask+0xbe>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40275c:	68db      	ldr	r3, [r3, #12]
  40275e:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
  402760:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  402762:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  402764:	4a6e      	ldr	r2, [pc, #440]	; (402920 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  402766:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  402768:	6812      	ldr	r2, [r2, #0]
  40276a:	4290      	cmp	r0, r2
  40276c:	d356      	bcc.n	40281c <prvTimerTask+0xe0>
	xLastTime = xTimeNow;
  40276e:	4a6c      	ldr	r2, [pc, #432]	; (402920 <prvTimerTask+0x1e4>)
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402770:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
  402772:	6010      	str	r0, [r2, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402774:	d960      	bls.n	402838 <prvTimerTask+0xfc>
  402776:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402778:	1af9      	subs	r1, r7, r3
  40277a:	6828      	ldr	r0, [r5, #0]
  40277c:	4b69      	ldr	r3, [pc, #420]	; (402924 <prvTimerTask+0x1e8>)
  40277e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402780:	4b69      	ldr	r3, [pc, #420]	; (402928 <prvTimerTask+0x1ec>)
  402782:	4798      	blx	r3
  402784:	b938      	cbnz	r0, 402796 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
  402786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40278a:	4a68      	ldr	r2, [pc, #416]	; (40292c <prvTimerTask+0x1f0>)
  40278c:	6013      	str	r3, [r2, #0]
  40278e:	f3bf 8f4f 	dsb	sy
  402792:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402796:	2300      	movs	r3, #0
  402798:	a904      	add	r1, sp, #16
  40279a:	6828      	ldr	r0, [r5, #0]
  40279c:	461a      	mov	r2, r3
  40279e:	47b0      	blx	r6
  4027a0:	2800      	cmp	r0, #0
  4027a2:	d0d6      	beq.n	402752 <prvTimerTask+0x16>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4027a4:	9b04      	ldr	r3, [sp, #16]
  4027a6:	2b00      	cmp	r3, #0
  4027a8:	db1f      	blt.n	4027ea <prvTimerTask+0xae>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4027aa:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4027ac:	6963      	ldr	r3, [r4, #20]
  4027ae:	b113      	cbz	r3, 4027b6 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4027b0:	1d20      	adds	r0, r4, #4
  4027b2:	4b5f      	ldr	r3, [pc, #380]	; (402930 <prvTimerTask+0x1f4>)
  4027b4:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
  4027b6:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  4027b8:	4b59      	ldr	r3, [pc, #356]	; (402920 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  4027ba:	4602      	mov	r2, r0
	if( xTimeNow < xLastTime )
  4027bc:	681b      	ldr	r3, [r3, #0]
  4027be:	4298      	cmp	r0, r3
  4027c0:	d335      	bcc.n	40282e <prvTimerTask+0xf2>
  4027c2:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
  4027c4:	4956      	ldr	r1, [pc, #344]	; (402920 <prvTimerTask+0x1e4>)
  4027c6:	2b09      	cmp	r3, #9
  4027c8:	600a      	str	r2, [r1, #0]
  4027ca:	d8e4      	bhi.n	402796 <prvTimerTask+0x5a>
  4027cc:	2101      	movs	r1, #1
  4027ce:	fa01 f303 	lsl.w	r3, r1, r3
  4027d2:	f413 7b04 	ands.w	fp, r3, #528	; 0x210
  4027d6:	d163      	bne.n	4028a0 <prvTimerTask+0x164>
  4027d8:	f013 0fc7 	tst.w	r3, #199	; 0xc7
  4027dc:	d169      	bne.n	4028b2 <prvTimerTask+0x176>
  4027de:	069b      	lsls	r3, r3, #26
  4027e0:	d5d9      	bpl.n	402796 <prvTimerTask+0x5a>
					vPortFree( pxTimer );
  4027e2:	4620      	mov	r0, r4
  4027e4:	4b53      	ldr	r3, [pc, #332]	; (402934 <prvTimerTask+0x1f8>)
  4027e6:	4798      	blx	r3
  4027e8:	e7d5      	b.n	402796 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4027ea:	9b05      	ldr	r3, [sp, #20]
  4027ec:	9907      	ldr	r1, [sp, #28]
  4027ee:	9806      	ldr	r0, [sp, #24]
  4027f0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4027f2:	9b04      	ldr	r3, [sp, #16]
  4027f4:	2b00      	cmp	r3, #0
  4027f6:	dbce      	blt.n	402796 <prvTimerTask+0x5a>
  4027f8:	e7d7      	b.n	4027aa <prvTimerTask+0x6e>
	vTaskSuspendAll();
  4027fa:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  4027fc:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  4027fe:	4a48      	ldr	r2, [pc, #288]	; (402920 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  402800:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  402802:	6812      	ldr	r2, [r2, #0]
  402804:	4282      	cmp	r2, r0
  402806:	d809      	bhi.n	40281c <prvTimerTask+0xe0>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402808:	4a4b      	ldr	r2, [pc, #300]	; (402938 <prvTimerTask+0x1fc>)
  40280a:	4627      	mov	r7, r4
	xLastTime = xTimeNow;
  40280c:	4944      	ldr	r1, [pc, #272]	; (402920 <prvTimerTask+0x1e4>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40280e:	6812      	ldr	r2, [r2, #0]
	xLastTime = xTimeNow;
  402810:	600b      	str	r3, [r1, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402812:	6812      	ldr	r2, [r2, #0]
  402814:	fab2 f282 	clz	r2, r2
  402818:	0952      	lsrs	r2, r2, #5
  40281a:	e7ad      	b.n	402778 <prvTimerTask+0x3c>
  40281c:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
  40281e:	4b47      	ldr	r3, [pc, #284]	; (40293c <prvTimerTask+0x200>)
  402820:	4798      	blx	r3
	xLastTime = xTimeNow;
  402822:	9b03      	ldr	r3, [sp, #12]
  402824:	4a3e      	ldr	r2, [pc, #248]	; (402920 <prvTimerTask+0x1e4>)
  402826:	6013      	str	r3, [r2, #0]
			( void ) xTaskResumeAll();
  402828:	4b3f      	ldr	r3, [pc, #252]	; (402928 <prvTimerTask+0x1ec>)
  40282a:	4798      	blx	r3
  40282c:	e7b3      	b.n	402796 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
  40282e:	4b43      	ldr	r3, [pc, #268]	; (40293c <prvTimerTask+0x200>)
  402830:	9003      	str	r0, [sp, #12]
  402832:	4798      	blx	r3
  402834:	9a03      	ldr	r2, [sp, #12]
  402836:	e7c4      	b.n	4027c2 <prvTimerTask+0x86>
  402838:	9303      	str	r3, [sp, #12]
				( void ) xTaskResumeAll();
  40283a:	4b3b      	ldr	r3, [pc, #236]	; (402928 <prvTimerTask+0x1ec>)
  40283c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40283e:	f8d9 2000 	ldr.w	r2, [r9]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402842:	4b3b      	ldr	r3, [pc, #236]	; (402930 <prvTimerTask+0x1f4>)
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402844:	68d2      	ldr	r2, [r2, #12]
  402846:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40284a:	f10b 0004 	add.w	r0, fp, #4
  40284e:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402850:	f8db 201c 	ldr.w	r2, [fp, #28]
  402854:	9b03      	ldr	r3, [sp, #12]
  402856:	2a01      	cmp	r2, #1
  402858:	d004      	beq.n	402864 <prvTimerTask+0x128>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40285a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  40285e:	4658      	mov	r0, fp
  402860:	4798      	blx	r3
  402862:	e798      	b.n	402796 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402864:	f8db 1018 	ldr.w	r1, [fp, #24]
  402868:	461a      	mov	r2, r3
  40286a:	4658      	mov	r0, fp
  40286c:	463b      	mov	r3, r7
  40286e:	4439      	add	r1, r7
  402870:	4c33      	ldr	r4, [pc, #204]	; (402940 <prvTimerTask+0x204>)
  402872:	47a0      	blx	r4
  402874:	2801      	cmp	r0, #1
  402876:	d1f0      	bne.n	40285a <prvTimerTask+0x11e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402878:	2300      	movs	r3, #0
  40287a:	463a      	mov	r2, r7
  40287c:	4658      	mov	r0, fp
  40287e:	4c31      	ldr	r4, [pc, #196]	; (402944 <prvTimerTask+0x208>)
  402880:	9300      	str	r3, [sp, #0]
  402882:	4619      	mov	r1, r3
  402884:	47a0      	blx	r4
			configASSERT( xResult );
  402886:	2800      	cmp	r0, #0
  402888:	d1e7      	bne.n	40285a <prvTimerTask+0x11e>
  40288a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40288e:	b672      	cpsid	i
  402890:	f383 8811 	msr	BASEPRI, r3
  402894:	f3bf 8f6f 	isb	sy
  402898:	f3bf 8f4f 	dsb	sy
  40289c:	b662      	cpsie	i
  40289e:	e7fe      	b.n	40289e <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4028a0:	9905      	ldr	r1, [sp, #20]
  4028a2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4028a4:	b369      	cbz	r1, 402902 <prvTimerTask+0x1c6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4028a6:	4411      	add	r1, r2
  4028a8:	4620      	mov	r0, r4
  4028aa:	4613      	mov	r3, r2
  4028ac:	4c24      	ldr	r4, [pc, #144]	; (402940 <prvTimerTask+0x204>)
  4028ae:	47a0      	blx	r4
  4028b0:	e771      	b.n	402796 <prvTimerTask+0x5a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4028b2:	9b05      	ldr	r3, [sp, #20]
  4028b4:	4620      	mov	r0, r4
  4028b6:	69a1      	ldr	r1, [r4, #24]
  4028b8:	4f21      	ldr	r7, [pc, #132]	; (402940 <prvTimerTask+0x204>)
  4028ba:	4419      	add	r1, r3
  4028bc:	47b8      	blx	r7
  4028be:	2801      	cmp	r0, #1
  4028c0:	f47f af69 	bne.w	402796 <prvTimerTask+0x5a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4028c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4028c6:	4620      	mov	r0, r4
  4028c8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4028ca:	69e3      	ldr	r3, [r4, #28]
  4028cc:	2b01      	cmp	r3, #1
  4028ce:	f47f af62 	bne.w	402796 <prvTimerTask+0x5a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4028d2:	9a05      	ldr	r2, [sp, #20]
  4028d4:	4620      	mov	r0, r4
  4028d6:	69a4      	ldr	r4, [r4, #24]
  4028d8:	465b      	mov	r3, fp
  4028da:	f8cd b000 	str.w	fp, [sp]
  4028de:	4659      	mov	r1, fp
  4028e0:	4422      	add	r2, r4
  4028e2:	4c18      	ldr	r4, [pc, #96]	; (402944 <prvTimerTask+0x208>)
  4028e4:	47a0      	blx	r4
							configASSERT( xResult );
  4028e6:	2800      	cmp	r0, #0
  4028e8:	f47f af55 	bne.w	402796 <prvTimerTask+0x5a>
  4028ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028f0:	b672      	cpsid	i
  4028f2:	f383 8811 	msr	BASEPRI, r3
  4028f6:	f3bf 8f6f 	isb	sy
  4028fa:	f3bf 8f4f 	dsb	sy
  4028fe:	b662      	cpsie	i
  402900:	e7fe      	b.n	402900 <prvTimerTask+0x1c4>
  402902:	f04f 0380 	mov.w	r3, #128	; 0x80
  402906:	b672      	cpsid	i
  402908:	f383 8811 	msr	BASEPRI, r3
  40290c:	f3bf 8f6f 	isb	sy
  402910:	f3bf 8f4f 	dsb	sy
  402914:	b662      	cpsie	i
  402916:	e7fe      	b.n	402916 <prvTimerTask+0x1da>
  402918:	20400b88 	.word	0x20400b88
  40291c:	00401741 	.word	0x00401741
  402920:	20400b84 	.word	0x20400b84
  402924:	00401931 	.word	0x00401931
  402928:	00401e85 	.word	0x00401e85
  40292c:	e000ed04 	.word	0xe000ed04
  402930:	00400de1 	.word	0x00400de1
  402934:	00401149 	.word	0x00401149
  402938:	20400b58 	.word	0x20400b58
  40293c:	004026a1 	.word	0x004026a1
  402940:	0040250d 	.word	0x0040250d
  402944:	0040263d 	.word	0x0040263d
  402948:	20400b54 	.word	0x20400b54
  40294c:	00401cf5 	.word	0x00401cf5
  402950:	00401d05 	.word	0x00401d05

00402954 <task_adc>:
		}
	
  }
}

static void task_adc(void *pvParameters) {
  402954:	b580      	push	{r7, lr}
  402956:	4d0e      	ldr	r5, [pc, #56]	; (402990 <task_adc+0x3c>)
  402958:	b082      	sub	sp, #8
  40295a:	4c0e      	ldr	r4, [pc, #56]	; (402994 <task_adc+0x40>)
  40295c:	f8df a040 	ldr.w	sl, [pc, #64]	; 4029a0 <task_adc+0x4c>
  402960:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4029a4 <task_adc+0x50>
  402964:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4029a8 <task_adc+0x54>

  while (1) {
    if (xQueueReceive(xQueueADC, &(adc), 1000)) {
      printf("ADC: %f \n", adc);
    } else {
      printf("Nao chegou um novo dado em 1 segundo \n");
  402968:	4f0b      	ldr	r7, [pc, #44]	; (402998 <task_adc+0x44>)
      printf("ADC: %f \n", adc);
  40296a:	4e0c      	ldr	r6, [pc, #48]	; (40299c <task_adc+0x48>)
    if (xQueueReceive(xQueueADC, &(adc), 1000)) {
  40296c:	2300      	movs	r3, #0
  40296e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402972:	a901      	add	r1, sp, #4
  402974:	6828      	ldr	r0, [r5, #0]
  402976:	47a0      	blx	r4
  402978:	b130      	cbz	r0, 402988 <task_adc+0x34>
      printf("ADC: %f \n", adc);
  40297a:	9801      	ldr	r0, [sp, #4]
  40297c:	47d0      	blx	sl
  40297e:	4602      	mov	r2, r0
  402980:	460b      	mov	r3, r1
  402982:	4630      	mov	r0, r6
  402984:	47c8      	blx	r9
  402986:	e7f1      	b.n	40296c <task_adc+0x18>
      printf("Nao chegou um novo dado em 1 segundo \n");
  402988:	4638      	mov	r0, r7
  40298a:	47c0      	blx	r8
  40298c:	e7ee      	b.n	40296c <task_adc+0x18>
  40298e:	bf00      	nop
  402990:	20400c98 	.word	0x20400c98
  402994:	00401741 	.word	0x00401741
  402998:	004088ac 	.word	0x004088ac
  40299c:	004088a0 	.word	0x004088a0
  4029a0:	00403215 	.word	0x00403215
  4029a4:	00403f39 	.word	0x00403f39
  4029a8:	00403ffd 	.word	0x00403ffd

004029ac <AFEC_pot_Callback>:
static void AFEC_pot_Callback(void) {
  4029ac:	b530      	push	{r4, r5, lr}
  4029ae:	b083      	sub	sp, #12
	afec->AFEC_CSELR = afec_ch;
  4029b0:	4907      	ldr	r1, [pc, #28]	; (4029d0 <AFEC_pot_Callback+0x24>)
  4029b2:	2300      	movs	r3, #0
  BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  4029b4:	2401      	movs	r4, #1
  4029b6:	aa02      	add	r2, sp, #8
  xQueueSendFromISR(xQueueADCProc, &adc, &xHigherPriorityTaskWoken);
  4029b8:	4806      	ldr	r0, [pc, #24]	; (4029d4 <AFEC_pot_Callback+0x28>)
  4029ba:	664b      	str	r3, [r1, #100]	; 0x64
	return afec->AFEC_CDR;
  4029bc:	6e8d      	ldr	r5, [r1, #104]	; 0x68
  4029be:	4669      	mov	r1, sp
  BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  4029c0:	f842 4d04 	str.w	r4, [r2, #-4]!
  xQueueSendFromISR(xQueueADCProc, &adc, &xHigherPriorityTaskWoken);
  4029c4:	4c04      	ldr	r4, [pc, #16]	; (4029d8 <AFEC_pot_Callback+0x2c>)
  4029c6:	6800      	ldr	r0, [r0, #0]
  adc.value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  4029c8:	9500      	str	r5, [sp, #0]
  xQueueSendFromISR(xQueueADCProc, &adc, &xHigherPriorityTaskWoken);
  4029ca:	47a0      	blx	r4
}
  4029cc:	b003      	add	sp, #12
  4029ce:	bd30      	pop	{r4, r5, pc}
  4029d0:	4003c000 	.word	0x4003c000
  4029d4:	20400c94 	.word	0x20400c94
  4029d8:	00401641 	.word	0x00401641

004029dc <usart_serial_getchar>:
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4029dc:	4b2d      	ldr	r3, [pc, #180]	; (402a94 <usart_serial_getchar+0xb8>)
	uint32_t val = 0;
  4029de:	2200      	movs	r2, #0
{
  4029e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (UART0 == (Uart*)p_usart) {
  4029e2:	4298      	cmp	r0, r3
{
  4029e4:	b083      	sub	sp, #12
  4029e6:	4604      	mov	r4, r0
  4029e8:	460d      	mov	r5, r1
	uint32_t val = 0;
  4029ea:	9201      	str	r2, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  4029ec:	d03a      	beq.n	402a64 <usart_serial_getchar+0x88>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4029ee:	4b2a      	ldr	r3, [pc, #168]	; (402a98 <usart_serial_getchar+0xbc>)
  4029f0:	4298      	cmp	r0, r3
  4029f2:	d03f      	beq.n	402a74 <usart_serial_getchar+0x98>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4029f4:	4b29      	ldr	r3, [pc, #164]	; (402a9c <usart_serial_getchar+0xc0>)
  4029f6:	4298      	cmp	r0, r3
  4029f8:	d044      	beq.n	402a84 <usart_serial_getchar+0xa8>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4029fa:	4b29      	ldr	r3, [pc, #164]	; (402aa0 <usart_serial_getchar+0xc4>)
  4029fc:	4298      	cmp	r0, r3
  4029fe:	d015      	beq.n	402a2c <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402a00:	4b28      	ldr	r3, [pc, #160]	; (402aa4 <usart_serial_getchar+0xc8>)
  402a02:	4298      	cmp	r0, r3
  402a04:	d024      	beq.n	402a50 <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402a06:	4b28      	ldr	r3, [pc, #160]	; (402aa8 <usart_serial_getchar+0xcc>)
  402a08:	429c      	cmp	r4, r3
  402a0a:	d017      	beq.n	402a3c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402a0c:	4b27      	ldr	r3, [pc, #156]	; (402aac <usart_serial_getchar+0xd0>)
  402a0e:	429c      	cmp	r4, r3
  402a10:	d001      	beq.n	402a16 <usart_serial_getchar+0x3a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402a12:	b003      	add	sp, #12
  402a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a16:	af01      	add	r7, sp, #4
  402a18:	4e25      	ldr	r6, [pc, #148]	; (402ab0 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402a1a:	4639      	mov	r1, r7
  402a1c:	4620      	mov	r0, r4
  402a1e:	47b0      	blx	r6
  402a20:	2800      	cmp	r0, #0
  402a22:	d1fa      	bne.n	402a1a <usart_serial_getchar+0x3e>
		*data = (uint8_t)(val & 0xFF);
  402a24:	9b01      	ldr	r3, [sp, #4]
  402a26:	702b      	strb	r3, [r5, #0]
}
  402a28:	b003      	add	sp, #12
  402a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a2c:	4e21      	ldr	r6, [pc, #132]	; (402ab4 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a2e:	4629      	mov	r1, r5
  402a30:	4620      	mov	r0, r4
  402a32:	47b0      	blx	r6
  402a34:	2800      	cmp	r0, #0
  402a36:	d1fa      	bne.n	402a2e <usart_serial_getchar+0x52>
}
  402a38:	b003      	add	sp, #12
  402a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a3c:	af01      	add	r7, sp, #4
  402a3e:	4e1c      	ldr	r6, [pc, #112]	; (402ab0 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402a40:	4639      	mov	r1, r7
  402a42:	4620      	mov	r0, r4
  402a44:	47b0      	blx	r6
  402a46:	2800      	cmp	r0, #0
  402a48:	d1fa      	bne.n	402a40 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  402a4a:	9b01      	ldr	r3, [sp, #4]
  402a4c:	702b      	strb	r3, [r5, #0]
  402a4e:	e7eb      	b.n	402a28 <usart_serial_getchar+0x4c>
  402a50:	af01      	add	r7, sp, #4
  402a52:	4e17      	ldr	r6, [pc, #92]	; (402ab0 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402a54:	4639      	mov	r1, r7
  402a56:	4620      	mov	r0, r4
  402a58:	47b0      	blx	r6
  402a5a:	2800      	cmp	r0, #0
  402a5c:	d1fa      	bne.n	402a54 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402a5e:	9b01      	ldr	r3, [sp, #4]
  402a60:	702b      	strb	r3, [r5, #0]
  402a62:	e7e1      	b.n	402a28 <usart_serial_getchar+0x4c>
  402a64:	4e13      	ldr	r6, [pc, #76]	; (402ab4 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a66:	4607      	mov	r7, r0
  402a68:	4629      	mov	r1, r5
  402a6a:	4638      	mov	r0, r7
  402a6c:	47b0      	blx	r6
  402a6e:	2800      	cmp	r0, #0
  402a70:	d1fa      	bne.n	402a68 <usart_serial_getchar+0x8c>
  402a72:	e7c8      	b.n	402a06 <usart_serial_getchar+0x2a>
  402a74:	4e0f      	ldr	r6, [pc, #60]	; (402ab4 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a76:	4607      	mov	r7, r0
  402a78:	4629      	mov	r1, r5
  402a7a:	4638      	mov	r0, r7
  402a7c:	47b0      	blx	r6
  402a7e:	2800      	cmp	r0, #0
  402a80:	d1fa      	bne.n	402a78 <usart_serial_getchar+0x9c>
  402a82:	e7c0      	b.n	402a06 <usart_serial_getchar+0x2a>
  402a84:	4e0b      	ldr	r6, [pc, #44]	; (402ab4 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402a86:	4607      	mov	r7, r0
  402a88:	4629      	mov	r1, r5
  402a8a:	4638      	mov	r0, r7
  402a8c:	47b0      	blx	r6
  402a8e:	2800      	cmp	r0, #0
  402a90:	d1fa      	bne.n	402a88 <usart_serial_getchar+0xac>
  402a92:	e7bb      	b.n	402a0c <usart_serial_getchar+0x30>
  402a94:	400e0800 	.word	0x400e0800
  402a98:	400e0a00 	.word	0x400e0a00
  402a9c:	400e1a00 	.word	0x400e1a00
  402aa0:	400e1c00 	.word	0x400e1c00
  402aa4:	40024000 	.word	0x40024000
  402aa8:	40028000 	.word	0x40028000
  402aac:	4002c000 	.word	0x4002c000
  402ab0:	00400ac9 	.word	0x00400ac9
  402ab4:	004009c9 	.word	0x004009c9

00402ab8 <usart_serial_putchar>:
	if (UART0 == (Uart*)p_usart) {
  402ab8:	4b2a      	ldr	r3, [pc, #168]	; (402b64 <usart_serial_putchar+0xac>)
  402aba:	4298      	cmp	r0, r3
{
  402abc:	b570      	push	{r4, r5, r6, lr}
  402abe:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  402ac0:	d01c      	beq.n	402afc <usart_serial_putchar+0x44>
	if (UART1 == (Uart*)p_usart) {
  402ac2:	4b29      	ldr	r3, [pc, #164]	; (402b68 <usart_serial_putchar+0xb0>)
  402ac4:	4298      	cmp	r0, r3
  402ac6:	d022      	beq.n	402b0e <usart_serial_putchar+0x56>
	if (UART2 == (Uart*)p_usart) {
  402ac8:	4b28      	ldr	r3, [pc, #160]	; (402b6c <usart_serial_putchar+0xb4>)
  402aca:	4298      	cmp	r0, r3
  402acc:	d028      	beq.n	402b20 <usart_serial_putchar+0x68>
	if (UART3 == (Uart*)p_usart) {
  402ace:	4b28      	ldr	r3, [pc, #160]	; (402b70 <usart_serial_putchar+0xb8>)
  402ad0:	4298      	cmp	r0, r3
  402ad2:	d02e      	beq.n	402b32 <usart_serial_putchar+0x7a>
	if (USART0 == p_usart) {
  402ad4:	4b27      	ldr	r3, [pc, #156]	; (402b74 <usart_serial_putchar+0xbc>)
  402ad6:	4298      	cmp	r0, r3
  402ad8:	d007      	beq.n	402aea <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
  402ada:	4b27      	ldr	r3, [pc, #156]	; (402b78 <usart_serial_putchar+0xc0>)
  402adc:	4298      	cmp	r0, r3
  402ade:	d038      	beq.n	402b52 <usart_serial_putchar+0x9a>
	if (USART2 == p_usart) {
  402ae0:	4b26      	ldr	r3, [pc, #152]	; (402b7c <usart_serial_putchar+0xc4>)
  402ae2:	4298      	cmp	r0, r3
  402ae4:	d02d      	beq.n	402b42 <usart_serial_putchar+0x8a>
	return 0;
  402ae6:	2000      	movs	r0, #0
}
  402ae8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402aea:	4604      	mov	r4, r0
  402aec:	4e24      	ldr	r6, [pc, #144]	; (402b80 <usart_serial_putchar+0xc8>)
  402aee:	4629      	mov	r1, r5
  402af0:	4620      	mov	r0, r4
  402af2:	47b0      	blx	r6
  402af4:	2800      	cmp	r0, #0
  402af6:	d1fa      	bne.n	402aee <usart_serial_putchar+0x36>
		return 1;
  402af8:	2001      	movs	r0, #1
  402afa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402afc:	4604      	mov	r4, r0
  402afe:	4e21      	ldr	r6, [pc, #132]	; (402b84 <usart_serial_putchar+0xcc>)
  402b00:	4629      	mov	r1, r5
  402b02:	4620      	mov	r0, r4
  402b04:	47b0      	blx	r6
  402b06:	2800      	cmp	r0, #0
  402b08:	d1fa      	bne.n	402b00 <usart_serial_putchar+0x48>
		return 1;
  402b0a:	2001      	movs	r0, #1
  402b0c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402b0e:	4604      	mov	r4, r0
  402b10:	4e1c      	ldr	r6, [pc, #112]	; (402b84 <usart_serial_putchar+0xcc>)
  402b12:	4629      	mov	r1, r5
  402b14:	4620      	mov	r0, r4
  402b16:	47b0      	blx	r6
  402b18:	2800      	cmp	r0, #0
  402b1a:	d1fa      	bne.n	402b12 <usart_serial_putchar+0x5a>
		return 1;
  402b1c:	2001      	movs	r0, #1
  402b1e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402b20:	4604      	mov	r4, r0
  402b22:	4e18      	ldr	r6, [pc, #96]	; (402b84 <usart_serial_putchar+0xcc>)
  402b24:	4629      	mov	r1, r5
  402b26:	4620      	mov	r0, r4
  402b28:	47b0      	blx	r6
  402b2a:	2800      	cmp	r0, #0
  402b2c:	d1fa      	bne.n	402b24 <usart_serial_putchar+0x6c>
		return 1;
  402b2e:	2001      	movs	r0, #1
  402b30:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402b32:	4604      	mov	r4, r0
  402b34:	4e13      	ldr	r6, [pc, #76]	; (402b84 <usart_serial_putchar+0xcc>)
  402b36:	4629      	mov	r1, r5
  402b38:	4620      	mov	r0, r4
  402b3a:	47b0      	blx	r6
  402b3c:	2800      	cmp	r0, #0
  402b3e:	d1fa      	bne.n	402b36 <usart_serial_putchar+0x7e>
  402b40:	e7da      	b.n	402af8 <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402b42:	4604      	mov	r4, r0
  402b44:	4e0e      	ldr	r6, [pc, #56]	; (402b80 <usart_serial_putchar+0xc8>)
  402b46:	4629      	mov	r1, r5
  402b48:	4620      	mov	r0, r4
  402b4a:	47b0      	blx	r6
  402b4c:	2800      	cmp	r0, #0
  402b4e:	d1fa      	bne.n	402b46 <usart_serial_putchar+0x8e>
  402b50:	e7d2      	b.n	402af8 <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402b52:	4604      	mov	r4, r0
  402b54:	4e0a      	ldr	r6, [pc, #40]	; (402b80 <usart_serial_putchar+0xc8>)
  402b56:	4629      	mov	r1, r5
  402b58:	4620      	mov	r0, r4
  402b5a:	47b0      	blx	r6
  402b5c:	2800      	cmp	r0, #0
  402b5e:	d1fa      	bne.n	402b56 <usart_serial_putchar+0x9e>
  402b60:	e7ca      	b.n	402af8 <usart_serial_putchar+0x40>
  402b62:	bf00      	nop
  402b64:	400e0800 	.word	0x400e0800
  402b68:	400e0a00 	.word	0x400e0a00
  402b6c:	400e1a00 	.word	0x400e1a00
  402b70:	400e1c00 	.word	0x400e1c00
  402b74:	40024000 	.word	0x40024000
  402b78:	40028000 	.word	0x40028000
  402b7c:	4002c000 	.word	0x4002c000
  402b80:	00400ab1 	.word	0x00400ab1
  402b84:	004009b9 	.word	0x004009b9

00402b88 <vApplicationStackOverflowHook>:
                                          signed char *pcTaskName) {
  402b88:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402b8a:	460a      	mov	r2, r1
  402b8c:	4b02      	ldr	r3, [pc, #8]	; (402b98 <vApplicationStackOverflowHook+0x10>)
  402b8e:	4601      	mov	r1, r0
  402b90:	4802      	ldr	r0, [pc, #8]	; (402b9c <vApplicationStackOverflowHook+0x14>)
  402b92:	4798      	blx	r3
  402b94:	e7fe      	b.n	402b94 <vApplicationStackOverflowHook+0xc>
  402b96:	bf00      	nop
  402b98:	00403f39 	.word	0x00403f39
  402b9c:	004088d4 	.word	0x004088d4

00402ba0 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  402ba0:	4770      	bx	lr
  402ba2:	bf00      	nop

00402ba4 <vApplicationMallocFailedHook>:
  402ba4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ba8:	b672      	cpsid	i
  402baa:	f383 8811 	msr	BASEPRI, r3
  402bae:	f3bf 8f6f 	isb	sy
  402bb2:	f3bf 8f4f 	dsb	sy
  402bb6:	b662      	cpsie	i
  402bb8:	e7fe      	b.n	402bb8 <vApplicationMallocFailedHook+0x14>
  402bba:	bf00      	nop

00402bbc <TC1_Handler>:
void TC1_Handler(void) {
  402bbc:	b500      	push	{lr}
  402bbe:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, 1);
  402bc0:	2101      	movs	r1, #1
  402bc2:	4b06      	ldr	r3, [pc, #24]	; (402bdc <TC1_Handler+0x20>)
  402bc4:	4806      	ldr	r0, [pc, #24]	; (402be0 <TC1_Handler+0x24>)
  402bc6:	4798      	blx	r3
  402bc8:	9001      	str	r0, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402bca:	4b06      	ldr	r3, [pc, #24]	; (402be4 <TC1_Handler+0x28>)
  402bcc:	2101      	movs	r1, #1
  UNUSED(ul_dummy);
  402bce:	9801      	ldr	r0, [sp, #4]
	afec->AFEC_CR = AFEC_CR_START;
  402bd0:	2202      	movs	r2, #2
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402bd2:	6159      	str	r1, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402bd4:	601a      	str	r2, [r3, #0]
}
  402bd6:	b003      	add	sp, #12
  402bd8:	f85d fb04 	ldr.w	pc, [sp], #4
  402bdc:	0040094d 	.word	0x0040094d
  402be0:	4000c000 	.word	0x4000c000
  402be4:	4003c000 	.word	0x4003c000

00402be8 <TC_init>:
  afec_set_callback(afec, afec_channel, callback, 1);
  NVIC_SetPriority(afec_id, 4);
  NVIC_EnableIRQ(afec_id);
}

void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq) {
  402be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402bec:	4698      	mov	r8, r3
  402bee:	b085      	sub	sp, #20
  uint32_t ul_tcclks;
  uint32_t ul_sysclk = sysclk_get_cpu_hz();

  pmc_enable_periph_clk(ID_TC);

  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402bf0:	4d20      	ldr	r5, [pc, #128]	; (402c74 <TC_init+0x8c>)
void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq) {
  402bf2:	4606      	mov	r6, r0
  pmc_enable_periph_clk(ID_TC);
  402bf4:	4b20      	ldr	r3, [pc, #128]	; (402c78 <TC_init+0x90>)
  402bf6:	4608      	mov	r0, r1
void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq) {
  402bf8:	4617      	mov	r7, r2
  402bfa:	460c      	mov	r4, r1
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402bfc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 402c90 <TC_init+0xa8>
  pmc_enable_periph_clk(ID_TC);
  402c00:	4798      	blx	r3
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402c02:	4629      	mov	r1, r5
  402c04:	ab03      	add	r3, sp, #12
  402c06:	aa02      	add	r2, sp, #8
  402c08:	4640      	mov	r0, r8
  402c0a:	9500      	str	r5, [sp, #0]
  402c0c:	47c8      	blx	r9
  tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  402c0e:	9a03      	ldr	r2, [sp, #12]
  402c10:	4639      	mov	r1, r7
  402c12:	4630      	mov	r0, r6
  402c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402c18:	4b18      	ldr	r3, [pc, #96]	; (402c7c <TC_init+0x94>)
  402c1a:	4798      	blx	r3
  tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  402c1c:	9a02      	ldr	r2, [sp, #8]
  402c1e:	4b18      	ldr	r3, [pc, #96]	; (402c80 <TC_init+0x98>)
  402c20:	4639      	mov	r1, r7
  402c22:	4630      	mov	r0, r6
  402c24:	fbb5 f2f2 	udiv	r2, r5, r2
  402c28:	fbb2 f2f8 	udiv	r2, r2, r8
  402c2c:	4798      	blx	r3

  NVIC_SetPriority((IRQn_Type)ID_TC, 4);
  402c2e:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  402c30:	2b00      	cmp	r3, #0
  402c32:	db16      	blt.n	402c62 <TC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402c34:	4a13      	ldr	r2, [pc, #76]	; (402c84 <TC_init+0x9c>)
  402c36:	2180      	movs	r1, #128	; 0x80
  402c38:	b2e4      	uxtb	r4, r4
  402c3a:	441a      	add	r2, r3
  402c3c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402c40:	2201      	movs	r2, #1
  402c42:	f004 041f 	and.w	r4, r4, #31
  402c46:	095b      	lsrs	r3, r3, #5
  402c48:	4d0e      	ldr	r5, [pc, #56]	; (402c84 <TC_init+0x9c>)
  402c4a:	fa02 f404 	lsl.w	r4, r2, r4
  NVIC_EnableIRQ((IRQn_Type)ID_TC);
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  402c4e:	4639      	mov	r1, r7
  402c50:	4630      	mov	r0, r6
  402c52:	2210      	movs	r2, #16
  402c54:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
  402c58:	4b0b      	ldr	r3, [pc, #44]	; (402c88 <TC_init+0xa0>)
  402c5a:	4798      	blx	r3
}
  402c5c:	b005      	add	sp, #20
  402c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402c62:	b2e4      	uxtb	r4, r4
  402c64:	4a09      	ldr	r2, [pc, #36]	; (402c8c <TC_init+0xa4>)
  402c66:	2180      	movs	r1, #128	; 0x80
  402c68:	f004 000f 	and.w	r0, r4, #15
  402c6c:	4402      	add	r2, r0
  402c6e:	7611      	strb	r1, [r2, #24]
  402c70:	e7e6      	b.n	402c40 <TC_init+0x58>
  402c72:	bf00      	nop
  402c74:	11e1a300 	.word	0x11e1a300
  402c78:	004008d5 	.word	0x004008d5
  402c7c:	0040091d 	.word	0x0040091d
  402c80:	0040093d 	.word	0x0040093d
  402c84:	e000e100 	.word	0xe000e100
  402c88:	00400945 	.word	0x00400945
  402c8c:	e000ecfc 	.word	0xe000ecfc
  402c90:	00400955 	.word	0x00400955

00402c94 <task_proc>:
static void task_proc(void *pvParameters){
  402c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  afec_enable(afec);
  402c98:	4f43      	ldr	r7, [pc, #268]	; (402da8 <task_proc+0x114>)
static void task_proc(void *pvParameters){
  402c9a:	b08d      	sub	sp, #52	; 0x34
  afec_enable(afec);
  402c9c:	4b43      	ldr	r3, [pc, #268]	; (402dac <task_proc+0x118>)
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402c9e:	f04f 0800 	mov.w	r8, #0
  afec_enable(afec);
  402ca2:	4638      	mov	r0, r7
  402ca4:	4e42      	ldr	r6, [pc, #264]	; (402db0 <task_proc+0x11c>)
  402ca6:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  402ca8:	a806      	add	r0, sp, #24
  402caa:	4b42      	ldr	r3, [pc, #264]	; (402db4 <task_proc+0x120>)
  402cac:	ac0b      	add	r4, sp, #44	; 0x2c
  402cae:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  402cb0:	a906      	add	r1, sp, #24
  402cb2:	4638      	mov	r0, r7
  402cb4:	4b40      	ldr	r3, [pc, #256]	; (402db8 <task_proc+0x124>)
	int i = 0;
  402cb6:	f8cd 8004 	str.w	r8, [sp, #4]
  afec_init(afec, &afec_cfg);
  402cba:	4798      	blx	r3
	reg = afec->AFEC_MR;
  402cbc:	687b      	ldr	r3, [r7, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  402cbe:	a803      	add	r0, sp, #12
  402cc0:	4a3e      	ldr	r2, [pc, #248]	; (402dbc <task_proc+0x128>)
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402cc2:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  402cc6:	4d3e      	ldr	r5, [pc, #248]	; (402dc0 <task_proc+0x12c>)
  402cc8:	f8df b124 	ldr.w	fp, [pc, #292]	; 402df0 <task_proc+0x15c>
	afec->AFEC_MR = reg;
  402ccc:	607b      	str	r3, [r7, #4]
  402cce:	4790      	blx	r2
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402cd0:	4641      	mov	r1, r8
  402cd2:	4638      	mov	r0, r7
  402cd4:	aa03      	add	r2, sp, #12
  402cd6:	4b3b      	ldr	r3, [pc, #236]	; (402dc4 <task_proc+0x130>)
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402cd8:	f88d 800d 	strb.w	r8, [sp, #13]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402cdc:	4798      	blx	r3
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402cde:	f44f 7200 	mov.w	r2, #512	; 0x200
	afec->AFEC_CSELR = afec_ch;
  402ce2:	f8c7 8064 	str.w	r8, [r7, #100]	; 0x64
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402ce6:	a804      	add	r0, sp, #16
  402ce8:	4b37      	ldr	r3, [pc, #220]	; (402dc8 <task_proc+0x134>)
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402cea:	66fa      	str	r2, [r7, #108]	; 0x6c
  402cec:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  402cee:	4638      	mov	r0, r7
  402cf0:	a904      	add	r1, sp, #16
  402cf2:	4b36      	ldr	r3, [pc, #216]	; (402dcc <task_proc+0x138>)
  402cf4:	4798      	blx	r3
  afec_set_callback(afec, afec_channel, callback, 1);
  402cf6:	4638      	mov	r0, r7
  402cf8:	4641      	mov	r1, r8
  402cfa:	2301      	movs	r3, #1
  402cfc:	4a34      	ldr	r2, [pc, #208]	; (402dd0 <task_proc+0x13c>)
  402cfe:	4f35      	ldr	r7, [pc, #212]	; (402dd4 <task_proc+0x140>)
  402d00:	47b8      	blx	r7
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402d02:	4835      	ldr	r0, [pc, #212]	; (402dd8 <task_proc+0x144>)
  402d04:	2180      	movs	r1, #128	; 0x80
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402d06:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
	TC_init(TC0, ID_TC1, 1, 10);
  402d0a:	230a      	movs	r3, #10
  402d0c:	2201      	movs	r2, #1
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402d0e:	f880 131d 	strb.w	r1, [r0, #797]	; 0x31d
  402d12:	2118      	movs	r1, #24
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402d14:	6007      	str	r7, [r0, #0]
  402d16:	4831      	ldr	r0, [pc, #196]	; (402ddc <task_proc+0x148>)
  402d18:	4f31      	ldr	r7, [pc, #196]	; (402de0 <task_proc+0x14c>)
  402d1a:	47b8      	blx	r7
	tc_start(TC0, 1);
  402d1c:	2101      	movs	r1, #1
  402d1e:	482f      	ldr	r0, [pc, #188]	; (402ddc <task_proc+0x148>)
  402d20:	4b30      	ldr	r3, [pc, #192]	; (402de4 <task_proc+0x150>)
  402d22:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 402df4 <task_proc+0x160>
  402d26:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 402df8 <task_proc+0x164>
  402d2a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 402dfc <task_proc+0x168>
  402d2e:	4798      	blx	r3
		if (xQueueReceive(xQueueADCProc, &(adc), 1000)) {
  402d30:	2300      	movs	r3, #0
  402d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402d36:	a903      	add	r1, sp, #12
  402d38:	6830      	ldr	r0, [r6, #0]
  402d3a:	47a8      	blx	r5
  402d3c:	b148      	cbz	r0, 402d52 <task_proc+0xbe>
			valores[i] = adc.value;
  402d3e:	9901      	ldr	r1, [sp, #4]
  402d40:	a80c      	add	r0, sp, #48	; 0x30
  402d42:	9a03      	ldr	r2, [sp, #12]
  402d44:	eb00 0381 	add.w	r3, r0, r1, lsl #2
  402d48:	f843 2c18 	str.w	r2, [r3, #-24]
  402d4c:	460b      	mov	r3, r1
  402d4e:	3301      	adds	r3, #1
  402d50:	9301      	str	r3, [sp, #4]
		} while (i >= 5){
  402d52:	9b01      	ldr	r3, [sp, #4]
  402d54:	2b04      	cmp	r3, #4
  402d56:	ddeb      	ble.n	402d30 <task_proc+0x9c>
  402d58:	ab06      	add	r3, sp, #24
	int i = 0;
  402d5a:	2000      	movs	r0, #0
				soma += valores[j];
  402d5c:	f853 2b04 	ldr.w	r2, [r3], #4
			for (int j = 0; j < 5; j++){
  402d60:	429c      	cmp	r4, r3
				soma += valores[j];
  402d62:	4410      	add	r0, r2
			for (int j = 0; j < 5; j++){
  402d64:	d1fa      	bne.n	402d5c <task_proc+0xc8>
			media = (soma/5.0);
  402d66:	47d8      	blx	fp
  402d68:	2200      	movs	r2, #0
  402d6a:	4b1f      	ldr	r3, [pc, #124]	; (402de8 <task_proc+0x154>)
  402d6c:	47d0      	blx	sl
			xQueueSend(xQueueADC, (void *)&media, 10);
  402d6e:	4f1f      	ldr	r7, [pc, #124]	; (402dec <task_proc+0x158>)
			media = (soma/5.0);
  402d70:	47c8      	blx	r9
			xQueueSend(xQueueADC, (void *)&media, 10);
  402d72:	2300      	movs	r3, #0
			media = (soma/5.0);
  402d74:	9004      	str	r0, [sp, #16]
			xQueueSend(xQueueADC, (void *)&media, 10);
  402d76:	220a      	movs	r2, #10
  402d78:	a904      	add	r1, sp, #16
  402d7a:	f8d8 0000 	ldr.w	r0, [r8]
  402d7e:	47b8      	blx	r7
				valores[j] = temp;
  402d80:	9808      	ldr	r0, [sp, #32]
  402d82:	9907      	ldr	r1, [sp, #28]
			if (xQueueReceive(xQueueADCProc, &(adc), 1000)){
  402d84:	2300      	movs	r3, #0
				valores[j] = temp;
  402d86:	9007      	str	r0, [sp, #28]
			if (xQueueReceive(xQueueADCProc, &(adc), 1000)){
  402d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
				valores[j] = temp;
  402d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
  402d8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  402d90:	9106      	str	r1, [sp, #24]
			if (xQueueReceive(xQueueADCProc, &(adc), 1000)){
  402d92:	a903      	add	r1, sp, #12
				valores[j] = temp;
  402d94:	9008      	str	r0, [sp, #32]
			if (xQueueReceive(xQueueADCProc, &(adc), 1000)){
  402d96:	6830      	ldr	r0, [r6, #0]
				valores[j] = temp;
  402d98:	9709      	str	r7, [sp, #36]	; 0x24
			if (xQueueReceive(xQueueADCProc, &(adc), 1000)){
  402d9a:	47a8      	blx	r5
  402d9c:	2800      	cmp	r0, #0
  402d9e:	d0db      	beq.n	402d58 <task_proc+0xc4>
				valores[4] = adc.value;
  402da0:	9b03      	ldr	r3, [sp, #12]
  402da2:	930a      	str	r3, [sp, #40]	; 0x28
  402da4:	e7d5      	b.n	402d52 <task_proc+0xbe>
  402da6:	bf00      	nop
  402da8:	4003c000 	.word	0x4003c000
  402dac:	004006c5 	.word	0x004006c5
  402db0:	20400c94 	.word	0x20400c94
  402db4:	004004f1 	.word	0x004004f1
  402db8:	0040054d 	.word	0x0040054d
  402dbc:	00400525 	.word	0x00400525
  402dc0:	00401741 	.word	0x00401741
  402dc4:	004004ad 	.word	0x004004ad
  402dc8:	00400531 	.word	0x00400531
  402dcc:	004004e1 	.word	0x004004e1
  402dd0:	004029ad 	.word	0x004029ad
  402dd4:	00400649 	.word	0x00400649
  402dd8:	e000e100 	.word	0xe000e100
  402ddc:	4000c000 	.word	0x4000c000
  402de0:	00402be9 	.word	0x00402be9
  402de4:	00400935 	.word	0x00400935
  402de8:	40140000 	.word	0x40140000
  402dec:	00401461 	.word	0x00401461
  402df0:	004031d1 	.word	0x004031d1
  402df4:	00403511 	.word	0x00403511
  402df8:	004036e1 	.word	0x004036e1
  402dfc:	20400c98 	.word	0x20400c98

00402e00 <main>:
/**
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void) {
  402e00:	b580      	push	{r7, lr}
  sysclk_init();
  402e02:	4b37      	ldr	r3, [pc, #220]	; (402ee0 <main+0xe0>)
int main(void) {
  402e04:	b08a      	sub	sp, #40	; 0x28
  sysclk_init();
  402e06:	4798      	blx	r3
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402e08:	4e36      	ldr	r6, [pc, #216]	; (402ee4 <main+0xe4>)
  board_init();
  402e0a:	4b37      	ldr	r3, [pc, #220]	; (402ee8 <main+0xe8>)
	usart_settings.stop_bits= opt->stopbits;
  402e0c:	2400      	movs	r4, #0
  402e0e:	4f37      	ldr	r7, [pc, #220]	; (402eec <main+0xec>)
  402e10:	4798      	blx	r3
	stdio_base = (void *)usart;
  402e12:	4d37      	ldr	r5, [pc, #220]	; (402ef0 <main+0xf0>)
	usart_settings.baudrate = opt->baudrate;
  402e14:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402e18:	4836      	ldr	r0, [pc, #216]	; (402ef4 <main+0xf4>)
	usart_settings.char_length = opt->charlength;
  402e1a:	21c0      	movs	r1, #192	; 0xc0
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402e1c:	6037      	str	r7, [r6, #0]
	usart_settings.parity_type = opt->paritytype;
  402e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402e22:	4e35      	ldr	r6, [pc, #212]	; (402ef8 <main+0xf8>)
  402e24:	4f35      	ldr	r7, [pc, #212]	; (402efc <main+0xfc>)
	stdio_base = (void *)usart;
  402e26:	6005      	str	r5, [r0, #0]
  402e28:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402e2a:	9304      	str	r3, [sp, #16]
  402e2c:	4b34      	ldr	r3, [pc, #208]	; (402f00 <main+0x100>)
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402e2e:	6037      	str	r7, [r6, #0]
	usart_settings.char_length = opt->charlength;
  402e30:	9105      	str	r1, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402e32:	9206      	str	r2, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402e34:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402e36:	9408      	str	r4, [sp, #32]
  402e38:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402e3a:	4a32      	ldr	r2, [pc, #200]	; (402f04 <main+0x104>)
  402e3c:	a904      	add	r1, sp, #16
  402e3e:	4628      	mov	r0, r5
  402e40:	4b31      	ldr	r3, [pc, #196]	; (402f08 <main+0x108>)
  402e42:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402e44:	4e31      	ldr	r6, [pc, #196]	; (402f0c <main+0x10c>)
		usart_enable_tx(p_usart);
  402e46:	4628      	mov	r0, r5
  402e48:	4b31      	ldr	r3, [pc, #196]	; (402f10 <main+0x110>)
  402e4a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402e4c:	4628      	mov	r0, r5
  402e4e:	4b31      	ldr	r3, [pc, #196]	; (402f14 <main+0x114>)
  402e50:	4798      	blx	r3
  402e52:	6833      	ldr	r3, [r6, #0]
  402e54:	4d30      	ldr	r5, [pc, #192]	; (402f18 <main+0x118>)
  402e56:	4621      	mov	r1, r4
  402e58:	6898      	ldr	r0, [r3, #8]
  402e5a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402e5c:	6833      	ldr	r3, [r6, #0]
  402e5e:	4621      	mov	r1, r4
  configure_console();

  xQueueADC = xQueueCreate(100, sizeof(adcData));
  402e60:	4f2e      	ldr	r7, [pc, #184]	; (402f1c <main+0x11c>)
  402e62:	6858      	ldr	r0, [r3, #4]
  402e64:	47a8      	blx	r5
  setbuf(stdout, NULL);
  402e66:	6833      	ldr	r3, [r6, #0]
  402e68:	4621      	mov	r1, r4
  402e6a:	6898      	ldr	r0, [r3, #8]
  402e6c:	47a8      	blx	r5
  xQueueADC = xQueueCreate(100, sizeof(adcData));
  402e6e:	4622      	mov	r2, r4
  402e70:	2104      	movs	r1, #4
  402e72:	2064      	movs	r0, #100	; 0x64
  402e74:	47b8      	blx	r7
  402e76:	4b2a      	ldr	r3, [pc, #168]	; (402f20 <main+0x120>)
  402e78:	6018      	str	r0, [r3, #0]
  if (xQueueADC == NULL)
  402e7a:	2800      	cmp	r0, #0
  402e7c:	d02c      	beq.n	402ed8 <main+0xd8>
  402e7e:	4c29      	ldr	r4, [pc, #164]	; (402f24 <main+0x124>)
    printf("falha em criar a queue xQueueADC \n");
	
  xQueueADCProc = xQueueCreate(100, sizeof(adcData));
  402e80:	2200      	movs	r2, #0
  402e82:	2104      	movs	r1, #4
  402e84:	2064      	movs	r0, #100	; 0x64
  402e86:	47b8      	blx	r7
  402e88:	4b27      	ldr	r3, [pc, #156]	; (402f28 <main+0x128>)
  402e8a:	6018      	str	r0, [r3, #0]
  if (xQueueADCProc == NULL)
  402e8c:	b308      	cbz	r0, 402ed2 <main+0xd2>
	printf("falha em criar a queue xQueueADC \n");

  if (xTaskCreate(task_adc, "ADC", TASK_ADC_STACK_SIZE, NULL,
  402e8e:	2000      	movs	r0, #0
  402e90:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  402e94:	4925      	ldr	r1, [pc, #148]	; (402f2c <main+0x12c>)
  402e96:	9003      	str	r0, [sp, #12]
  402e98:	4603      	mov	r3, r0
  402e9a:	9002      	str	r0, [sp, #8]
  402e9c:	9001      	str	r0, [sp, #4]
  402e9e:	9000      	str	r0, [sp, #0]
  402ea0:	4d23      	ldr	r5, [pc, #140]	; (402f30 <main+0x130>)
  402ea2:	4824      	ldr	r0, [pc, #144]	; (402f34 <main+0x134>)
  402ea4:	47a8      	blx	r5
  402ea6:	2801      	cmp	r0, #1
  402ea8:	d001      	beq.n	402eae <main+0xae>
                  TASK_ADC_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create test ADC task\r\n");
  402eaa:	4823      	ldr	r0, [pc, #140]	; (402f38 <main+0x138>)
  402eac:	47a0      	blx	r4
  }
  
   if (xTaskCreate(task_proc, "proc", TASK_PROC_STACK_SIZE, NULL,
  402eae:	2000      	movs	r0, #0
  402eb0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  402eb4:	4921      	ldr	r1, [pc, #132]	; (402f3c <main+0x13c>)
  402eb6:	9003      	str	r0, [sp, #12]
  402eb8:	4603      	mov	r3, r0
  402eba:	9002      	str	r0, [sp, #8]
  402ebc:	9001      	str	r0, [sp, #4]
  402ebe:	9000      	str	r0, [sp, #0]
  402ec0:	481f      	ldr	r0, [pc, #124]	; (402f40 <main+0x140>)
  402ec2:	47a8      	blx	r5
  402ec4:	2801      	cmp	r0, #1
  402ec6:	d001      	beq.n	402ecc <main+0xcc>
   TASK_PROC_STACK_PRIORITY, NULL) != pdPASS) {
	    printf("Failed to create test ADC task\r\n");
  402ec8:	481b      	ldr	r0, [pc, #108]	; (402f38 <main+0x138>)
  402eca:	47a0      	blx	r4
   }

  vTaskStartScheduler();
  402ecc:	4b1d      	ldr	r3, [pc, #116]	; (402f44 <main+0x144>)
  402ece:	4798      	blx	r3
  402ed0:	e7fe      	b.n	402ed0 <main+0xd0>
	printf("falha em criar a queue xQueueADC \n");
  402ed2:	481d      	ldr	r0, [pc, #116]	; (402f48 <main+0x148>)
  402ed4:	47a0      	blx	r4
  402ed6:	e7da      	b.n	402e8e <main+0x8e>
    printf("falha em criar a queue xQueueADC \n");
  402ed8:	4c12      	ldr	r4, [pc, #72]	; (402f24 <main+0x124>)
  402eda:	481b      	ldr	r0, [pc, #108]	; (402f48 <main+0x148>)
  402edc:	47a0      	blx	r4
  402ede:	e7cf      	b.n	402e80 <main+0x80>
  402ee0:	004001ad 	.word	0x004001ad
  402ee4:	20400bcc 	.word	0x20400bcc
  402ee8:	004002ad 	.word	0x004002ad
  402eec:	00402ab9 	.word	0x00402ab9
  402ef0:	40028000 	.word	0x40028000
  402ef4:	20400bd0 	.word	0x20400bd0
  402ef8:	20400bc8 	.word	0x20400bc8
  402efc:	004029dd 	.word	0x004029dd
  402f00:	004008d5 	.word	0x004008d5
  402f04:	08f0d180 	.word	0x08f0d180
  402f08:	00400a3d 	.word	0x00400a3d
  402f0c:	2040000c 	.word	0x2040000c
  402f10:	00400aa1 	.word	0x00400aa1
  402f14:	00400aa9 	.word	0x00400aa9
  402f18:	00404031 	.word	0x00404031
  402f1c:	004013f5 	.word	0x004013f5
  402f20:	20400c98 	.word	0x20400c98
  402f24:	00403ffd 	.word	0x00403ffd
  402f28:	20400c94 	.word	0x20400c94
  402f2c:	00408874 	.word	0x00408874
  402f30:	00401c19 	.word	0x00401c19
  402f34:	00402955 	.word	0x00402955
  402f38:	00408878 	.word	0x00408878
  402f3c:	00408898 	.word	0x00408898
  402f40:	00402c95 	.word	0x00402c95
  402f44:	00401c65 	.word	0x00401c65
  402f48:	00408850 	.word	0x00408850

00402f4c <__aeabi_drsub>:
  402f4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402f50:	e002      	b.n	402f58 <__adddf3>
  402f52:	bf00      	nop

00402f54 <__aeabi_dsub>:
  402f54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402f58 <__adddf3>:
  402f58:	b530      	push	{r4, r5, lr}
  402f5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402f5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402f62:	ea94 0f05 	teq	r4, r5
  402f66:	bf08      	it	eq
  402f68:	ea90 0f02 	teqeq	r0, r2
  402f6c:	bf1f      	itttt	ne
  402f6e:	ea54 0c00 	orrsne.w	ip, r4, r0
  402f72:	ea55 0c02 	orrsne.w	ip, r5, r2
  402f76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402f7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402f7e:	f000 80e2 	beq.w	403146 <__adddf3+0x1ee>
  402f82:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402f86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402f8a:	bfb8      	it	lt
  402f8c:	426d      	neglt	r5, r5
  402f8e:	dd0c      	ble.n	402faa <__adddf3+0x52>
  402f90:	442c      	add	r4, r5
  402f92:	ea80 0202 	eor.w	r2, r0, r2
  402f96:	ea81 0303 	eor.w	r3, r1, r3
  402f9a:	ea82 0000 	eor.w	r0, r2, r0
  402f9e:	ea83 0101 	eor.w	r1, r3, r1
  402fa2:	ea80 0202 	eor.w	r2, r0, r2
  402fa6:	ea81 0303 	eor.w	r3, r1, r3
  402faa:	2d36      	cmp	r5, #54	; 0x36
  402fac:	bf88      	it	hi
  402fae:	bd30      	pophi	{r4, r5, pc}
  402fb0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402fb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402fb8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402fbc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402fc0:	d002      	beq.n	402fc8 <__adddf3+0x70>
  402fc2:	4240      	negs	r0, r0
  402fc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402fc8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402fcc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402fd0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402fd4:	d002      	beq.n	402fdc <__adddf3+0x84>
  402fd6:	4252      	negs	r2, r2
  402fd8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402fdc:	ea94 0f05 	teq	r4, r5
  402fe0:	f000 80a7 	beq.w	403132 <__adddf3+0x1da>
  402fe4:	f1a4 0401 	sub.w	r4, r4, #1
  402fe8:	f1d5 0e20 	rsbs	lr, r5, #32
  402fec:	db0d      	blt.n	40300a <__adddf3+0xb2>
  402fee:	fa02 fc0e 	lsl.w	ip, r2, lr
  402ff2:	fa22 f205 	lsr.w	r2, r2, r5
  402ff6:	1880      	adds	r0, r0, r2
  402ff8:	f141 0100 	adc.w	r1, r1, #0
  402ffc:	fa03 f20e 	lsl.w	r2, r3, lr
  403000:	1880      	adds	r0, r0, r2
  403002:	fa43 f305 	asr.w	r3, r3, r5
  403006:	4159      	adcs	r1, r3
  403008:	e00e      	b.n	403028 <__adddf3+0xd0>
  40300a:	f1a5 0520 	sub.w	r5, r5, #32
  40300e:	f10e 0e20 	add.w	lr, lr, #32
  403012:	2a01      	cmp	r2, #1
  403014:	fa03 fc0e 	lsl.w	ip, r3, lr
  403018:	bf28      	it	cs
  40301a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40301e:	fa43 f305 	asr.w	r3, r3, r5
  403022:	18c0      	adds	r0, r0, r3
  403024:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403028:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40302c:	d507      	bpl.n	40303e <__adddf3+0xe6>
  40302e:	f04f 0e00 	mov.w	lr, #0
  403032:	f1dc 0c00 	rsbs	ip, ip, #0
  403036:	eb7e 0000 	sbcs.w	r0, lr, r0
  40303a:	eb6e 0101 	sbc.w	r1, lr, r1
  40303e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403042:	d31b      	bcc.n	40307c <__adddf3+0x124>
  403044:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403048:	d30c      	bcc.n	403064 <__adddf3+0x10c>
  40304a:	0849      	lsrs	r1, r1, #1
  40304c:	ea5f 0030 	movs.w	r0, r0, rrx
  403050:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403054:	f104 0401 	add.w	r4, r4, #1
  403058:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40305c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403060:	f080 809a 	bcs.w	403198 <__adddf3+0x240>
  403064:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403068:	bf08      	it	eq
  40306a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40306e:	f150 0000 	adcs.w	r0, r0, #0
  403072:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403076:	ea41 0105 	orr.w	r1, r1, r5
  40307a:	bd30      	pop	{r4, r5, pc}
  40307c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403080:	4140      	adcs	r0, r0
  403082:	eb41 0101 	adc.w	r1, r1, r1
  403086:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40308a:	f1a4 0401 	sub.w	r4, r4, #1
  40308e:	d1e9      	bne.n	403064 <__adddf3+0x10c>
  403090:	f091 0f00 	teq	r1, #0
  403094:	bf04      	itt	eq
  403096:	4601      	moveq	r1, r0
  403098:	2000      	moveq	r0, #0
  40309a:	fab1 f381 	clz	r3, r1
  40309e:	bf08      	it	eq
  4030a0:	3320      	addeq	r3, #32
  4030a2:	f1a3 030b 	sub.w	r3, r3, #11
  4030a6:	f1b3 0220 	subs.w	r2, r3, #32
  4030aa:	da0c      	bge.n	4030c6 <__adddf3+0x16e>
  4030ac:	320c      	adds	r2, #12
  4030ae:	dd08      	ble.n	4030c2 <__adddf3+0x16a>
  4030b0:	f102 0c14 	add.w	ip, r2, #20
  4030b4:	f1c2 020c 	rsb	r2, r2, #12
  4030b8:	fa01 f00c 	lsl.w	r0, r1, ip
  4030bc:	fa21 f102 	lsr.w	r1, r1, r2
  4030c0:	e00c      	b.n	4030dc <__adddf3+0x184>
  4030c2:	f102 0214 	add.w	r2, r2, #20
  4030c6:	bfd8      	it	le
  4030c8:	f1c2 0c20 	rsble	ip, r2, #32
  4030cc:	fa01 f102 	lsl.w	r1, r1, r2
  4030d0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4030d4:	bfdc      	itt	le
  4030d6:	ea41 010c 	orrle.w	r1, r1, ip
  4030da:	4090      	lslle	r0, r2
  4030dc:	1ae4      	subs	r4, r4, r3
  4030de:	bfa2      	ittt	ge
  4030e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4030e4:	4329      	orrge	r1, r5
  4030e6:	bd30      	popge	{r4, r5, pc}
  4030e8:	ea6f 0404 	mvn.w	r4, r4
  4030ec:	3c1f      	subs	r4, #31
  4030ee:	da1c      	bge.n	40312a <__adddf3+0x1d2>
  4030f0:	340c      	adds	r4, #12
  4030f2:	dc0e      	bgt.n	403112 <__adddf3+0x1ba>
  4030f4:	f104 0414 	add.w	r4, r4, #20
  4030f8:	f1c4 0220 	rsb	r2, r4, #32
  4030fc:	fa20 f004 	lsr.w	r0, r0, r4
  403100:	fa01 f302 	lsl.w	r3, r1, r2
  403104:	ea40 0003 	orr.w	r0, r0, r3
  403108:	fa21 f304 	lsr.w	r3, r1, r4
  40310c:	ea45 0103 	orr.w	r1, r5, r3
  403110:	bd30      	pop	{r4, r5, pc}
  403112:	f1c4 040c 	rsb	r4, r4, #12
  403116:	f1c4 0220 	rsb	r2, r4, #32
  40311a:	fa20 f002 	lsr.w	r0, r0, r2
  40311e:	fa01 f304 	lsl.w	r3, r1, r4
  403122:	ea40 0003 	orr.w	r0, r0, r3
  403126:	4629      	mov	r1, r5
  403128:	bd30      	pop	{r4, r5, pc}
  40312a:	fa21 f004 	lsr.w	r0, r1, r4
  40312e:	4629      	mov	r1, r5
  403130:	bd30      	pop	{r4, r5, pc}
  403132:	f094 0f00 	teq	r4, #0
  403136:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40313a:	bf06      	itte	eq
  40313c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403140:	3401      	addeq	r4, #1
  403142:	3d01      	subne	r5, #1
  403144:	e74e      	b.n	402fe4 <__adddf3+0x8c>
  403146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40314a:	bf18      	it	ne
  40314c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403150:	d029      	beq.n	4031a6 <__adddf3+0x24e>
  403152:	ea94 0f05 	teq	r4, r5
  403156:	bf08      	it	eq
  403158:	ea90 0f02 	teqeq	r0, r2
  40315c:	d005      	beq.n	40316a <__adddf3+0x212>
  40315e:	ea54 0c00 	orrs.w	ip, r4, r0
  403162:	bf04      	itt	eq
  403164:	4619      	moveq	r1, r3
  403166:	4610      	moveq	r0, r2
  403168:	bd30      	pop	{r4, r5, pc}
  40316a:	ea91 0f03 	teq	r1, r3
  40316e:	bf1e      	ittt	ne
  403170:	2100      	movne	r1, #0
  403172:	2000      	movne	r0, #0
  403174:	bd30      	popne	{r4, r5, pc}
  403176:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40317a:	d105      	bne.n	403188 <__adddf3+0x230>
  40317c:	0040      	lsls	r0, r0, #1
  40317e:	4149      	adcs	r1, r1
  403180:	bf28      	it	cs
  403182:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403186:	bd30      	pop	{r4, r5, pc}
  403188:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40318c:	bf3c      	itt	cc
  40318e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403192:	bd30      	popcc	{r4, r5, pc}
  403194:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403198:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40319c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4031a0:	f04f 0000 	mov.w	r0, #0
  4031a4:	bd30      	pop	{r4, r5, pc}
  4031a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4031aa:	bf1a      	itte	ne
  4031ac:	4619      	movne	r1, r3
  4031ae:	4610      	movne	r0, r2
  4031b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4031b4:	bf1c      	itt	ne
  4031b6:	460b      	movne	r3, r1
  4031b8:	4602      	movne	r2, r0
  4031ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4031be:	bf06      	itte	eq
  4031c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4031c4:	ea91 0f03 	teqeq	r1, r3
  4031c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4031cc:	bd30      	pop	{r4, r5, pc}
  4031ce:	bf00      	nop

004031d0 <__aeabi_ui2d>:
  4031d0:	f090 0f00 	teq	r0, #0
  4031d4:	bf04      	itt	eq
  4031d6:	2100      	moveq	r1, #0
  4031d8:	4770      	bxeq	lr
  4031da:	b530      	push	{r4, r5, lr}
  4031dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4031e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4031e4:	f04f 0500 	mov.w	r5, #0
  4031e8:	f04f 0100 	mov.w	r1, #0
  4031ec:	e750      	b.n	403090 <__adddf3+0x138>
  4031ee:	bf00      	nop

004031f0 <__aeabi_i2d>:
  4031f0:	f090 0f00 	teq	r0, #0
  4031f4:	bf04      	itt	eq
  4031f6:	2100      	moveq	r1, #0
  4031f8:	4770      	bxeq	lr
  4031fa:	b530      	push	{r4, r5, lr}
  4031fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403200:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403204:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403208:	bf48      	it	mi
  40320a:	4240      	negmi	r0, r0
  40320c:	f04f 0100 	mov.w	r1, #0
  403210:	e73e      	b.n	403090 <__adddf3+0x138>
  403212:	bf00      	nop

00403214 <__aeabi_f2d>:
  403214:	0042      	lsls	r2, r0, #1
  403216:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40321a:	ea4f 0131 	mov.w	r1, r1, rrx
  40321e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403222:	bf1f      	itttt	ne
  403224:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403228:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40322c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403230:	4770      	bxne	lr
  403232:	f092 0f00 	teq	r2, #0
  403236:	bf14      	ite	ne
  403238:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40323c:	4770      	bxeq	lr
  40323e:	b530      	push	{r4, r5, lr}
  403240:	f44f 7460 	mov.w	r4, #896	; 0x380
  403244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403248:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40324c:	e720      	b.n	403090 <__adddf3+0x138>
  40324e:	bf00      	nop

00403250 <__aeabi_ul2d>:
  403250:	ea50 0201 	orrs.w	r2, r0, r1
  403254:	bf08      	it	eq
  403256:	4770      	bxeq	lr
  403258:	b530      	push	{r4, r5, lr}
  40325a:	f04f 0500 	mov.w	r5, #0
  40325e:	e00a      	b.n	403276 <__aeabi_l2d+0x16>

00403260 <__aeabi_l2d>:
  403260:	ea50 0201 	orrs.w	r2, r0, r1
  403264:	bf08      	it	eq
  403266:	4770      	bxeq	lr
  403268:	b530      	push	{r4, r5, lr}
  40326a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40326e:	d502      	bpl.n	403276 <__aeabi_l2d+0x16>
  403270:	4240      	negs	r0, r0
  403272:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403276:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40327a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40327e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403282:	f43f aedc 	beq.w	40303e <__adddf3+0xe6>
  403286:	f04f 0203 	mov.w	r2, #3
  40328a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40328e:	bf18      	it	ne
  403290:	3203      	addne	r2, #3
  403292:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403296:	bf18      	it	ne
  403298:	3203      	addne	r2, #3
  40329a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40329e:	f1c2 0320 	rsb	r3, r2, #32
  4032a2:	fa00 fc03 	lsl.w	ip, r0, r3
  4032a6:	fa20 f002 	lsr.w	r0, r0, r2
  4032aa:	fa01 fe03 	lsl.w	lr, r1, r3
  4032ae:	ea40 000e 	orr.w	r0, r0, lr
  4032b2:	fa21 f102 	lsr.w	r1, r1, r2
  4032b6:	4414      	add	r4, r2
  4032b8:	e6c1      	b.n	40303e <__adddf3+0xe6>
  4032ba:	bf00      	nop

004032bc <__aeabi_dmul>:
  4032bc:	b570      	push	{r4, r5, r6, lr}
  4032be:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4032c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4032c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4032ca:	bf1d      	ittte	ne
  4032cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4032d0:	ea94 0f0c 	teqne	r4, ip
  4032d4:	ea95 0f0c 	teqne	r5, ip
  4032d8:	f000 f8de 	bleq	403498 <__aeabi_dmul+0x1dc>
  4032dc:	442c      	add	r4, r5
  4032de:	ea81 0603 	eor.w	r6, r1, r3
  4032e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4032e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4032ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4032ee:	bf18      	it	ne
  4032f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4032f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4032f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4032fc:	d038      	beq.n	403370 <__aeabi_dmul+0xb4>
  4032fe:	fba0 ce02 	umull	ip, lr, r0, r2
  403302:	f04f 0500 	mov.w	r5, #0
  403306:	fbe1 e502 	umlal	lr, r5, r1, r2
  40330a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40330e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403312:	f04f 0600 	mov.w	r6, #0
  403316:	fbe1 5603 	umlal	r5, r6, r1, r3
  40331a:	f09c 0f00 	teq	ip, #0
  40331e:	bf18      	it	ne
  403320:	f04e 0e01 	orrne.w	lr, lr, #1
  403324:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403328:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40332c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403330:	d204      	bcs.n	40333c <__aeabi_dmul+0x80>
  403332:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403336:	416d      	adcs	r5, r5
  403338:	eb46 0606 	adc.w	r6, r6, r6
  40333c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403340:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403344:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403348:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40334c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403350:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403354:	bf88      	it	hi
  403356:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40335a:	d81e      	bhi.n	40339a <__aeabi_dmul+0xde>
  40335c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403360:	bf08      	it	eq
  403362:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403366:	f150 0000 	adcs.w	r0, r0, #0
  40336a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40336e:	bd70      	pop	{r4, r5, r6, pc}
  403370:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403374:	ea46 0101 	orr.w	r1, r6, r1
  403378:	ea40 0002 	orr.w	r0, r0, r2
  40337c:	ea81 0103 	eor.w	r1, r1, r3
  403380:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403384:	bfc2      	ittt	gt
  403386:	ebd4 050c 	rsbsgt	r5, r4, ip
  40338a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40338e:	bd70      	popgt	{r4, r5, r6, pc}
  403390:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403394:	f04f 0e00 	mov.w	lr, #0
  403398:	3c01      	subs	r4, #1
  40339a:	f300 80ab 	bgt.w	4034f4 <__aeabi_dmul+0x238>
  40339e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4033a2:	bfde      	ittt	le
  4033a4:	2000      	movle	r0, #0
  4033a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4033aa:	bd70      	pople	{r4, r5, r6, pc}
  4033ac:	f1c4 0400 	rsb	r4, r4, #0
  4033b0:	3c20      	subs	r4, #32
  4033b2:	da35      	bge.n	403420 <__aeabi_dmul+0x164>
  4033b4:	340c      	adds	r4, #12
  4033b6:	dc1b      	bgt.n	4033f0 <__aeabi_dmul+0x134>
  4033b8:	f104 0414 	add.w	r4, r4, #20
  4033bc:	f1c4 0520 	rsb	r5, r4, #32
  4033c0:	fa00 f305 	lsl.w	r3, r0, r5
  4033c4:	fa20 f004 	lsr.w	r0, r0, r4
  4033c8:	fa01 f205 	lsl.w	r2, r1, r5
  4033cc:	ea40 0002 	orr.w	r0, r0, r2
  4033d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4033d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4033d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4033dc:	fa21 f604 	lsr.w	r6, r1, r4
  4033e0:	eb42 0106 	adc.w	r1, r2, r6
  4033e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4033e8:	bf08      	it	eq
  4033ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4033ee:	bd70      	pop	{r4, r5, r6, pc}
  4033f0:	f1c4 040c 	rsb	r4, r4, #12
  4033f4:	f1c4 0520 	rsb	r5, r4, #32
  4033f8:	fa00 f304 	lsl.w	r3, r0, r4
  4033fc:	fa20 f005 	lsr.w	r0, r0, r5
  403400:	fa01 f204 	lsl.w	r2, r1, r4
  403404:	ea40 0002 	orr.w	r0, r0, r2
  403408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40340c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403410:	f141 0100 	adc.w	r1, r1, #0
  403414:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403418:	bf08      	it	eq
  40341a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40341e:	bd70      	pop	{r4, r5, r6, pc}
  403420:	f1c4 0520 	rsb	r5, r4, #32
  403424:	fa00 f205 	lsl.w	r2, r0, r5
  403428:	ea4e 0e02 	orr.w	lr, lr, r2
  40342c:	fa20 f304 	lsr.w	r3, r0, r4
  403430:	fa01 f205 	lsl.w	r2, r1, r5
  403434:	ea43 0302 	orr.w	r3, r3, r2
  403438:	fa21 f004 	lsr.w	r0, r1, r4
  40343c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403440:	fa21 f204 	lsr.w	r2, r1, r4
  403444:	ea20 0002 	bic.w	r0, r0, r2
  403448:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40344c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403450:	bf08      	it	eq
  403452:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403456:	bd70      	pop	{r4, r5, r6, pc}
  403458:	f094 0f00 	teq	r4, #0
  40345c:	d10f      	bne.n	40347e <__aeabi_dmul+0x1c2>
  40345e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403462:	0040      	lsls	r0, r0, #1
  403464:	eb41 0101 	adc.w	r1, r1, r1
  403468:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40346c:	bf08      	it	eq
  40346e:	3c01      	subeq	r4, #1
  403470:	d0f7      	beq.n	403462 <__aeabi_dmul+0x1a6>
  403472:	ea41 0106 	orr.w	r1, r1, r6
  403476:	f095 0f00 	teq	r5, #0
  40347a:	bf18      	it	ne
  40347c:	4770      	bxne	lr
  40347e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403482:	0052      	lsls	r2, r2, #1
  403484:	eb43 0303 	adc.w	r3, r3, r3
  403488:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40348c:	bf08      	it	eq
  40348e:	3d01      	subeq	r5, #1
  403490:	d0f7      	beq.n	403482 <__aeabi_dmul+0x1c6>
  403492:	ea43 0306 	orr.w	r3, r3, r6
  403496:	4770      	bx	lr
  403498:	ea94 0f0c 	teq	r4, ip
  40349c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4034a0:	bf18      	it	ne
  4034a2:	ea95 0f0c 	teqne	r5, ip
  4034a6:	d00c      	beq.n	4034c2 <__aeabi_dmul+0x206>
  4034a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4034ac:	bf18      	it	ne
  4034ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4034b2:	d1d1      	bne.n	403458 <__aeabi_dmul+0x19c>
  4034b4:	ea81 0103 	eor.w	r1, r1, r3
  4034b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4034bc:	f04f 0000 	mov.w	r0, #0
  4034c0:	bd70      	pop	{r4, r5, r6, pc}
  4034c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4034c6:	bf06      	itte	eq
  4034c8:	4610      	moveq	r0, r2
  4034ca:	4619      	moveq	r1, r3
  4034cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4034d0:	d019      	beq.n	403506 <__aeabi_dmul+0x24a>
  4034d2:	ea94 0f0c 	teq	r4, ip
  4034d6:	d102      	bne.n	4034de <__aeabi_dmul+0x222>
  4034d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4034dc:	d113      	bne.n	403506 <__aeabi_dmul+0x24a>
  4034de:	ea95 0f0c 	teq	r5, ip
  4034e2:	d105      	bne.n	4034f0 <__aeabi_dmul+0x234>
  4034e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4034e8:	bf1c      	itt	ne
  4034ea:	4610      	movne	r0, r2
  4034ec:	4619      	movne	r1, r3
  4034ee:	d10a      	bne.n	403506 <__aeabi_dmul+0x24a>
  4034f0:	ea81 0103 	eor.w	r1, r1, r3
  4034f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4034f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4034fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403500:	f04f 0000 	mov.w	r0, #0
  403504:	bd70      	pop	{r4, r5, r6, pc}
  403506:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40350a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40350e:	bd70      	pop	{r4, r5, r6, pc}

00403510 <__aeabi_ddiv>:
  403510:	b570      	push	{r4, r5, r6, lr}
  403512:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403516:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40351a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40351e:	bf1d      	ittte	ne
  403520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403524:	ea94 0f0c 	teqne	r4, ip
  403528:	ea95 0f0c 	teqne	r5, ip
  40352c:	f000 f8a7 	bleq	40367e <__aeabi_ddiv+0x16e>
  403530:	eba4 0405 	sub.w	r4, r4, r5
  403534:	ea81 0e03 	eor.w	lr, r1, r3
  403538:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40353c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403540:	f000 8088 	beq.w	403654 <__aeabi_ddiv+0x144>
  403544:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403548:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40354c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403550:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403554:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403558:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40355c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403560:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403564:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403568:	429d      	cmp	r5, r3
  40356a:	bf08      	it	eq
  40356c:	4296      	cmpeq	r6, r2
  40356e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403572:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403576:	d202      	bcs.n	40357e <__aeabi_ddiv+0x6e>
  403578:	085b      	lsrs	r3, r3, #1
  40357a:	ea4f 0232 	mov.w	r2, r2, rrx
  40357e:	1ab6      	subs	r6, r6, r2
  403580:	eb65 0503 	sbc.w	r5, r5, r3
  403584:	085b      	lsrs	r3, r3, #1
  403586:	ea4f 0232 	mov.w	r2, r2, rrx
  40358a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40358e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403592:	ebb6 0e02 	subs.w	lr, r6, r2
  403596:	eb75 0e03 	sbcs.w	lr, r5, r3
  40359a:	bf22      	ittt	cs
  40359c:	1ab6      	subcs	r6, r6, r2
  40359e:	4675      	movcs	r5, lr
  4035a0:	ea40 000c 	orrcs.w	r0, r0, ip
  4035a4:	085b      	lsrs	r3, r3, #1
  4035a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4035aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4035ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4035b2:	bf22      	ittt	cs
  4035b4:	1ab6      	subcs	r6, r6, r2
  4035b6:	4675      	movcs	r5, lr
  4035b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4035bc:	085b      	lsrs	r3, r3, #1
  4035be:	ea4f 0232 	mov.w	r2, r2, rrx
  4035c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4035c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4035ca:	bf22      	ittt	cs
  4035cc:	1ab6      	subcs	r6, r6, r2
  4035ce:	4675      	movcs	r5, lr
  4035d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4035d4:	085b      	lsrs	r3, r3, #1
  4035d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4035da:	ebb6 0e02 	subs.w	lr, r6, r2
  4035de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4035e2:	bf22      	ittt	cs
  4035e4:	1ab6      	subcs	r6, r6, r2
  4035e6:	4675      	movcs	r5, lr
  4035e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4035ec:	ea55 0e06 	orrs.w	lr, r5, r6
  4035f0:	d018      	beq.n	403624 <__aeabi_ddiv+0x114>
  4035f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4035f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4035fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4035fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403602:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403606:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40360a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40360e:	d1c0      	bne.n	403592 <__aeabi_ddiv+0x82>
  403610:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403614:	d10b      	bne.n	40362e <__aeabi_ddiv+0x11e>
  403616:	ea41 0100 	orr.w	r1, r1, r0
  40361a:	f04f 0000 	mov.w	r0, #0
  40361e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403622:	e7b6      	b.n	403592 <__aeabi_ddiv+0x82>
  403624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403628:	bf04      	itt	eq
  40362a:	4301      	orreq	r1, r0
  40362c:	2000      	moveq	r0, #0
  40362e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403632:	bf88      	it	hi
  403634:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403638:	f63f aeaf 	bhi.w	40339a <__aeabi_dmul+0xde>
  40363c:	ebb5 0c03 	subs.w	ip, r5, r3
  403640:	bf04      	itt	eq
  403642:	ebb6 0c02 	subseq.w	ip, r6, r2
  403646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40364a:	f150 0000 	adcs.w	r0, r0, #0
  40364e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403652:	bd70      	pop	{r4, r5, r6, pc}
  403654:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403658:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40365c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403660:	bfc2      	ittt	gt
  403662:	ebd4 050c 	rsbsgt	r5, r4, ip
  403666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40366a:	bd70      	popgt	{r4, r5, r6, pc}
  40366c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403670:	f04f 0e00 	mov.w	lr, #0
  403674:	3c01      	subs	r4, #1
  403676:	e690      	b.n	40339a <__aeabi_dmul+0xde>
  403678:	ea45 0e06 	orr.w	lr, r5, r6
  40367c:	e68d      	b.n	40339a <__aeabi_dmul+0xde>
  40367e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403682:	ea94 0f0c 	teq	r4, ip
  403686:	bf08      	it	eq
  403688:	ea95 0f0c 	teqeq	r5, ip
  40368c:	f43f af3b 	beq.w	403506 <__aeabi_dmul+0x24a>
  403690:	ea94 0f0c 	teq	r4, ip
  403694:	d10a      	bne.n	4036ac <__aeabi_ddiv+0x19c>
  403696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40369a:	f47f af34 	bne.w	403506 <__aeabi_dmul+0x24a>
  40369e:	ea95 0f0c 	teq	r5, ip
  4036a2:	f47f af25 	bne.w	4034f0 <__aeabi_dmul+0x234>
  4036a6:	4610      	mov	r0, r2
  4036a8:	4619      	mov	r1, r3
  4036aa:	e72c      	b.n	403506 <__aeabi_dmul+0x24a>
  4036ac:	ea95 0f0c 	teq	r5, ip
  4036b0:	d106      	bne.n	4036c0 <__aeabi_ddiv+0x1b0>
  4036b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4036b6:	f43f aefd 	beq.w	4034b4 <__aeabi_dmul+0x1f8>
  4036ba:	4610      	mov	r0, r2
  4036bc:	4619      	mov	r1, r3
  4036be:	e722      	b.n	403506 <__aeabi_dmul+0x24a>
  4036c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4036c4:	bf18      	it	ne
  4036c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4036ca:	f47f aec5 	bne.w	403458 <__aeabi_dmul+0x19c>
  4036ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4036d2:	f47f af0d 	bne.w	4034f0 <__aeabi_dmul+0x234>
  4036d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4036da:	f47f aeeb 	bne.w	4034b4 <__aeabi_dmul+0x1f8>
  4036de:	e712      	b.n	403506 <__aeabi_dmul+0x24a>

004036e0 <__aeabi_d2f>:
  4036e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4036e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4036e8:	bf24      	itt	cs
  4036ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4036ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4036f2:	d90d      	bls.n	403710 <__aeabi_d2f+0x30>
  4036f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4036f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4036fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403700:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403704:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403708:	bf08      	it	eq
  40370a:	f020 0001 	biceq.w	r0, r0, #1
  40370e:	4770      	bx	lr
  403710:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403714:	d121      	bne.n	40375a <__aeabi_d2f+0x7a>
  403716:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40371a:	bfbc      	itt	lt
  40371c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403720:	4770      	bxlt	lr
  403722:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403726:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40372a:	f1c2 0218 	rsb	r2, r2, #24
  40372e:	f1c2 0c20 	rsb	ip, r2, #32
  403732:	fa10 f30c 	lsls.w	r3, r0, ip
  403736:	fa20 f002 	lsr.w	r0, r0, r2
  40373a:	bf18      	it	ne
  40373c:	f040 0001 	orrne.w	r0, r0, #1
  403740:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403744:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403748:	fa03 fc0c 	lsl.w	ip, r3, ip
  40374c:	ea40 000c 	orr.w	r0, r0, ip
  403750:	fa23 f302 	lsr.w	r3, r3, r2
  403754:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403758:	e7cc      	b.n	4036f4 <__aeabi_d2f+0x14>
  40375a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40375e:	d107      	bne.n	403770 <__aeabi_d2f+0x90>
  403760:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403764:	bf1e      	ittt	ne
  403766:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40376a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40376e:	4770      	bxne	lr
  403770:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403774:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40377c:	4770      	bx	lr
  40377e:	bf00      	nop

00403780 <__libc_init_array>:
  403780:	b570      	push	{r4, r5, r6, lr}
  403782:	4e0f      	ldr	r6, [pc, #60]	; (4037c0 <__libc_init_array+0x40>)
  403784:	4d0f      	ldr	r5, [pc, #60]	; (4037c4 <__libc_init_array+0x44>)
  403786:	1b76      	subs	r6, r6, r5
  403788:	10b6      	asrs	r6, r6, #2
  40378a:	bf18      	it	ne
  40378c:	2400      	movne	r4, #0
  40378e:	d005      	beq.n	40379c <__libc_init_array+0x1c>
  403790:	3401      	adds	r4, #1
  403792:	f855 3b04 	ldr.w	r3, [r5], #4
  403796:	4798      	blx	r3
  403798:	42a6      	cmp	r6, r4
  40379a:	d1f9      	bne.n	403790 <__libc_init_array+0x10>
  40379c:	4e0a      	ldr	r6, [pc, #40]	; (4037c8 <__libc_init_array+0x48>)
  40379e:	4d0b      	ldr	r5, [pc, #44]	; (4037cc <__libc_init_array+0x4c>)
  4037a0:	1b76      	subs	r6, r6, r5
  4037a2:	f005 f9e9 	bl	408b78 <_init>
  4037a6:	10b6      	asrs	r6, r6, #2
  4037a8:	bf18      	it	ne
  4037aa:	2400      	movne	r4, #0
  4037ac:	d006      	beq.n	4037bc <__libc_init_array+0x3c>
  4037ae:	3401      	adds	r4, #1
  4037b0:	f855 3b04 	ldr.w	r3, [r5], #4
  4037b4:	4798      	blx	r3
  4037b6:	42a6      	cmp	r6, r4
  4037b8:	d1f9      	bne.n	4037ae <__libc_init_array+0x2e>
  4037ba:	bd70      	pop	{r4, r5, r6, pc}
  4037bc:	bd70      	pop	{r4, r5, r6, pc}
  4037be:	bf00      	nop
  4037c0:	00408b84 	.word	0x00408b84
  4037c4:	00408b84 	.word	0x00408b84
  4037c8:	00408b8c 	.word	0x00408b8c
  4037cc:	00408b84 	.word	0x00408b84

004037d0 <malloc>:
  4037d0:	4b02      	ldr	r3, [pc, #8]	; (4037dc <malloc+0xc>)
  4037d2:	4601      	mov	r1, r0
  4037d4:	6818      	ldr	r0, [r3, #0]
  4037d6:	f000 b80b 	b.w	4037f0 <_malloc_r>
  4037da:	bf00      	nop
  4037dc:	2040000c 	.word	0x2040000c

004037e0 <free>:
  4037e0:	4b02      	ldr	r3, [pc, #8]	; (4037ec <free+0xc>)
  4037e2:	4601      	mov	r1, r0
  4037e4:	6818      	ldr	r0, [r3, #0]
  4037e6:	f003 ba33 	b.w	406c50 <_free_r>
  4037ea:	bf00      	nop
  4037ec:	2040000c 	.word	0x2040000c

004037f0 <_malloc_r>:
  4037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037f4:	f101 060b 	add.w	r6, r1, #11
  4037f8:	2e16      	cmp	r6, #22
  4037fa:	b083      	sub	sp, #12
  4037fc:	4605      	mov	r5, r0
  4037fe:	f240 809e 	bls.w	40393e <_malloc_r+0x14e>
  403802:	f036 0607 	bics.w	r6, r6, #7
  403806:	f100 80bd 	bmi.w	403984 <_malloc_r+0x194>
  40380a:	42b1      	cmp	r1, r6
  40380c:	f200 80ba 	bhi.w	403984 <_malloc_r+0x194>
  403810:	f000 fb86 	bl	403f20 <__malloc_lock>
  403814:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403818:	f0c0 8293 	bcc.w	403d42 <_malloc_r+0x552>
  40381c:	0a73      	lsrs	r3, r6, #9
  40381e:	f000 80b8 	beq.w	403992 <_malloc_r+0x1a2>
  403822:	2b04      	cmp	r3, #4
  403824:	f200 8179 	bhi.w	403b1a <_malloc_r+0x32a>
  403828:	09b3      	lsrs	r3, r6, #6
  40382a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40382e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403832:	00c3      	lsls	r3, r0, #3
  403834:	4fbf      	ldr	r7, [pc, #764]	; (403b34 <_malloc_r+0x344>)
  403836:	443b      	add	r3, r7
  403838:	f1a3 0108 	sub.w	r1, r3, #8
  40383c:	685c      	ldr	r4, [r3, #4]
  40383e:	42a1      	cmp	r1, r4
  403840:	d106      	bne.n	403850 <_malloc_r+0x60>
  403842:	e00c      	b.n	40385e <_malloc_r+0x6e>
  403844:	2a00      	cmp	r2, #0
  403846:	f280 80aa 	bge.w	40399e <_malloc_r+0x1ae>
  40384a:	68e4      	ldr	r4, [r4, #12]
  40384c:	42a1      	cmp	r1, r4
  40384e:	d006      	beq.n	40385e <_malloc_r+0x6e>
  403850:	6863      	ldr	r3, [r4, #4]
  403852:	f023 0303 	bic.w	r3, r3, #3
  403856:	1b9a      	subs	r2, r3, r6
  403858:	2a0f      	cmp	r2, #15
  40385a:	ddf3      	ble.n	403844 <_malloc_r+0x54>
  40385c:	4670      	mov	r0, lr
  40385e:	693c      	ldr	r4, [r7, #16]
  403860:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403b48 <_malloc_r+0x358>
  403864:	4574      	cmp	r4, lr
  403866:	f000 81ab 	beq.w	403bc0 <_malloc_r+0x3d0>
  40386a:	6863      	ldr	r3, [r4, #4]
  40386c:	f023 0303 	bic.w	r3, r3, #3
  403870:	1b9a      	subs	r2, r3, r6
  403872:	2a0f      	cmp	r2, #15
  403874:	f300 8190 	bgt.w	403b98 <_malloc_r+0x3a8>
  403878:	2a00      	cmp	r2, #0
  40387a:	f8c7 e014 	str.w	lr, [r7, #20]
  40387e:	f8c7 e010 	str.w	lr, [r7, #16]
  403882:	f280 809d 	bge.w	4039c0 <_malloc_r+0x1d0>
  403886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40388a:	f080 8161 	bcs.w	403b50 <_malloc_r+0x360>
  40388e:	08db      	lsrs	r3, r3, #3
  403890:	f103 0c01 	add.w	ip, r3, #1
  403894:	1099      	asrs	r1, r3, #2
  403896:	687a      	ldr	r2, [r7, #4]
  403898:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40389c:	f8c4 8008 	str.w	r8, [r4, #8]
  4038a0:	2301      	movs	r3, #1
  4038a2:	408b      	lsls	r3, r1
  4038a4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4038a8:	4313      	orrs	r3, r2
  4038aa:	3908      	subs	r1, #8
  4038ac:	60e1      	str	r1, [r4, #12]
  4038ae:	607b      	str	r3, [r7, #4]
  4038b0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4038b4:	f8c8 400c 	str.w	r4, [r8, #12]
  4038b8:	1082      	asrs	r2, r0, #2
  4038ba:	2401      	movs	r4, #1
  4038bc:	4094      	lsls	r4, r2
  4038be:	429c      	cmp	r4, r3
  4038c0:	f200 808b 	bhi.w	4039da <_malloc_r+0x1ea>
  4038c4:	421c      	tst	r4, r3
  4038c6:	d106      	bne.n	4038d6 <_malloc_r+0xe6>
  4038c8:	f020 0003 	bic.w	r0, r0, #3
  4038cc:	0064      	lsls	r4, r4, #1
  4038ce:	421c      	tst	r4, r3
  4038d0:	f100 0004 	add.w	r0, r0, #4
  4038d4:	d0fa      	beq.n	4038cc <_malloc_r+0xdc>
  4038d6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4038da:	46cc      	mov	ip, r9
  4038dc:	4680      	mov	r8, r0
  4038de:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4038e2:	459c      	cmp	ip, r3
  4038e4:	d107      	bne.n	4038f6 <_malloc_r+0x106>
  4038e6:	e16d      	b.n	403bc4 <_malloc_r+0x3d4>
  4038e8:	2a00      	cmp	r2, #0
  4038ea:	f280 817b 	bge.w	403be4 <_malloc_r+0x3f4>
  4038ee:	68db      	ldr	r3, [r3, #12]
  4038f0:	459c      	cmp	ip, r3
  4038f2:	f000 8167 	beq.w	403bc4 <_malloc_r+0x3d4>
  4038f6:	6859      	ldr	r1, [r3, #4]
  4038f8:	f021 0103 	bic.w	r1, r1, #3
  4038fc:	1b8a      	subs	r2, r1, r6
  4038fe:	2a0f      	cmp	r2, #15
  403900:	ddf2      	ble.n	4038e8 <_malloc_r+0xf8>
  403902:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403906:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40390a:	9300      	str	r3, [sp, #0]
  40390c:	199c      	adds	r4, r3, r6
  40390e:	4628      	mov	r0, r5
  403910:	f046 0601 	orr.w	r6, r6, #1
  403914:	f042 0501 	orr.w	r5, r2, #1
  403918:	605e      	str	r6, [r3, #4]
  40391a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40391e:	f8cc 8008 	str.w	r8, [ip, #8]
  403922:	617c      	str	r4, [r7, #20]
  403924:	613c      	str	r4, [r7, #16]
  403926:	f8c4 e00c 	str.w	lr, [r4, #12]
  40392a:	f8c4 e008 	str.w	lr, [r4, #8]
  40392e:	6065      	str	r5, [r4, #4]
  403930:	505a      	str	r2, [r3, r1]
  403932:	f000 fafb 	bl	403f2c <__malloc_unlock>
  403936:	9b00      	ldr	r3, [sp, #0]
  403938:	f103 0408 	add.w	r4, r3, #8
  40393c:	e01e      	b.n	40397c <_malloc_r+0x18c>
  40393e:	2910      	cmp	r1, #16
  403940:	d820      	bhi.n	403984 <_malloc_r+0x194>
  403942:	f000 faed 	bl	403f20 <__malloc_lock>
  403946:	2610      	movs	r6, #16
  403948:	2318      	movs	r3, #24
  40394a:	2002      	movs	r0, #2
  40394c:	4f79      	ldr	r7, [pc, #484]	; (403b34 <_malloc_r+0x344>)
  40394e:	443b      	add	r3, r7
  403950:	f1a3 0208 	sub.w	r2, r3, #8
  403954:	685c      	ldr	r4, [r3, #4]
  403956:	4294      	cmp	r4, r2
  403958:	f000 813d 	beq.w	403bd6 <_malloc_r+0x3e6>
  40395c:	6863      	ldr	r3, [r4, #4]
  40395e:	68e1      	ldr	r1, [r4, #12]
  403960:	68a6      	ldr	r6, [r4, #8]
  403962:	f023 0303 	bic.w	r3, r3, #3
  403966:	4423      	add	r3, r4
  403968:	4628      	mov	r0, r5
  40396a:	685a      	ldr	r2, [r3, #4]
  40396c:	60f1      	str	r1, [r6, #12]
  40396e:	f042 0201 	orr.w	r2, r2, #1
  403972:	608e      	str	r6, [r1, #8]
  403974:	605a      	str	r2, [r3, #4]
  403976:	f000 fad9 	bl	403f2c <__malloc_unlock>
  40397a:	3408      	adds	r4, #8
  40397c:	4620      	mov	r0, r4
  40397e:	b003      	add	sp, #12
  403980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403984:	2400      	movs	r4, #0
  403986:	230c      	movs	r3, #12
  403988:	4620      	mov	r0, r4
  40398a:	602b      	str	r3, [r5, #0]
  40398c:	b003      	add	sp, #12
  40398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403992:	2040      	movs	r0, #64	; 0x40
  403994:	f44f 7300 	mov.w	r3, #512	; 0x200
  403998:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40399c:	e74a      	b.n	403834 <_malloc_r+0x44>
  40399e:	4423      	add	r3, r4
  4039a0:	68e1      	ldr	r1, [r4, #12]
  4039a2:	685a      	ldr	r2, [r3, #4]
  4039a4:	68a6      	ldr	r6, [r4, #8]
  4039a6:	f042 0201 	orr.w	r2, r2, #1
  4039aa:	60f1      	str	r1, [r6, #12]
  4039ac:	4628      	mov	r0, r5
  4039ae:	608e      	str	r6, [r1, #8]
  4039b0:	605a      	str	r2, [r3, #4]
  4039b2:	f000 fabb 	bl	403f2c <__malloc_unlock>
  4039b6:	3408      	adds	r4, #8
  4039b8:	4620      	mov	r0, r4
  4039ba:	b003      	add	sp, #12
  4039bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039c0:	4423      	add	r3, r4
  4039c2:	4628      	mov	r0, r5
  4039c4:	685a      	ldr	r2, [r3, #4]
  4039c6:	f042 0201 	orr.w	r2, r2, #1
  4039ca:	605a      	str	r2, [r3, #4]
  4039cc:	f000 faae 	bl	403f2c <__malloc_unlock>
  4039d0:	3408      	adds	r4, #8
  4039d2:	4620      	mov	r0, r4
  4039d4:	b003      	add	sp, #12
  4039d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039da:	68bc      	ldr	r4, [r7, #8]
  4039dc:	6863      	ldr	r3, [r4, #4]
  4039de:	f023 0803 	bic.w	r8, r3, #3
  4039e2:	45b0      	cmp	r8, r6
  4039e4:	d304      	bcc.n	4039f0 <_malloc_r+0x200>
  4039e6:	eba8 0306 	sub.w	r3, r8, r6
  4039ea:	2b0f      	cmp	r3, #15
  4039ec:	f300 8085 	bgt.w	403afa <_malloc_r+0x30a>
  4039f0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403b4c <_malloc_r+0x35c>
  4039f4:	4b50      	ldr	r3, [pc, #320]	; (403b38 <_malloc_r+0x348>)
  4039f6:	f8d9 2000 	ldr.w	r2, [r9]
  4039fa:	681b      	ldr	r3, [r3, #0]
  4039fc:	3201      	adds	r2, #1
  4039fe:	4433      	add	r3, r6
  403a00:	eb04 0a08 	add.w	sl, r4, r8
  403a04:	f000 8155 	beq.w	403cb2 <_malloc_r+0x4c2>
  403a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403a0c:	330f      	adds	r3, #15
  403a0e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403a12:	f02b 0b0f 	bic.w	fp, fp, #15
  403a16:	4659      	mov	r1, fp
  403a18:	4628      	mov	r0, r5
  403a1a:	f000 faf7 	bl	40400c <_sbrk_r>
  403a1e:	1c41      	adds	r1, r0, #1
  403a20:	4602      	mov	r2, r0
  403a22:	f000 80fc 	beq.w	403c1e <_malloc_r+0x42e>
  403a26:	4582      	cmp	sl, r0
  403a28:	f200 80f7 	bhi.w	403c1a <_malloc_r+0x42a>
  403a2c:	4b43      	ldr	r3, [pc, #268]	; (403b3c <_malloc_r+0x34c>)
  403a2e:	6819      	ldr	r1, [r3, #0]
  403a30:	4459      	add	r1, fp
  403a32:	6019      	str	r1, [r3, #0]
  403a34:	f000 814d 	beq.w	403cd2 <_malloc_r+0x4e2>
  403a38:	f8d9 0000 	ldr.w	r0, [r9]
  403a3c:	3001      	adds	r0, #1
  403a3e:	bf1b      	ittet	ne
  403a40:	eba2 0a0a 	subne.w	sl, r2, sl
  403a44:	4451      	addne	r1, sl
  403a46:	f8c9 2000 	streq.w	r2, [r9]
  403a4a:	6019      	strne	r1, [r3, #0]
  403a4c:	f012 0107 	ands.w	r1, r2, #7
  403a50:	f000 8115 	beq.w	403c7e <_malloc_r+0x48e>
  403a54:	f1c1 0008 	rsb	r0, r1, #8
  403a58:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403a5c:	4402      	add	r2, r0
  403a5e:	3108      	adds	r1, #8
  403a60:	eb02 090b 	add.w	r9, r2, fp
  403a64:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403a68:	eba1 0909 	sub.w	r9, r1, r9
  403a6c:	4649      	mov	r1, r9
  403a6e:	4628      	mov	r0, r5
  403a70:	9301      	str	r3, [sp, #4]
  403a72:	9200      	str	r2, [sp, #0]
  403a74:	f000 faca 	bl	40400c <_sbrk_r>
  403a78:	1c43      	adds	r3, r0, #1
  403a7a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403a7e:	f000 8143 	beq.w	403d08 <_malloc_r+0x518>
  403a82:	1a80      	subs	r0, r0, r2
  403a84:	4448      	add	r0, r9
  403a86:	f040 0001 	orr.w	r0, r0, #1
  403a8a:	6819      	ldr	r1, [r3, #0]
  403a8c:	60ba      	str	r2, [r7, #8]
  403a8e:	4449      	add	r1, r9
  403a90:	42bc      	cmp	r4, r7
  403a92:	6050      	str	r0, [r2, #4]
  403a94:	6019      	str	r1, [r3, #0]
  403a96:	d017      	beq.n	403ac8 <_malloc_r+0x2d8>
  403a98:	f1b8 0f0f 	cmp.w	r8, #15
  403a9c:	f240 80fb 	bls.w	403c96 <_malloc_r+0x4a6>
  403aa0:	6860      	ldr	r0, [r4, #4]
  403aa2:	f1a8 020c 	sub.w	r2, r8, #12
  403aa6:	f022 0207 	bic.w	r2, r2, #7
  403aaa:	eb04 0e02 	add.w	lr, r4, r2
  403aae:	f000 0001 	and.w	r0, r0, #1
  403ab2:	f04f 0c05 	mov.w	ip, #5
  403ab6:	4310      	orrs	r0, r2
  403ab8:	2a0f      	cmp	r2, #15
  403aba:	6060      	str	r0, [r4, #4]
  403abc:	f8ce c004 	str.w	ip, [lr, #4]
  403ac0:	f8ce c008 	str.w	ip, [lr, #8]
  403ac4:	f200 8117 	bhi.w	403cf6 <_malloc_r+0x506>
  403ac8:	4b1d      	ldr	r3, [pc, #116]	; (403b40 <_malloc_r+0x350>)
  403aca:	68bc      	ldr	r4, [r7, #8]
  403acc:	681a      	ldr	r2, [r3, #0]
  403ace:	4291      	cmp	r1, r2
  403ad0:	bf88      	it	hi
  403ad2:	6019      	strhi	r1, [r3, #0]
  403ad4:	4b1b      	ldr	r3, [pc, #108]	; (403b44 <_malloc_r+0x354>)
  403ad6:	681a      	ldr	r2, [r3, #0]
  403ad8:	4291      	cmp	r1, r2
  403ada:	6862      	ldr	r2, [r4, #4]
  403adc:	bf88      	it	hi
  403ade:	6019      	strhi	r1, [r3, #0]
  403ae0:	f022 0203 	bic.w	r2, r2, #3
  403ae4:	4296      	cmp	r6, r2
  403ae6:	eba2 0306 	sub.w	r3, r2, r6
  403aea:	d801      	bhi.n	403af0 <_malloc_r+0x300>
  403aec:	2b0f      	cmp	r3, #15
  403aee:	dc04      	bgt.n	403afa <_malloc_r+0x30a>
  403af0:	4628      	mov	r0, r5
  403af2:	f000 fa1b 	bl	403f2c <__malloc_unlock>
  403af6:	2400      	movs	r4, #0
  403af8:	e740      	b.n	40397c <_malloc_r+0x18c>
  403afa:	19a2      	adds	r2, r4, r6
  403afc:	f043 0301 	orr.w	r3, r3, #1
  403b00:	f046 0601 	orr.w	r6, r6, #1
  403b04:	6066      	str	r6, [r4, #4]
  403b06:	4628      	mov	r0, r5
  403b08:	60ba      	str	r2, [r7, #8]
  403b0a:	6053      	str	r3, [r2, #4]
  403b0c:	f000 fa0e 	bl	403f2c <__malloc_unlock>
  403b10:	3408      	adds	r4, #8
  403b12:	4620      	mov	r0, r4
  403b14:	b003      	add	sp, #12
  403b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b1a:	2b14      	cmp	r3, #20
  403b1c:	d971      	bls.n	403c02 <_malloc_r+0x412>
  403b1e:	2b54      	cmp	r3, #84	; 0x54
  403b20:	f200 80a3 	bhi.w	403c6a <_malloc_r+0x47a>
  403b24:	0b33      	lsrs	r3, r6, #12
  403b26:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403b2a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403b2e:	00c3      	lsls	r3, r0, #3
  403b30:	e680      	b.n	403834 <_malloc_r+0x44>
  403b32:	bf00      	nop
  403b34:	20400438 	.word	0x20400438
  403b38:	20400bbc 	.word	0x20400bbc
  403b3c:	20400b8c 	.word	0x20400b8c
  403b40:	20400bb4 	.word	0x20400bb4
  403b44:	20400bb8 	.word	0x20400bb8
  403b48:	20400440 	.word	0x20400440
  403b4c:	20400840 	.word	0x20400840
  403b50:	0a5a      	lsrs	r2, r3, #9
  403b52:	2a04      	cmp	r2, #4
  403b54:	d95b      	bls.n	403c0e <_malloc_r+0x41e>
  403b56:	2a14      	cmp	r2, #20
  403b58:	f200 80ae 	bhi.w	403cb8 <_malloc_r+0x4c8>
  403b5c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403b60:	00c9      	lsls	r1, r1, #3
  403b62:	325b      	adds	r2, #91	; 0x5b
  403b64:	eb07 0c01 	add.w	ip, r7, r1
  403b68:	5879      	ldr	r1, [r7, r1]
  403b6a:	f1ac 0c08 	sub.w	ip, ip, #8
  403b6e:	458c      	cmp	ip, r1
  403b70:	f000 8088 	beq.w	403c84 <_malloc_r+0x494>
  403b74:	684a      	ldr	r2, [r1, #4]
  403b76:	f022 0203 	bic.w	r2, r2, #3
  403b7a:	4293      	cmp	r3, r2
  403b7c:	d273      	bcs.n	403c66 <_malloc_r+0x476>
  403b7e:	6889      	ldr	r1, [r1, #8]
  403b80:	458c      	cmp	ip, r1
  403b82:	d1f7      	bne.n	403b74 <_malloc_r+0x384>
  403b84:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403b88:	687b      	ldr	r3, [r7, #4]
  403b8a:	60e2      	str	r2, [r4, #12]
  403b8c:	f8c4 c008 	str.w	ip, [r4, #8]
  403b90:	6094      	str	r4, [r2, #8]
  403b92:	f8cc 400c 	str.w	r4, [ip, #12]
  403b96:	e68f      	b.n	4038b8 <_malloc_r+0xc8>
  403b98:	19a1      	adds	r1, r4, r6
  403b9a:	f046 0c01 	orr.w	ip, r6, #1
  403b9e:	f042 0601 	orr.w	r6, r2, #1
  403ba2:	f8c4 c004 	str.w	ip, [r4, #4]
  403ba6:	4628      	mov	r0, r5
  403ba8:	6179      	str	r1, [r7, #20]
  403baa:	6139      	str	r1, [r7, #16]
  403bac:	f8c1 e00c 	str.w	lr, [r1, #12]
  403bb0:	f8c1 e008 	str.w	lr, [r1, #8]
  403bb4:	604e      	str	r6, [r1, #4]
  403bb6:	50e2      	str	r2, [r4, r3]
  403bb8:	f000 f9b8 	bl	403f2c <__malloc_unlock>
  403bbc:	3408      	adds	r4, #8
  403bbe:	e6dd      	b.n	40397c <_malloc_r+0x18c>
  403bc0:	687b      	ldr	r3, [r7, #4]
  403bc2:	e679      	b.n	4038b8 <_malloc_r+0xc8>
  403bc4:	f108 0801 	add.w	r8, r8, #1
  403bc8:	f018 0f03 	tst.w	r8, #3
  403bcc:	f10c 0c08 	add.w	ip, ip, #8
  403bd0:	f47f ae85 	bne.w	4038de <_malloc_r+0xee>
  403bd4:	e02d      	b.n	403c32 <_malloc_r+0x442>
  403bd6:	68dc      	ldr	r4, [r3, #12]
  403bd8:	42a3      	cmp	r3, r4
  403bda:	bf08      	it	eq
  403bdc:	3002      	addeq	r0, #2
  403bde:	f43f ae3e 	beq.w	40385e <_malloc_r+0x6e>
  403be2:	e6bb      	b.n	40395c <_malloc_r+0x16c>
  403be4:	4419      	add	r1, r3
  403be6:	461c      	mov	r4, r3
  403be8:	684a      	ldr	r2, [r1, #4]
  403bea:	68db      	ldr	r3, [r3, #12]
  403bec:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403bf0:	f042 0201 	orr.w	r2, r2, #1
  403bf4:	604a      	str	r2, [r1, #4]
  403bf6:	4628      	mov	r0, r5
  403bf8:	60f3      	str	r3, [r6, #12]
  403bfa:	609e      	str	r6, [r3, #8]
  403bfc:	f000 f996 	bl	403f2c <__malloc_unlock>
  403c00:	e6bc      	b.n	40397c <_malloc_r+0x18c>
  403c02:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403c06:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403c0a:	00c3      	lsls	r3, r0, #3
  403c0c:	e612      	b.n	403834 <_malloc_r+0x44>
  403c0e:	099a      	lsrs	r2, r3, #6
  403c10:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403c14:	00c9      	lsls	r1, r1, #3
  403c16:	3238      	adds	r2, #56	; 0x38
  403c18:	e7a4      	b.n	403b64 <_malloc_r+0x374>
  403c1a:	42bc      	cmp	r4, r7
  403c1c:	d054      	beq.n	403cc8 <_malloc_r+0x4d8>
  403c1e:	68bc      	ldr	r4, [r7, #8]
  403c20:	6862      	ldr	r2, [r4, #4]
  403c22:	f022 0203 	bic.w	r2, r2, #3
  403c26:	e75d      	b.n	403ae4 <_malloc_r+0x2f4>
  403c28:	f859 3908 	ldr.w	r3, [r9], #-8
  403c2c:	4599      	cmp	r9, r3
  403c2e:	f040 8086 	bne.w	403d3e <_malloc_r+0x54e>
  403c32:	f010 0f03 	tst.w	r0, #3
  403c36:	f100 30ff 	add.w	r0, r0, #4294967295
  403c3a:	d1f5      	bne.n	403c28 <_malloc_r+0x438>
  403c3c:	687b      	ldr	r3, [r7, #4]
  403c3e:	ea23 0304 	bic.w	r3, r3, r4
  403c42:	607b      	str	r3, [r7, #4]
  403c44:	0064      	lsls	r4, r4, #1
  403c46:	429c      	cmp	r4, r3
  403c48:	f63f aec7 	bhi.w	4039da <_malloc_r+0x1ea>
  403c4c:	2c00      	cmp	r4, #0
  403c4e:	f43f aec4 	beq.w	4039da <_malloc_r+0x1ea>
  403c52:	421c      	tst	r4, r3
  403c54:	4640      	mov	r0, r8
  403c56:	f47f ae3e 	bne.w	4038d6 <_malloc_r+0xe6>
  403c5a:	0064      	lsls	r4, r4, #1
  403c5c:	421c      	tst	r4, r3
  403c5e:	f100 0004 	add.w	r0, r0, #4
  403c62:	d0fa      	beq.n	403c5a <_malloc_r+0x46a>
  403c64:	e637      	b.n	4038d6 <_malloc_r+0xe6>
  403c66:	468c      	mov	ip, r1
  403c68:	e78c      	b.n	403b84 <_malloc_r+0x394>
  403c6a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403c6e:	d815      	bhi.n	403c9c <_malloc_r+0x4ac>
  403c70:	0bf3      	lsrs	r3, r6, #15
  403c72:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403c76:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403c7a:	00c3      	lsls	r3, r0, #3
  403c7c:	e5da      	b.n	403834 <_malloc_r+0x44>
  403c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403c82:	e6ed      	b.n	403a60 <_malloc_r+0x270>
  403c84:	687b      	ldr	r3, [r7, #4]
  403c86:	1092      	asrs	r2, r2, #2
  403c88:	2101      	movs	r1, #1
  403c8a:	fa01 f202 	lsl.w	r2, r1, r2
  403c8e:	4313      	orrs	r3, r2
  403c90:	607b      	str	r3, [r7, #4]
  403c92:	4662      	mov	r2, ip
  403c94:	e779      	b.n	403b8a <_malloc_r+0x39a>
  403c96:	2301      	movs	r3, #1
  403c98:	6053      	str	r3, [r2, #4]
  403c9a:	e729      	b.n	403af0 <_malloc_r+0x300>
  403c9c:	f240 5254 	movw	r2, #1364	; 0x554
  403ca0:	4293      	cmp	r3, r2
  403ca2:	d822      	bhi.n	403cea <_malloc_r+0x4fa>
  403ca4:	0cb3      	lsrs	r3, r6, #18
  403ca6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403caa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403cae:	00c3      	lsls	r3, r0, #3
  403cb0:	e5c0      	b.n	403834 <_malloc_r+0x44>
  403cb2:	f103 0b10 	add.w	fp, r3, #16
  403cb6:	e6ae      	b.n	403a16 <_malloc_r+0x226>
  403cb8:	2a54      	cmp	r2, #84	; 0x54
  403cba:	d829      	bhi.n	403d10 <_malloc_r+0x520>
  403cbc:	0b1a      	lsrs	r2, r3, #12
  403cbe:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403cc2:	00c9      	lsls	r1, r1, #3
  403cc4:	326e      	adds	r2, #110	; 0x6e
  403cc6:	e74d      	b.n	403b64 <_malloc_r+0x374>
  403cc8:	4b20      	ldr	r3, [pc, #128]	; (403d4c <_malloc_r+0x55c>)
  403cca:	6819      	ldr	r1, [r3, #0]
  403ccc:	4459      	add	r1, fp
  403cce:	6019      	str	r1, [r3, #0]
  403cd0:	e6b2      	b.n	403a38 <_malloc_r+0x248>
  403cd2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403cd6:	2800      	cmp	r0, #0
  403cd8:	f47f aeae 	bne.w	403a38 <_malloc_r+0x248>
  403cdc:	eb08 030b 	add.w	r3, r8, fp
  403ce0:	68ba      	ldr	r2, [r7, #8]
  403ce2:	f043 0301 	orr.w	r3, r3, #1
  403ce6:	6053      	str	r3, [r2, #4]
  403ce8:	e6ee      	b.n	403ac8 <_malloc_r+0x2d8>
  403cea:	207f      	movs	r0, #127	; 0x7f
  403cec:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403cf0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403cf4:	e59e      	b.n	403834 <_malloc_r+0x44>
  403cf6:	f104 0108 	add.w	r1, r4, #8
  403cfa:	4628      	mov	r0, r5
  403cfc:	9300      	str	r3, [sp, #0]
  403cfe:	f002 ffa7 	bl	406c50 <_free_r>
  403d02:	9b00      	ldr	r3, [sp, #0]
  403d04:	6819      	ldr	r1, [r3, #0]
  403d06:	e6df      	b.n	403ac8 <_malloc_r+0x2d8>
  403d08:	2001      	movs	r0, #1
  403d0a:	f04f 0900 	mov.w	r9, #0
  403d0e:	e6bc      	b.n	403a8a <_malloc_r+0x29a>
  403d10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403d14:	d805      	bhi.n	403d22 <_malloc_r+0x532>
  403d16:	0bda      	lsrs	r2, r3, #15
  403d18:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403d1c:	00c9      	lsls	r1, r1, #3
  403d1e:	3277      	adds	r2, #119	; 0x77
  403d20:	e720      	b.n	403b64 <_malloc_r+0x374>
  403d22:	f240 5154 	movw	r1, #1364	; 0x554
  403d26:	428a      	cmp	r2, r1
  403d28:	d805      	bhi.n	403d36 <_malloc_r+0x546>
  403d2a:	0c9a      	lsrs	r2, r3, #18
  403d2c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403d30:	00c9      	lsls	r1, r1, #3
  403d32:	327c      	adds	r2, #124	; 0x7c
  403d34:	e716      	b.n	403b64 <_malloc_r+0x374>
  403d36:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403d3a:	227e      	movs	r2, #126	; 0x7e
  403d3c:	e712      	b.n	403b64 <_malloc_r+0x374>
  403d3e:	687b      	ldr	r3, [r7, #4]
  403d40:	e780      	b.n	403c44 <_malloc_r+0x454>
  403d42:	08f0      	lsrs	r0, r6, #3
  403d44:	f106 0308 	add.w	r3, r6, #8
  403d48:	e600      	b.n	40394c <_malloc_r+0x15c>
  403d4a:	bf00      	nop
  403d4c:	20400b8c 	.word	0x20400b8c

00403d50 <memcpy>:
  403d50:	4684      	mov	ip, r0
  403d52:	ea41 0300 	orr.w	r3, r1, r0
  403d56:	f013 0303 	ands.w	r3, r3, #3
  403d5a:	d16d      	bne.n	403e38 <memcpy+0xe8>
  403d5c:	3a40      	subs	r2, #64	; 0x40
  403d5e:	d341      	bcc.n	403de4 <memcpy+0x94>
  403d60:	f851 3b04 	ldr.w	r3, [r1], #4
  403d64:	f840 3b04 	str.w	r3, [r0], #4
  403d68:	f851 3b04 	ldr.w	r3, [r1], #4
  403d6c:	f840 3b04 	str.w	r3, [r0], #4
  403d70:	f851 3b04 	ldr.w	r3, [r1], #4
  403d74:	f840 3b04 	str.w	r3, [r0], #4
  403d78:	f851 3b04 	ldr.w	r3, [r1], #4
  403d7c:	f840 3b04 	str.w	r3, [r0], #4
  403d80:	f851 3b04 	ldr.w	r3, [r1], #4
  403d84:	f840 3b04 	str.w	r3, [r0], #4
  403d88:	f851 3b04 	ldr.w	r3, [r1], #4
  403d8c:	f840 3b04 	str.w	r3, [r0], #4
  403d90:	f851 3b04 	ldr.w	r3, [r1], #4
  403d94:	f840 3b04 	str.w	r3, [r0], #4
  403d98:	f851 3b04 	ldr.w	r3, [r1], #4
  403d9c:	f840 3b04 	str.w	r3, [r0], #4
  403da0:	f851 3b04 	ldr.w	r3, [r1], #4
  403da4:	f840 3b04 	str.w	r3, [r0], #4
  403da8:	f851 3b04 	ldr.w	r3, [r1], #4
  403dac:	f840 3b04 	str.w	r3, [r0], #4
  403db0:	f851 3b04 	ldr.w	r3, [r1], #4
  403db4:	f840 3b04 	str.w	r3, [r0], #4
  403db8:	f851 3b04 	ldr.w	r3, [r1], #4
  403dbc:	f840 3b04 	str.w	r3, [r0], #4
  403dc0:	f851 3b04 	ldr.w	r3, [r1], #4
  403dc4:	f840 3b04 	str.w	r3, [r0], #4
  403dc8:	f851 3b04 	ldr.w	r3, [r1], #4
  403dcc:	f840 3b04 	str.w	r3, [r0], #4
  403dd0:	f851 3b04 	ldr.w	r3, [r1], #4
  403dd4:	f840 3b04 	str.w	r3, [r0], #4
  403dd8:	f851 3b04 	ldr.w	r3, [r1], #4
  403ddc:	f840 3b04 	str.w	r3, [r0], #4
  403de0:	3a40      	subs	r2, #64	; 0x40
  403de2:	d2bd      	bcs.n	403d60 <memcpy+0x10>
  403de4:	3230      	adds	r2, #48	; 0x30
  403de6:	d311      	bcc.n	403e0c <memcpy+0xbc>
  403de8:	f851 3b04 	ldr.w	r3, [r1], #4
  403dec:	f840 3b04 	str.w	r3, [r0], #4
  403df0:	f851 3b04 	ldr.w	r3, [r1], #4
  403df4:	f840 3b04 	str.w	r3, [r0], #4
  403df8:	f851 3b04 	ldr.w	r3, [r1], #4
  403dfc:	f840 3b04 	str.w	r3, [r0], #4
  403e00:	f851 3b04 	ldr.w	r3, [r1], #4
  403e04:	f840 3b04 	str.w	r3, [r0], #4
  403e08:	3a10      	subs	r2, #16
  403e0a:	d2ed      	bcs.n	403de8 <memcpy+0x98>
  403e0c:	320c      	adds	r2, #12
  403e0e:	d305      	bcc.n	403e1c <memcpy+0xcc>
  403e10:	f851 3b04 	ldr.w	r3, [r1], #4
  403e14:	f840 3b04 	str.w	r3, [r0], #4
  403e18:	3a04      	subs	r2, #4
  403e1a:	d2f9      	bcs.n	403e10 <memcpy+0xc0>
  403e1c:	3204      	adds	r2, #4
  403e1e:	d008      	beq.n	403e32 <memcpy+0xe2>
  403e20:	07d2      	lsls	r2, r2, #31
  403e22:	bf1c      	itt	ne
  403e24:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403e28:	f800 3b01 	strbne.w	r3, [r0], #1
  403e2c:	d301      	bcc.n	403e32 <memcpy+0xe2>
  403e2e:	880b      	ldrh	r3, [r1, #0]
  403e30:	8003      	strh	r3, [r0, #0]
  403e32:	4660      	mov	r0, ip
  403e34:	4770      	bx	lr
  403e36:	bf00      	nop
  403e38:	2a08      	cmp	r2, #8
  403e3a:	d313      	bcc.n	403e64 <memcpy+0x114>
  403e3c:	078b      	lsls	r3, r1, #30
  403e3e:	d08d      	beq.n	403d5c <memcpy+0xc>
  403e40:	f010 0303 	ands.w	r3, r0, #3
  403e44:	d08a      	beq.n	403d5c <memcpy+0xc>
  403e46:	f1c3 0304 	rsb	r3, r3, #4
  403e4a:	1ad2      	subs	r2, r2, r3
  403e4c:	07db      	lsls	r3, r3, #31
  403e4e:	bf1c      	itt	ne
  403e50:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403e54:	f800 3b01 	strbne.w	r3, [r0], #1
  403e58:	d380      	bcc.n	403d5c <memcpy+0xc>
  403e5a:	f831 3b02 	ldrh.w	r3, [r1], #2
  403e5e:	f820 3b02 	strh.w	r3, [r0], #2
  403e62:	e77b      	b.n	403d5c <memcpy+0xc>
  403e64:	3a04      	subs	r2, #4
  403e66:	d3d9      	bcc.n	403e1c <memcpy+0xcc>
  403e68:	3a01      	subs	r2, #1
  403e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
  403e6e:	f800 3b01 	strb.w	r3, [r0], #1
  403e72:	d2f9      	bcs.n	403e68 <memcpy+0x118>
  403e74:	780b      	ldrb	r3, [r1, #0]
  403e76:	7003      	strb	r3, [r0, #0]
  403e78:	784b      	ldrb	r3, [r1, #1]
  403e7a:	7043      	strb	r3, [r0, #1]
  403e7c:	788b      	ldrb	r3, [r1, #2]
  403e7e:	7083      	strb	r3, [r0, #2]
  403e80:	4660      	mov	r0, ip
  403e82:	4770      	bx	lr

00403e84 <memset>:
  403e84:	b470      	push	{r4, r5, r6}
  403e86:	0786      	lsls	r6, r0, #30
  403e88:	d046      	beq.n	403f18 <memset+0x94>
  403e8a:	1e54      	subs	r4, r2, #1
  403e8c:	2a00      	cmp	r2, #0
  403e8e:	d041      	beq.n	403f14 <memset+0x90>
  403e90:	b2ca      	uxtb	r2, r1
  403e92:	4603      	mov	r3, r0
  403e94:	e002      	b.n	403e9c <memset+0x18>
  403e96:	f114 34ff 	adds.w	r4, r4, #4294967295
  403e9a:	d33b      	bcc.n	403f14 <memset+0x90>
  403e9c:	f803 2b01 	strb.w	r2, [r3], #1
  403ea0:	079d      	lsls	r5, r3, #30
  403ea2:	d1f8      	bne.n	403e96 <memset+0x12>
  403ea4:	2c03      	cmp	r4, #3
  403ea6:	d92e      	bls.n	403f06 <memset+0x82>
  403ea8:	b2cd      	uxtb	r5, r1
  403eaa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403eae:	2c0f      	cmp	r4, #15
  403eb0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403eb4:	d919      	bls.n	403eea <memset+0x66>
  403eb6:	f103 0210 	add.w	r2, r3, #16
  403eba:	4626      	mov	r6, r4
  403ebc:	3e10      	subs	r6, #16
  403ebe:	2e0f      	cmp	r6, #15
  403ec0:	f842 5c10 	str.w	r5, [r2, #-16]
  403ec4:	f842 5c0c 	str.w	r5, [r2, #-12]
  403ec8:	f842 5c08 	str.w	r5, [r2, #-8]
  403ecc:	f842 5c04 	str.w	r5, [r2, #-4]
  403ed0:	f102 0210 	add.w	r2, r2, #16
  403ed4:	d8f2      	bhi.n	403ebc <memset+0x38>
  403ed6:	f1a4 0210 	sub.w	r2, r4, #16
  403eda:	f022 020f 	bic.w	r2, r2, #15
  403ede:	f004 040f 	and.w	r4, r4, #15
  403ee2:	3210      	adds	r2, #16
  403ee4:	2c03      	cmp	r4, #3
  403ee6:	4413      	add	r3, r2
  403ee8:	d90d      	bls.n	403f06 <memset+0x82>
  403eea:	461e      	mov	r6, r3
  403eec:	4622      	mov	r2, r4
  403eee:	3a04      	subs	r2, #4
  403ef0:	2a03      	cmp	r2, #3
  403ef2:	f846 5b04 	str.w	r5, [r6], #4
  403ef6:	d8fa      	bhi.n	403eee <memset+0x6a>
  403ef8:	1f22      	subs	r2, r4, #4
  403efa:	f022 0203 	bic.w	r2, r2, #3
  403efe:	3204      	adds	r2, #4
  403f00:	4413      	add	r3, r2
  403f02:	f004 0403 	and.w	r4, r4, #3
  403f06:	b12c      	cbz	r4, 403f14 <memset+0x90>
  403f08:	b2c9      	uxtb	r1, r1
  403f0a:	441c      	add	r4, r3
  403f0c:	f803 1b01 	strb.w	r1, [r3], #1
  403f10:	429c      	cmp	r4, r3
  403f12:	d1fb      	bne.n	403f0c <memset+0x88>
  403f14:	bc70      	pop	{r4, r5, r6}
  403f16:	4770      	bx	lr
  403f18:	4614      	mov	r4, r2
  403f1a:	4603      	mov	r3, r0
  403f1c:	e7c2      	b.n	403ea4 <memset+0x20>
  403f1e:	bf00      	nop

00403f20 <__malloc_lock>:
  403f20:	4801      	ldr	r0, [pc, #4]	; (403f28 <__malloc_lock+0x8>)
  403f22:	f003 b92f 	b.w	407184 <__retarget_lock_acquire_recursive>
  403f26:	bf00      	nop
  403f28:	20400cac 	.word	0x20400cac

00403f2c <__malloc_unlock>:
  403f2c:	4801      	ldr	r0, [pc, #4]	; (403f34 <__malloc_unlock+0x8>)
  403f2e:	f003 b92b 	b.w	407188 <__retarget_lock_release_recursive>
  403f32:	bf00      	nop
  403f34:	20400cac 	.word	0x20400cac

00403f38 <printf>:
  403f38:	b40f      	push	{r0, r1, r2, r3}
  403f3a:	b500      	push	{lr}
  403f3c:	4907      	ldr	r1, [pc, #28]	; (403f5c <printf+0x24>)
  403f3e:	b083      	sub	sp, #12
  403f40:	ab04      	add	r3, sp, #16
  403f42:	6808      	ldr	r0, [r1, #0]
  403f44:	f853 2b04 	ldr.w	r2, [r3], #4
  403f48:	6881      	ldr	r1, [r0, #8]
  403f4a:	9301      	str	r3, [sp, #4]
  403f4c:	f000 f9c6 	bl	4042dc <_vfprintf_r>
  403f50:	b003      	add	sp, #12
  403f52:	f85d eb04 	ldr.w	lr, [sp], #4
  403f56:	b004      	add	sp, #16
  403f58:	4770      	bx	lr
  403f5a:	bf00      	nop
  403f5c:	2040000c 	.word	0x2040000c

00403f60 <_puts_r>:
  403f60:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f62:	4605      	mov	r5, r0
  403f64:	b089      	sub	sp, #36	; 0x24
  403f66:	4608      	mov	r0, r1
  403f68:	460c      	mov	r4, r1
  403f6a:	f000 f949 	bl	404200 <strlen>
  403f6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403f70:	4f21      	ldr	r7, [pc, #132]	; (403ff8 <_puts_r+0x98>)
  403f72:	9404      	str	r4, [sp, #16]
  403f74:	2601      	movs	r6, #1
  403f76:	1c44      	adds	r4, r0, #1
  403f78:	a904      	add	r1, sp, #16
  403f7a:	2202      	movs	r2, #2
  403f7c:	9403      	str	r4, [sp, #12]
  403f7e:	9005      	str	r0, [sp, #20]
  403f80:	68ac      	ldr	r4, [r5, #8]
  403f82:	9706      	str	r7, [sp, #24]
  403f84:	9607      	str	r6, [sp, #28]
  403f86:	9101      	str	r1, [sp, #4]
  403f88:	9202      	str	r2, [sp, #8]
  403f8a:	b353      	cbz	r3, 403fe2 <_puts_r+0x82>
  403f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403f8e:	f013 0f01 	tst.w	r3, #1
  403f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f96:	b29a      	uxth	r2, r3
  403f98:	d101      	bne.n	403f9e <_puts_r+0x3e>
  403f9a:	0590      	lsls	r0, r2, #22
  403f9c:	d525      	bpl.n	403fea <_puts_r+0x8a>
  403f9e:	0491      	lsls	r1, r2, #18
  403fa0:	d406      	bmi.n	403fb0 <_puts_r+0x50>
  403fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403fa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  403fac:	81a3      	strh	r3, [r4, #12]
  403fae:	6662      	str	r2, [r4, #100]	; 0x64
  403fb0:	4628      	mov	r0, r5
  403fb2:	aa01      	add	r2, sp, #4
  403fb4:	4621      	mov	r1, r4
  403fb6:	f002 ff31 	bl	406e1c <__sfvwrite_r>
  403fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403fbc:	2800      	cmp	r0, #0
  403fbe:	bf0c      	ite	eq
  403fc0:	250a      	moveq	r5, #10
  403fc2:	f04f 35ff 	movne.w	r5, #4294967295
  403fc6:	07da      	lsls	r2, r3, #31
  403fc8:	d402      	bmi.n	403fd0 <_puts_r+0x70>
  403fca:	89a3      	ldrh	r3, [r4, #12]
  403fcc:	059b      	lsls	r3, r3, #22
  403fce:	d502      	bpl.n	403fd6 <_puts_r+0x76>
  403fd0:	4628      	mov	r0, r5
  403fd2:	b009      	add	sp, #36	; 0x24
  403fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403fd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403fd8:	f003 f8d6 	bl	407188 <__retarget_lock_release_recursive>
  403fdc:	4628      	mov	r0, r5
  403fde:	b009      	add	sp, #36	; 0x24
  403fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403fe2:	4628      	mov	r0, r5
  403fe4:	f002 fd92 	bl	406b0c <__sinit>
  403fe8:	e7d0      	b.n	403f8c <_puts_r+0x2c>
  403fea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403fec:	f003 f8ca 	bl	407184 <__retarget_lock_acquire_recursive>
  403ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403ff4:	b29a      	uxth	r2, r3
  403ff6:	e7d2      	b.n	403f9e <_puts_r+0x3e>
  403ff8:	004088a8 	.word	0x004088a8

00403ffc <puts>:
  403ffc:	4b02      	ldr	r3, [pc, #8]	; (404008 <puts+0xc>)
  403ffe:	4601      	mov	r1, r0
  404000:	6818      	ldr	r0, [r3, #0]
  404002:	f7ff bfad 	b.w	403f60 <_puts_r>
  404006:	bf00      	nop
  404008:	2040000c 	.word	0x2040000c

0040400c <_sbrk_r>:
  40400c:	b538      	push	{r3, r4, r5, lr}
  40400e:	4c07      	ldr	r4, [pc, #28]	; (40402c <_sbrk_r+0x20>)
  404010:	2300      	movs	r3, #0
  404012:	4605      	mov	r5, r0
  404014:	4608      	mov	r0, r1
  404016:	6023      	str	r3, [r4, #0]
  404018:	f7fc fe7c 	bl	400d14 <_sbrk>
  40401c:	1c43      	adds	r3, r0, #1
  40401e:	d000      	beq.n	404022 <_sbrk_r+0x16>
  404020:	bd38      	pop	{r3, r4, r5, pc}
  404022:	6823      	ldr	r3, [r4, #0]
  404024:	2b00      	cmp	r3, #0
  404026:	d0fb      	beq.n	404020 <_sbrk_r+0x14>
  404028:	602b      	str	r3, [r5, #0]
  40402a:	bd38      	pop	{r3, r4, r5, pc}
  40402c:	20400cc0 	.word	0x20400cc0

00404030 <setbuf>:
  404030:	2900      	cmp	r1, #0
  404032:	bf0c      	ite	eq
  404034:	2202      	moveq	r2, #2
  404036:	2200      	movne	r2, #0
  404038:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40403c:	f000 b800 	b.w	404040 <setvbuf>

00404040 <setvbuf>:
  404040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404044:	4c61      	ldr	r4, [pc, #388]	; (4041cc <setvbuf+0x18c>)
  404046:	6825      	ldr	r5, [r4, #0]
  404048:	b083      	sub	sp, #12
  40404a:	4604      	mov	r4, r0
  40404c:	460f      	mov	r7, r1
  40404e:	4690      	mov	r8, r2
  404050:	461e      	mov	r6, r3
  404052:	b115      	cbz	r5, 40405a <setvbuf+0x1a>
  404054:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404056:	2b00      	cmp	r3, #0
  404058:	d064      	beq.n	404124 <setvbuf+0xe4>
  40405a:	f1b8 0f02 	cmp.w	r8, #2
  40405e:	d006      	beq.n	40406e <setvbuf+0x2e>
  404060:	f1b8 0f01 	cmp.w	r8, #1
  404064:	f200 809f 	bhi.w	4041a6 <setvbuf+0x166>
  404068:	2e00      	cmp	r6, #0
  40406a:	f2c0 809c 	blt.w	4041a6 <setvbuf+0x166>
  40406e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404070:	07d8      	lsls	r0, r3, #31
  404072:	d534      	bpl.n	4040de <setvbuf+0x9e>
  404074:	4621      	mov	r1, r4
  404076:	4628      	mov	r0, r5
  404078:	f002 fcf0 	bl	406a5c <_fflush_r>
  40407c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40407e:	b141      	cbz	r1, 404092 <setvbuf+0x52>
  404080:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404084:	4299      	cmp	r1, r3
  404086:	d002      	beq.n	40408e <setvbuf+0x4e>
  404088:	4628      	mov	r0, r5
  40408a:	f002 fde1 	bl	406c50 <_free_r>
  40408e:	2300      	movs	r3, #0
  404090:	6323      	str	r3, [r4, #48]	; 0x30
  404092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404096:	2200      	movs	r2, #0
  404098:	61a2      	str	r2, [r4, #24]
  40409a:	6062      	str	r2, [r4, #4]
  40409c:	061a      	lsls	r2, r3, #24
  40409e:	d43a      	bmi.n	404116 <setvbuf+0xd6>
  4040a0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4040a4:	f023 0303 	bic.w	r3, r3, #3
  4040a8:	f1b8 0f02 	cmp.w	r8, #2
  4040ac:	81a3      	strh	r3, [r4, #12]
  4040ae:	d01d      	beq.n	4040ec <setvbuf+0xac>
  4040b0:	ab01      	add	r3, sp, #4
  4040b2:	466a      	mov	r2, sp
  4040b4:	4621      	mov	r1, r4
  4040b6:	4628      	mov	r0, r5
  4040b8:	f003 f868 	bl	40718c <__swhatbuf_r>
  4040bc:	89a3      	ldrh	r3, [r4, #12]
  4040be:	4318      	orrs	r0, r3
  4040c0:	81a0      	strh	r0, [r4, #12]
  4040c2:	2e00      	cmp	r6, #0
  4040c4:	d132      	bne.n	40412c <setvbuf+0xec>
  4040c6:	9e00      	ldr	r6, [sp, #0]
  4040c8:	4630      	mov	r0, r6
  4040ca:	f7ff fb81 	bl	4037d0 <malloc>
  4040ce:	4607      	mov	r7, r0
  4040d0:	2800      	cmp	r0, #0
  4040d2:	d06b      	beq.n	4041ac <setvbuf+0x16c>
  4040d4:	89a3      	ldrh	r3, [r4, #12]
  4040d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040da:	81a3      	strh	r3, [r4, #12]
  4040dc:	e028      	b.n	404130 <setvbuf+0xf0>
  4040de:	89a3      	ldrh	r3, [r4, #12]
  4040e0:	0599      	lsls	r1, r3, #22
  4040e2:	d4c7      	bmi.n	404074 <setvbuf+0x34>
  4040e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4040e6:	f003 f84d 	bl	407184 <__retarget_lock_acquire_recursive>
  4040ea:	e7c3      	b.n	404074 <setvbuf+0x34>
  4040ec:	2500      	movs	r5, #0
  4040ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4040f0:	2600      	movs	r6, #0
  4040f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4040f6:	f043 0302 	orr.w	r3, r3, #2
  4040fa:	2001      	movs	r0, #1
  4040fc:	60a6      	str	r6, [r4, #8]
  4040fe:	07ce      	lsls	r6, r1, #31
  404100:	81a3      	strh	r3, [r4, #12]
  404102:	6022      	str	r2, [r4, #0]
  404104:	6122      	str	r2, [r4, #16]
  404106:	6160      	str	r0, [r4, #20]
  404108:	d401      	bmi.n	40410e <setvbuf+0xce>
  40410a:	0598      	lsls	r0, r3, #22
  40410c:	d53e      	bpl.n	40418c <setvbuf+0x14c>
  40410e:	4628      	mov	r0, r5
  404110:	b003      	add	sp, #12
  404112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404116:	6921      	ldr	r1, [r4, #16]
  404118:	4628      	mov	r0, r5
  40411a:	f002 fd99 	bl	406c50 <_free_r>
  40411e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404122:	e7bd      	b.n	4040a0 <setvbuf+0x60>
  404124:	4628      	mov	r0, r5
  404126:	f002 fcf1 	bl	406b0c <__sinit>
  40412a:	e796      	b.n	40405a <setvbuf+0x1a>
  40412c:	2f00      	cmp	r7, #0
  40412e:	d0cb      	beq.n	4040c8 <setvbuf+0x88>
  404130:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404132:	2b00      	cmp	r3, #0
  404134:	d033      	beq.n	40419e <setvbuf+0x15e>
  404136:	9b00      	ldr	r3, [sp, #0]
  404138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40413c:	6027      	str	r7, [r4, #0]
  40413e:	429e      	cmp	r6, r3
  404140:	bf1c      	itt	ne
  404142:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404146:	81a2      	strhne	r2, [r4, #12]
  404148:	f1b8 0f01 	cmp.w	r8, #1
  40414c:	bf04      	itt	eq
  40414e:	f042 0201 	orreq.w	r2, r2, #1
  404152:	81a2      	strheq	r2, [r4, #12]
  404154:	b292      	uxth	r2, r2
  404156:	f012 0308 	ands.w	r3, r2, #8
  40415a:	6127      	str	r7, [r4, #16]
  40415c:	6166      	str	r6, [r4, #20]
  40415e:	d00e      	beq.n	40417e <setvbuf+0x13e>
  404160:	07d1      	lsls	r1, r2, #31
  404162:	d51a      	bpl.n	40419a <setvbuf+0x15a>
  404164:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404166:	4276      	negs	r6, r6
  404168:	2300      	movs	r3, #0
  40416a:	f015 0501 	ands.w	r5, r5, #1
  40416e:	61a6      	str	r6, [r4, #24]
  404170:	60a3      	str	r3, [r4, #8]
  404172:	d009      	beq.n	404188 <setvbuf+0x148>
  404174:	2500      	movs	r5, #0
  404176:	4628      	mov	r0, r5
  404178:	b003      	add	sp, #12
  40417a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40417e:	60a3      	str	r3, [r4, #8]
  404180:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404182:	f015 0501 	ands.w	r5, r5, #1
  404186:	d1f5      	bne.n	404174 <setvbuf+0x134>
  404188:	0593      	lsls	r3, r2, #22
  40418a:	d4c0      	bmi.n	40410e <setvbuf+0xce>
  40418c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40418e:	f002 fffb 	bl	407188 <__retarget_lock_release_recursive>
  404192:	4628      	mov	r0, r5
  404194:	b003      	add	sp, #12
  404196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40419a:	60a6      	str	r6, [r4, #8]
  40419c:	e7f0      	b.n	404180 <setvbuf+0x140>
  40419e:	4628      	mov	r0, r5
  4041a0:	f002 fcb4 	bl	406b0c <__sinit>
  4041a4:	e7c7      	b.n	404136 <setvbuf+0xf6>
  4041a6:	f04f 35ff 	mov.w	r5, #4294967295
  4041aa:	e7b0      	b.n	40410e <setvbuf+0xce>
  4041ac:	f8dd 9000 	ldr.w	r9, [sp]
  4041b0:	45b1      	cmp	r9, r6
  4041b2:	d004      	beq.n	4041be <setvbuf+0x17e>
  4041b4:	4648      	mov	r0, r9
  4041b6:	f7ff fb0b 	bl	4037d0 <malloc>
  4041ba:	4607      	mov	r7, r0
  4041bc:	b920      	cbnz	r0, 4041c8 <setvbuf+0x188>
  4041be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041c2:	f04f 35ff 	mov.w	r5, #4294967295
  4041c6:	e792      	b.n	4040ee <setvbuf+0xae>
  4041c8:	464e      	mov	r6, r9
  4041ca:	e783      	b.n	4040d4 <setvbuf+0x94>
  4041cc:	2040000c 	.word	0x2040000c
	...

00404200 <strlen>:
  404200:	f890 f000 	pld	[r0]
  404204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404208:	f020 0107 	bic.w	r1, r0, #7
  40420c:	f06f 0c00 	mvn.w	ip, #0
  404210:	f010 0407 	ands.w	r4, r0, #7
  404214:	f891 f020 	pld	[r1, #32]
  404218:	f040 8049 	bne.w	4042ae <strlen+0xae>
  40421c:	f04f 0400 	mov.w	r4, #0
  404220:	f06f 0007 	mvn.w	r0, #7
  404224:	e9d1 2300 	ldrd	r2, r3, [r1]
  404228:	f891 f040 	pld	[r1, #64]	; 0x40
  40422c:	f100 0008 	add.w	r0, r0, #8
  404230:	fa82 f24c 	uadd8	r2, r2, ip
  404234:	faa4 f28c 	sel	r2, r4, ip
  404238:	fa83 f34c 	uadd8	r3, r3, ip
  40423c:	faa2 f38c 	sel	r3, r2, ip
  404240:	bb4b      	cbnz	r3, 404296 <strlen+0x96>
  404242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404246:	fa82 f24c 	uadd8	r2, r2, ip
  40424a:	f100 0008 	add.w	r0, r0, #8
  40424e:	faa4 f28c 	sel	r2, r4, ip
  404252:	fa83 f34c 	uadd8	r3, r3, ip
  404256:	faa2 f38c 	sel	r3, r2, ip
  40425a:	b9e3      	cbnz	r3, 404296 <strlen+0x96>
  40425c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404260:	fa82 f24c 	uadd8	r2, r2, ip
  404264:	f100 0008 	add.w	r0, r0, #8
  404268:	faa4 f28c 	sel	r2, r4, ip
  40426c:	fa83 f34c 	uadd8	r3, r3, ip
  404270:	faa2 f38c 	sel	r3, r2, ip
  404274:	b97b      	cbnz	r3, 404296 <strlen+0x96>
  404276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40427a:	f101 0120 	add.w	r1, r1, #32
  40427e:	fa82 f24c 	uadd8	r2, r2, ip
  404282:	f100 0008 	add.w	r0, r0, #8
  404286:	faa4 f28c 	sel	r2, r4, ip
  40428a:	fa83 f34c 	uadd8	r3, r3, ip
  40428e:	faa2 f38c 	sel	r3, r2, ip
  404292:	2b00      	cmp	r3, #0
  404294:	d0c6      	beq.n	404224 <strlen+0x24>
  404296:	2a00      	cmp	r2, #0
  404298:	bf04      	itt	eq
  40429a:	3004      	addeq	r0, #4
  40429c:	461a      	moveq	r2, r3
  40429e:	ba12      	rev	r2, r2
  4042a0:	fab2 f282 	clz	r2, r2
  4042a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4042a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4042ac:	4770      	bx	lr
  4042ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4042b2:	f004 0503 	and.w	r5, r4, #3
  4042b6:	f1c4 0000 	rsb	r0, r4, #0
  4042ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4042be:	f014 0f04 	tst.w	r4, #4
  4042c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4042c6:	fa0c f505 	lsl.w	r5, ip, r5
  4042ca:	ea62 0205 	orn	r2, r2, r5
  4042ce:	bf1c      	itt	ne
  4042d0:	ea63 0305 	ornne	r3, r3, r5
  4042d4:	4662      	movne	r2, ip
  4042d6:	f04f 0400 	mov.w	r4, #0
  4042da:	e7a9      	b.n	404230 <strlen+0x30>

004042dc <_vfprintf_r>:
  4042dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042e0:	b0c1      	sub	sp, #260	; 0x104
  4042e2:	461d      	mov	r5, r3
  4042e4:	468a      	mov	sl, r1
  4042e6:	4691      	mov	r9, r2
  4042e8:	4604      	mov	r4, r0
  4042ea:	9008      	str	r0, [sp, #32]
  4042ec:	f002 ff38 	bl	407160 <_localeconv_r>
  4042f0:	6803      	ldr	r3, [r0, #0]
  4042f2:	9315      	str	r3, [sp, #84]	; 0x54
  4042f4:	4618      	mov	r0, r3
  4042f6:	f7ff ff83 	bl	404200 <strlen>
  4042fa:	950e      	str	r5, [sp, #56]	; 0x38
  4042fc:	9014      	str	r0, [sp, #80]	; 0x50
  4042fe:	b11c      	cbz	r4, 404308 <_vfprintf_r+0x2c>
  404300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404302:	2b00      	cmp	r3, #0
  404304:	f000 825f 	beq.w	4047c6 <_vfprintf_r+0x4ea>
  404308:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40430c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404310:	f013 0f01 	tst.w	r3, #1
  404314:	b293      	uxth	r3, r2
  404316:	d102      	bne.n	40431e <_vfprintf_r+0x42>
  404318:	0599      	lsls	r1, r3, #22
  40431a:	f140 8275 	bpl.w	404808 <_vfprintf_r+0x52c>
  40431e:	049f      	lsls	r7, r3, #18
  404320:	d40a      	bmi.n	404338 <_vfprintf_r+0x5c>
  404322:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  404326:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40432a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40432e:	f8aa 300c 	strh.w	r3, [sl, #12]
  404332:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  404336:	b29b      	uxth	r3, r3
  404338:	071e      	lsls	r6, r3, #28
  40433a:	f140 8223 	bpl.w	404784 <_vfprintf_r+0x4a8>
  40433e:	f8da 2010 	ldr.w	r2, [sl, #16]
  404342:	2a00      	cmp	r2, #0
  404344:	f000 821e 	beq.w	404784 <_vfprintf_r+0x4a8>
  404348:	f003 021a 	and.w	r2, r3, #26
  40434c:	2a0a      	cmp	r2, #10
  40434e:	f000 823e 	beq.w	4047ce <_vfprintf_r+0x4f2>
  404352:	2300      	movs	r3, #0
  404354:	4618      	mov	r0, r3
  404356:	9311      	str	r3, [sp, #68]	; 0x44
  404358:	9313      	str	r3, [sp, #76]	; 0x4c
  40435a:	9312      	str	r3, [sp, #72]	; 0x48
  40435c:	9325      	str	r3, [sp, #148]	; 0x94
  40435e:	9324      	str	r3, [sp, #144]	; 0x90
  404360:	9318      	str	r3, [sp, #96]	; 0x60
  404362:	9319      	str	r3, [sp, #100]	; 0x64
  404364:	930b      	str	r3, [sp, #44]	; 0x2c
  404366:	ab30      	add	r3, sp, #192	; 0xc0
  404368:	9323      	str	r3, [sp, #140]	; 0x8c
  40436a:	4698      	mov	r8, r3
  40436c:	9016      	str	r0, [sp, #88]	; 0x58
  40436e:	9017      	str	r0, [sp, #92]	; 0x5c
  404370:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  404374:	f899 3000 	ldrb.w	r3, [r9]
  404378:	464c      	mov	r4, r9
  40437a:	b1eb      	cbz	r3, 4043b8 <_vfprintf_r+0xdc>
  40437c:	2b25      	cmp	r3, #37	; 0x25
  40437e:	d102      	bne.n	404386 <_vfprintf_r+0xaa>
  404380:	e01a      	b.n	4043b8 <_vfprintf_r+0xdc>
  404382:	2b25      	cmp	r3, #37	; 0x25
  404384:	d003      	beq.n	40438e <_vfprintf_r+0xb2>
  404386:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40438a:	2b00      	cmp	r3, #0
  40438c:	d1f9      	bne.n	404382 <_vfprintf_r+0xa6>
  40438e:	eba4 0509 	sub.w	r5, r4, r9
  404392:	b18d      	cbz	r5, 4043b8 <_vfprintf_r+0xdc>
  404394:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404396:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404398:	f8c8 9000 	str.w	r9, [r8]
  40439c:	3301      	adds	r3, #1
  40439e:	442a      	add	r2, r5
  4043a0:	2b07      	cmp	r3, #7
  4043a2:	f8c8 5004 	str.w	r5, [r8, #4]
  4043a6:	9225      	str	r2, [sp, #148]	; 0x94
  4043a8:	9324      	str	r3, [sp, #144]	; 0x90
  4043aa:	f300 8201 	bgt.w	4047b0 <_vfprintf_r+0x4d4>
  4043ae:	f108 0808 	add.w	r8, r8, #8
  4043b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4043b4:	442b      	add	r3, r5
  4043b6:	930b      	str	r3, [sp, #44]	; 0x2c
  4043b8:	7823      	ldrb	r3, [r4, #0]
  4043ba:	2b00      	cmp	r3, #0
  4043bc:	f000 83f0 	beq.w	404ba0 <_vfprintf_r+0x8c4>
  4043c0:	2300      	movs	r3, #0
  4043c2:	461a      	mov	r2, r3
  4043c4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4043c8:	4619      	mov	r1, r3
  4043ca:	930c      	str	r3, [sp, #48]	; 0x30
  4043cc:	469b      	mov	fp, r3
  4043ce:	7866      	ldrb	r6, [r4, #1]
  4043d0:	f04f 33ff 	mov.w	r3, #4294967295
  4043d4:	f104 0901 	add.w	r9, r4, #1
  4043d8:	9309      	str	r3, [sp, #36]	; 0x24
  4043da:	f109 0901 	add.w	r9, r9, #1
  4043de:	f1a6 0320 	sub.w	r3, r6, #32
  4043e2:	2b58      	cmp	r3, #88	; 0x58
  4043e4:	f200 83bf 	bhi.w	404b66 <_vfprintf_r+0x88a>
  4043e8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4043ec:	03bd02e0 	.word	0x03bd02e0
  4043f0:	034f03bd 	.word	0x034f03bd
  4043f4:	03bd03bd 	.word	0x03bd03bd
  4043f8:	03bd03bd 	.word	0x03bd03bd
  4043fc:	03bd03bd 	.word	0x03bd03bd
  404400:	03080354 	.word	0x03080354
  404404:	021a03bd 	.word	0x021a03bd
  404408:	03bd02e8 	.word	0x03bd02e8
  40440c:	033a0303 	.word	0x033a0303
  404410:	033a033a 	.word	0x033a033a
  404414:	033a033a 	.word	0x033a033a
  404418:	033a033a 	.word	0x033a033a
  40441c:	033a033a 	.word	0x033a033a
  404420:	03bd03bd 	.word	0x03bd03bd
  404424:	03bd03bd 	.word	0x03bd03bd
  404428:	03bd03bd 	.word	0x03bd03bd
  40442c:	03bd03bd 	.word	0x03bd03bd
  404430:	03bd03bd 	.word	0x03bd03bd
  404434:	03620349 	.word	0x03620349
  404438:	036203bd 	.word	0x036203bd
  40443c:	03bd03bd 	.word	0x03bd03bd
  404440:	03bd03bd 	.word	0x03bd03bd
  404444:	03bd03a2 	.word	0x03bd03a2
  404448:	006f03bd 	.word	0x006f03bd
  40444c:	03bd03bd 	.word	0x03bd03bd
  404450:	03bd03bd 	.word	0x03bd03bd
  404454:	005903bd 	.word	0x005903bd
  404458:	03bd03bd 	.word	0x03bd03bd
  40445c:	03bd031e 	.word	0x03bd031e
  404460:	03bd03bd 	.word	0x03bd03bd
  404464:	03bd03bd 	.word	0x03bd03bd
  404468:	03bd03bd 	.word	0x03bd03bd
  40446c:	03bd03bd 	.word	0x03bd03bd
  404470:	032403bd 	.word	0x032403bd
  404474:	03620273 	.word	0x03620273
  404478:	03620362 	.word	0x03620362
  40447c:	027302b7 	.word	0x027302b7
  404480:	03bd03bd 	.word	0x03bd03bd
  404484:	03bd02bc 	.word	0x03bd02bc
  404488:	007102c9 	.word	0x007102c9
  40448c:	0247030d 	.word	0x0247030d
  404490:	025203bd 	.word	0x025203bd
  404494:	005b03bd 	.word	0x005b03bd
  404498:	03bd03bd 	.word	0x03bd03bd
  40449c:	021f      	.short	0x021f
  40449e:	f04b 0b10 	orr.w	fp, fp, #16
  4044a2:	f01b 0f20 	tst.w	fp, #32
  4044a6:	f040 8353 	bne.w	404b50 <_vfprintf_r+0x874>
  4044aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4044ac:	f01b 0f10 	tst.w	fp, #16
  4044b0:	4613      	mov	r3, r2
  4044b2:	f040 85b4 	bne.w	40501e <_vfprintf_r+0xd42>
  4044b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4044ba:	f000 85b0 	beq.w	40501e <_vfprintf_r+0xd42>
  4044be:	8814      	ldrh	r4, [r2, #0]
  4044c0:	3204      	adds	r2, #4
  4044c2:	2500      	movs	r5, #0
  4044c4:	2301      	movs	r3, #1
  4044c6:	920e      	str	r2, [sp, #56]	; 0x38
  4044c8:	e014      	b.n	4044f4 <_vfprintf_r+0x218>
  4044ca:	f04b 0b10 	orr.w	fp, fp, #16
  4044ce:	f01b 0320 	ands.w	r3, fp, #32
  4044d2:	f040 8332 	bne.w	404b3a <_vfprintf_r+0x85e>
  4044d6:	f01b 0210 	ands.w	r2, fp, #16
  4044da:	f040 8589 	bne.w	404ff0 <_vfprintf_r+0xd14>
  4044de:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4044e2:	f000 8585 	beq.w	404ff0 <_vfprintf_r+0xd14>
  4044e6:	990e      	ldr	r1, [sp, #56]	; 0x38
  4044e8:	4613      	mov	r3, r2
  4044ea:	460a      	mov	r2, r1
  4044ec:	3204      	adds	r2, #4
  4044ee:	880c      	ldrh	r4, [r1, #0]
  4044f0:	920e      	str	r2, [sp, #56]	; 0x38
  4044f2:	2500      	movs	r5, #0
  4044f4:	f04f 0a00 	mov.w	sl, #0
  4044f8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4044fc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4044fe:	1c4a      	adds	r2, r1, #1
  404500:	f000 820b 	beq.w	40491a <_vfprintf_r+0x63e>
  404504:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404508:	9206      	str	r2, [sp, #24]
  40450a:	ea54 0205 	orrs.w	r2, r4, r5
  40450e:	f040 820a 	bne.w	404926 <_vfprintf_r+0x64a>
  404512:	2900      	cmp	r1, #0
  404514:	f040 846f 	bne.w	404df6 <_vfprintf_r+0xb1a>
  404518:	2b00      	cmp	r3, #0
  40451a:	f040 852d 	bne.w	404f78 <_vfprintf_r+0xc9c>
  40451e:	f01b 0301 	ands.w	r3, fp, #1
  404522:	930d      	str	r3, [sp, #52]	; 0x34
  404524:	f000 8668 	beq.w	4051f8 <_vfprintf_r+0xf1c>
  404528:	af40      	add	r7, sp, #256	; 0x100
  40452a:	2330      	movs	r3, #48	; 0x30
  40452c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404530:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404532:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404534:	4293      	cmp	r3, r2
  404536:	bfb8      	it	lt
  404538:	4613      	movlt	r3, r2
  40453a:	9307      	str	r3, [sp, #28]
  40453c:	2300      	movs	r3, #0
  40453e:	9310      	str	r3, [sp, #64]	; 0x40
  404540:	f1ba 0f00 	cmp.w	sl, #0
  404544:	d002      	beq.n	40454c <_vfprintf_r+0x270>
  404546:	9b07      	ldr	r3, [sp, #28]
  404548:	3301      	adds	r3, #1
  40454a:	9307      	str	r3, [sp, #28]
  40454c:	9b06      	ldr	r3, [sp, #24]
  40454e:	f013 0302 	ands.w	r3, r3, #2
  404552:	930f      	str	r3, [sp, #60]	; 0x3c
  404554:	d002      	beq.n	40455c <_vfprintf_r+0x280>
  404556:	9b07      	ldr	r3, [sp, #28]
  404558:	3302      	adds	r3, #2
  40455a:	9307      	str	r3, [sp, #28]
  40455c:	9b06      	ldr	r3, [sp, #24]
  40455e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404562:	f040 831b 	bne.w	404b9c <_vfprintf_r+0x8c0>
  404566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404568:	9a07      	ldr	r2, [sp, #28]
  40456a:	eba3 0b02 	sub.w	fp, r3, r2
  40456e:	f1bb 0f00 	cmp.w	fp, #0
  404572:	f340 8313 	ble.w	404b9c <_vfprintf_r+0x8c0>
  404576:	f1bb 0f10 	cmp.w	fp, #16
  40457a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40457c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40457e:	dd28      	ble.n	4045d2 <_vfprintf_r+0x2f6>
  404580:	4643      	mov	r3, r8
  404582:	2410      	movs	r4, #16
  404584:	46a8      	mov	r8, r5
  404586:	f8dd a020 	ldr.w	sl, [sp, #32]
  40458a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40458c:	e006      	b.n	40459c <_vfprintf_r+0x2c0>
  40458e:	f1ab 0b10 	sub.w	fp, fp, #16
  404592:	f1bb 0f10 	cmp.w	fp, #16
  404596:	f103 0308 	add.w	r3, r3, #8
  40459a:	dd18      	ble.n	4045ce <_vfprintf_r+0x2f2>
  40459c:	3201      	adds	r2, #1
  40459e:	48b9      	ldr	r0, [pc, #740]	; (404884 <_vfprintf_r+0x5a8>)
  4045a0:	9224      	str	r2, [sp, #144]	; 0x90
  4045a2:	3110      	adds	r1, #16
  4045a4:	2a07      	cmp	r2, #7
  4045a6:	9125      	str	r1, [sp, #148]	; 0x94
  4045a8:	e883 0011 	stmia.w	r3, {r0, r4}
  4045ac:	ddef      	ble.n	40458e <_vfprintf_r+0x2b2>
  4045ae:	aa23      	add	r2, sp, #140	; 0x8c
  4045b0:	4629      	mov	r1, r5
  4045b2:	4650      	mov	r0, sl
  4045b4:	f003 fc3c 	bl	407e30 <__sprint_r>
  4045b8:	2800      	cmp	r0, #0
  4045ba:	f040 836a 	bne.w	404c92 <_vfprintf_r+0x9b6>
  4045be:	f1ab 0b10 	sub.w	fp, fp, #16
  4045c2:	f1bb 0f10 	cmp.w	fp, #16
  4045c6:	9925      	ldr	r1, [sp, #148]	; 0x94
  4045c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4045ca:	ab30      	add	r3, sp, #192	; 0xc0
  4045cc:	dce6      	bgt.n	40459c <_vfprintf_r+0x2c0>
  4045ce:	4645      	mov	r5, r8
  4045d0:	4698      	mov	r8, r3
  4045d2:	3201      	adds	r2, #1
  4045d4:	4bab      	ldr	r3, [pc, #684]	; (404884 <_vfprintf_r+0x5a8>)
  4045d6:	9224      	str	r2, [sp, #144]	; 0x90
  4045d8:	eb0b 0401 	add.w	r4, fp, r1
  4045dc:	2a07      	cmp	r2, #7
  4045de:	9425      	str	r4, [sp, #148]	; 0x94
  4045e0:	e888 0808 	stmia.w	r8, {r3, fp}
  4045e4:	f300 84cd 	bgt.w	404f82 <_vfprintf_r+0xca6>
  4045e8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4045ec:	f108 0808 	add.w	r8, r8, #8
  4045f0:	f1ba 0f00 	cmp.w	sl, #0
  4045f4:	d00e      	beq.n	404614 <_vfprintf_r+0x338>
  4045f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045f8:	3301      	adds	r3, #1
  4045fa:	3401      	adds	r4, #1
  4045fc:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404600:	2201      	movs	r2, #1
  404602:	2b07      	cmp	r3, #7
  404604:	9425      	str	r4, [sp, #148]	; 0x94
  404606:	9324      	str	r3, [sp, #144]	; 0x90
  404608:	e888 0006 	stmia.w	r8, {r1, r2}
  40460c:	f300 840a 	bgt.w	404e24 <_vfprintf_r+0xb48>
  404610:	f108 0808 	add.w	r8, r8, #8
  404614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404616:	b16b      	cbz	r3, 404634 <_vfprintf_r+0x358>
  404618:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40461a:	3301      	adds	r3, #1
  40461c:	3402      	adds	r4, #2
  40461e:	a91c      	add	r1, sp, #112	; 0x70
  404620:	2202      	movs	r2, #2
  404622:	2b07      	cmp	r3, #7
  404624:	9425      	str	r4, [sp, #148]	; 0x94
  404626:	9324      	str	r3, [sp, #144]	; 0x90
  404628:	e888 0006 	stmia.w	r8, {r1, r2}
  40462c:	f300 8406 	bgt.w	404e3c <_vfprintf_r+0xb60>
  404630:	f108 0808 	add.w	r8, r8, #8
  404634:	2d80      	cmp	r5, #128	; 0x80
  404636:	f000 832e 	beq.w	404c96 <_vfprintf_r+0x9ba>
  40463a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40463c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40463e:	eba3 0a02 	sub.w	sl, r3, r2
  404642:	f1ba 0f00 	cmp.w	sl, #0
  404646:	dd3b      	ble.n	4046c0 <_vfprintf_r+0x3e4>
  404648:	f1ba 0f10 	cmp.w	sl, #16
  40464c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40464e:	4d8e      	ldr	r5, [pc, #568]	; (404888 <_vfprintf_r+0x5ac>)
  404650:	dd2b      	ble.n	4046aa <_vfprintf_r+0x3ce>
  404652:	4642      	mov	r2, r8
  404654:	4621      	mov	r1, r4
  404656:	46b0      	mov	r8, r6
  404658:	f04f 0b10 	mov.w	fp, #16
  40465c:	462e      	mov	r6, r5
  40465e:	9c08      	ldr	r4, [sp, #32]
  404660:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404662:	e006      	b.n	404672 <_vfprintf_r+0x396>
  404664:	f1aa 0a10 	sub.w	sl, sl, #16
  404668:	f1ba 0f10 	cmp.w	sl, #16
  40466c:	f102 0208 	add.w	r2, r2, #8
  404670:	dd17      	ble.n	4046a2 <_vfprintf_r+0x3c6>
  404672:	3301      	adds	r3, #1
  404674:	3110      	adds	r1, #16
  404676:	2b07      	cmp	r3, #7
  404678:	9125      	str	r1, [sp, #148]	; 0x94
  40467a:	9324      	str	r3, [sp, #144]	; 0x90
  40467c:	e882 0840 	stmia.w	r2, {r6, fp}
  404680:	ddf0      	ble.n	404664 <_vfprintf_r+0x388>
  404682:	aa23      	add	r2, sp, #140	; 0x8c
  404684:	4629      	mov	r1, r5
  404686:	4620      	mov	r0, r4
  404688:	f003 fbd2 	bl	407e30 <__sprint_r>
  40468c:	2800      	cmp	r0, #0
  40468e:	f040 8300 	bne.w	404c92 <_vfprintf_r+0x9b6>
  404692:	f1aa 0a10 	sub.w	sl, sl, #16
  404696:	f1ba 0f10 	cmp.w	sl, #16
  40469a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40469c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40469e:	aa30      	add	r2, sp, #192	; 0xc0
  4046a0:	dce7      	bgt.n	404672 <_vfprintf_r+0x396>
  4046a2:	4635      	mov	r5, r6
  4046a4:	460c      	mov	r4, r1
  4046a6:	4646      	mov	r6, r8
  4046a8:	4690      	mov	r8, r2
  4046aa:	3301      	adds	r3, #1
  4046ac:	4454      	add	r4, sl
  4046ae:	2b07      	cmp	r3, #7
  4046b0:	9425      	str	r4, [sp, #148]	; 0x94
  4046b2:	9324      	str	r3, [sp, #144]	; 0x90
  4046b4:	e888 0420 	stmia.w	r8, {r5, sl}
  4046b8:	f300 83a9 	bgt.w	404e0e <_vfprintf_r+0xb32>
  4046bc:	f108 0808 	add.w	r8, r8, #8
  4046c0:	9b06      	ldr	r3, [sp, #24]
  4046c2:	05db      	lsls	r3, r3, #23
  4046c4:	f100 8285 	bmi.w	404bd2 <_vfprintf_r+0x8f6>
  4046c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046ca:	990d      	ldr	r1, [sp, #52]	; 0x34
  4046cc:	f8c8 7000 	str.w	r7, [r8]
  4046d0:	3301      	adds	r3, #1
  4046d2:	440c      	add	r4, r1
  4046d4:	2b07      	cmp	r3, #7
  4046d6:	9425      	str	r4, [sp, #148]	; 0x94
  4046d8:	f8c8 1004 	str.w	r1, [r8, #4]
  4046dc:	9324      	str	r3, [sp, #144]	; 0x90
  4046de:	f300 8375 	bgt.w	404dcc <_vfprintf_r+0xaf0>
  4046e2:	f108 0808 	add.w	r8, r8, #8
  4046e6:	9b06      	ldr	r3, [sp, #24]
  4046e8:	0759      	lsls	r1, r3, #29
  4046ea:	d53b      	bpl.n	404764 <_vfprintf_r+0x488>
  4046ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4046ee:	9a07      	ldr	r2, [sp, #28]
  4046f0:	1a9d      	subs	r5, r3, r2
  4046f2:	2d00      	cmp	r5, #0
  4046f4:	dd36      	ble.n	404764 <_vfprintf_r+0x488>
  4046f6:	2d10      	cmp	r5, #16
  4046f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046fa:	dd21      	ble.n	404740 <_vfprintf_r+0x464>
  4046fc:	2610      	movs	r6, #16
  4046fe:	9f08      	ldr	r7, [sp, #32]
  404700:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404704:	e004      	b.n	404710 <_vfprintf_r+0x434>
  404706:	3d10      	subs	r5, #16
  404708:	2d10      	cmp	r5, #16
  40470a:	f108 0808 	add.w	r8, r8, #8
  40470e:	dd17      	ble.n	404740 <_vfprintf_r+0x464>
  404710:	3301      	adds	r3, #1
  404712:	4a5c      	ldr	r2, [pc, #368]	; (404884 <_vfprintf_r+0x5a8>)
  404714:	9324      	str	r3, [sp, #144]	; 0x90
  404716:	3410      	adds	r4, #16
  404718:	2b07      	cmp	r3, #7
  40471a:	9425      	str	r4, [sp, #148]	; 0x94
  40471c:	e888 0044 	stmia.w	r8, {r2, r6}
  404720:	ddf1      	ble.n	404706 <_vfprintf_r+0x42a>
  404722:	aa23      	add	r2, sp, #140	; 0x8c
  404724:	4651      	mov	r1, sl
  404726:	4638      	mov	r0, r7
  404728:	f003 fb82 	bl	407e30 <__sprint_r>
  40472c:	2800      	cmp	r0, #0
  40472e:	f040 823f 	bne.w	404bb0 <_vfprintf_r+0x8d4>
  404732:	3d10      	subs	r5, #16
  404734:	2d10      	cmp	r5, #16
  404736:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404738:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40473a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40473e:	dce7      	bgt.n	404710 <_vfprintf_r+0x434>
  404740:	3301      	adds	r3, #1
  404742:	4a50      	ldr	r2, [pc, #320]	; (404884 <_vfprintf_r+0x5a8>)
  404744:	9324      	str	r3, [sp, #144]	; 0x90
  404746:	442c      	add	r4, r5
  404748:	2b07      	cmp	r3, #7
  40474a:	9425      	str	r4, [sp, #148]	; 0x94
  40474c:	e888 0024 	stmia.w	r8, {r2, r5}
  404750:	dd08      	ble.n	404764 <_vfprintf_r+0x488>
  404752:	aa23      	add	r2, sp, #140	; 0x8c
  404754:	990a      	ldr	r1, [sp, #40]	; 0x28
  404756:	9808      	ldr	r0, [sp, #32]
  404758:	f003 fb6a 	bl	407e30 <__sprint_r>
  40475c:	2800      	cmp	r0, #0
  40475e:	f040 8347 	bne.w	404df0 <_vfprintf_r+0xb14>
  404762:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404768:	9907      	ldr	r1, [sp, #28]
  40476a:	428a      	cmp	r2, r1
  40476c:	bfac      	ite	ge
  40476e:	189b      	addge	r3, r3, r2
  404770:	185b      	addlt	r3, r3, r1
  404772:	930b      	str	r3, [sp, #44]	; 0x2c
  404774:	2c00      	cmp	r4, #0
  404776:	f040 8333 	bne.w	404de0 <_vfprintf_r+0xb04>
  40477a:	2300      	movs	r3, #0
  40477c:	9324      	str	r3, [sp, #144]	; 0x90
  40477e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404782:	e5f7      	b.n	404374 <_vfprintf_r+0x98>
  404784:	4651      	mov	r1, sl
  404786:	9808      	ldr	r0, [sp, #32]
  404788:	f001 f896 	bl	4058b8 <__swsetup_r>
  40478c:	2800      	cmp	r0, #0
  40478e:	d038      	beq.n	404802 <_vfprintf_r+0x526>
  404790:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404794:	07dd      	lsls	r5, r3, #31
  404796:	d404      	bmi.n	4047a2 <_vfprintf_r+0x4c6>
  404798:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40479c:	059c      	lsls	r4, r3, #22
  40479e:	f140 85ca 	bpl.w	405336 <_vfprintf_r+0x105a>
  4047a2:	f04f 33ff 	mov.w	r3, #4294967295
  4047a6:	930b      	str	r3, [sp, #44]	; 0x2c
  4047a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4047aa:	b041      	add	sp, #260	; 0x104
  4047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047b0:	aa23      	add	r2, sp, #140	; 0x8c
  4047b2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4047b4:	9808      	ldr	r0, [sp, #32]
  4047b6:	f003 fb3b 	bl	407e30 <__sprint_r>
  4047ba:	2800      	cmp	r0, #0
  4047bc:	f040 8318 	bne.w	404df0 <_vfprintf_r+0xb14>
  4047c0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4047c4:	e5f5      	b.n	4043b2 <_vfprintf_r+0xd6>
  4047c6:	9808      	ldr	r0, [sp, #32]
  4047c8:	f002 f9a0 	bl	406b0c <__sinit>
  4047cc:	e59c      	b.n	404308 <_vfprintf_r+0x2c>
  4047ce:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  4047d2:	2a00      	cmp	r2, #0
  4047d4:	f6ff adbd 	blt.w	404352 <_vfprintf_r+0x76>
  4047d8:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  4047dc:	07d0      	lsls	r0, r2, #31
  4047de:	d405      	bmi.n	4047ec <_vfprintf_r+0x510>
  4047e0:	0599      	lsls	r1, r3, #22
  4047e2:	d403      	bmi.n	4047ec <_vfprintf_r+0x510>
  4047e4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4047e8:	f002 fcce 	bl	407188 <__retarget_lock_release_recursive>
  4047ec:	462b      	mov	r3, r5
  4047ee:	464a      	mov	r2, r9
  4047f0:	4651      	mov	r1, sl
  4047f2:	9808      	ldr	r0, [sp, #32]
  4047f4:	f001 f81e 	bl	405834 <__sbprintf>
  4047f8:	900b      	str	r0, [sp, #44]	; 0x2c
  4047fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4047fc:	b041      	add	sp, #260	; 0x104
  4047fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404802:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404806:	e59f      	b.n	404348 <_vfprintf_r+0x6c>
  404808:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40480c:	f002 fcba 	bl	407184 <__retarget_lock_acquire_recursive>
  404810:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404814:	b293      	uxth	r3, r2
  404816:	e582      	b.n	40431e <_vfprintf_r+0x42>
  404818:	980c      	ldr	r0, [sp, #48]	; 0x30
  40481a:	930e      	str	r3, [sp, #56]	; 0x38
  40481c:	4240      	negs	r0, r0
  40481e:	900c      	str	r0, [sp, #48]	; 0x30
  404820:	f04b 0b04 	orr.w	fp, fp, #4
  404824:	f899 6000 	ldrb.w	r6, [r9]
  404828:	e5d7      	b.n	4043da <_vfprintf_r+0xfe>
  40482a:	2a00      	cmp	r2, #0
  40482c:	f040 87df 	bne.w	4057ee <_vfprintf_r+0x1512>
  404830:	4b16      	ldr	r3, [pc, #88]	; (40488c <_vfprintf_r+0x5b0>)
  404832:	9318      	str	r3, [sp, #96]	; 0x60
  404834:	f01b 0f20 	tst.w	fp, #32
  404838:	f040 84b9 	bne.w	4051ae <_vfprintf_r+0xed2>
  40483c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40483e:	f01b 0f10 	tst.w	fp, #16
  404842:	4613      	mov	r3, r2
  404844:	f040 83dc 	bne.w	405000 <_vfprintf_r+0xd24>
  404848:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40484c:	f000 83d8 	beq.w	405000 <_vfprintf_r+0xd24>
  404850:	3304      	adds	r3, #4
  404852:	8814      	ldrh	r4, [r2, #0]
  404854:	930e      	str	r3, [sp, #56]	; 0x38
  404856:	2500      	movs	r5, #0
  404858:	f01b 0f01 	tst.w	fp, #1
  40485c:	f000 8322 	beq.w	404ea4 <_vfprintf_r+0xbc8>
  404860:	ea54 0305 	orrs.w	r3, r4, r5
  404864:	f000 831e 	beq.w	404ea4 <_vfprintf_r+0xbc8>
  404868:	2330      	movs	r3, #48	; 0x30
  40486a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40486e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  404872:	f04b 0b02 	orr.w	fp, fp, #2
  404876:	2302      	movs	r3, #2
  404878:	e63c      	b.n	4044f4 <_vfprintf_r+0x218>
  40487a:	f04b 0b20 	orr.w	fp, fp, #32
  40487e:	f899 6000 	ldrb.w	r6, [r9]
  404882:	e5aa      	b.n	4043da <_vfprintf_r+0xfe>
  404884:	00408934 	.word	0x00408934
  404888:	00408944 	.word	0x00408944
  40488c:	00408914 	.word	0x00408914
  404890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404892:	6817      	ldr	r7, [r2, #0]
  404894:	2400      	movs	r4, #0
  404896:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40489a:	1d15      	adds	r5, r2, #4
  40489c:	2f00      	cmp	r7, #0
  40489e:	f000 864e 	beq.w	40553e <_vfprintf_r+0x1262>
  4048a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4048a4:	1c53      	adds	r3, r2, #1
  4048a6:	f000 85cc 	beq.w	405442 <_vfprintf_r+0x1166>
  4048aa:	4621      	mov	r1, r4
  4048ac:	4638      	mov	r0, r7
  4048ae:	f002 fce7 	bl	407280 <memchr>
  4048b2:	2800      	cmp	r0, #0
  4048b4:	f000 8697 	beq.w	4055e6 <_vfprintf_r+0x130a>
  4048b8:	1bc3      	subs	r3, r0, r7
  4048ba:	930d      	str	r3, [sp, #52]	; 0x34
  4048bc:	9409      	str	r4, [sp, #36]	; 0x24
  4048be:	950e      	str	r5, [sp, #56]	; 0x38
  4048c0:	f8cd b018 	str.w	fp, [sp, #24]
  4048c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4048c8:	9307      	str	r3, [sp, #28]
  4048ca:	9410      	str	r4, [sp, #64]	; 0x40
  4048cc:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4048d0:	e636      	b.n	404540 <_vfprintf_r+0x264>
  4048d2:	2a00      	cmp	r2, #0
  4048d4:	f040 8796 	bne.w	405804 <_vfprintf_r+0x1528>
  4048d8:	f01b 0f20 	tst.w	fp, #32
  4048dc:	f040 845a 	bne.w	405194 <_vfprintf_r+0xeb8>
  4048e0:	f01b 0f10 	tst.w	fp, #16
  4048e4:	f040 83a2 	bne.w	40502c <_vfprintf_r+0xd50>
  4048e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4048ec:	f000 839e 	beq.w	40502c <_vfprintf_r+0xd50>
  4048f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4048f2:	f9b1 4000 	ldrsh.w	r4, [r1]
  4048f6:	3104      	adds	r1, #4
  4048f8:	17e5      	asrs	r5, r4, #31
  4048fa:	4622      	mov	r2, r4
  4048fc:	462b      	mov	r3, r5
  4048fe:	910e      	str	r1, [sp, #56]	; 0x38
  404900:	2a00      	cmp	r2, #0
  404902:	f173 0300 	sbcs.w	r3, r3, #0
  404906:	f2c0 8487 	blt.w	405218 <_vfprintf_r+0xf3c>
  40490a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40490c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404910:	1c4a      	adds	r2, r1, #1
  404912:	f04f 0301 	mov.w	r3, #1
  404916:	f47f adf5 	bne.w	404504 <_vfprintf_r+0x228>
  40491a:	ea54 0205 	orrs.w	r2, r4, r5
  40491e:	f000 826c 	beq.w	404dfa <_vfprintf_r+0xb1e>
  404922:	f8cd b018 	str.w	fp, [sp, #24]
  404926:	2b01      	cmp	r3, #1
  404928:	f000 8308 	beq.w	404f3c <_vfprintf_r+0xc60>
  40492c:	2b02      	cmp	r3, #2
  40492e:	f040 8295 	bne.w	404e5c <_vfprintf_r+0xb80>
  404932:	9818      	ldr	r0, [sp, #96]	; 0x60
  404934:	af30      	add	r7, sp, #192	; 0xc0
  404936:	0923      	lsrs	r3, r4, #4
  404938:	f004 010f 	and.w	r1, r4, #15
  40493c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404940:	092a      	lsrs	r2, r5, #4
  404942:	461c      	mov	r4, r3
  404944:	4615      	mov	r5, r2
  404946:	5c43      	ldrb	r3, [r0, r1]
  404948:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40494c:	ea54 0305 	orrs.w	r3, r4, r5
  404950:	d1f1      	bne.n	404936 <_vfprintf_r+0x65a>
  404952:	ab30      	add	r3, sp, #192	; 0xc0
  404954:	1bdb      	subs	r3, r3, r7
  404956:	930d      	str	r3, [sp, #52]	; 0x34
  404958:	e5ea      	b.n	404530 <_vfprintf_r+0x254>
  40495a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40495e:	f899 6000 	ldrb.w	r6, [r9]
  404962:	e53a      	b.n	4043da <_vfprintf_r+0xfe>
  404964:	f899 6000 	ldrb.w	r6, [r9]
  404968:	2e6c      	cmp	r6, #108	; 0x6c
  40496a:	bf03      	ittte	eq
  40496c:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  404970:	f04b 0b20 	orreq.w	fp, fp, #32
  404974:	f109 0901 	addeq.w	r9, r9, #1
  404978:	f04b 0b10 	orrne.w	fp, fp, #16
  40497c:	e52d      	b.n	4043da <_vfprintf_r+0xfe>
  40497e:	2a00      	cmp	r2, #0
  404980:	f040 874c 	bne.w	40581c <_vfprintf_r+0x1540>
  404984:	f01b 0f20 	tst.w	fp, #32
  404988:	f040 853f 	bne.w	40540a <_vfprintf_r+0x112e>
  40498c:	f01b 0f10 	tst.w	fp, #16
  404990:	f040 80fc 	bne.w	404b8c <_vfprintf_r+0x8b0>
  404994:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404998:	f000 80f8 	beq.w	404b8c <_vfprintf_r+0x8b0>
  40499c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40499e:	6813      	ldr	r3, [r2, #0]
  4049a0:	3204      	adds	r2, #4
  4049a2:	920e      	str	r2, [sp, #56]	; 0x38
  4049a4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4049a8:	801a      	strh	r2, [r3, #0]
  4049aa:	e4e3      	b.n	404374 <_vfprintf_r+0x98>
  4049ac:	f899 6000 	ldrb.w	r6, [r9]
  4049b0:	2900      	cmp	r1, #0
  4049b2:	f47f ad12 	bne.w	4043da <_vfprintf_r+0xfe>
  4049b6:	2201      	movs	r2, #1
  4049b8:	2120      	movs	r1, #32
  4049ba:	e50e      	b.n	4043da <_vfprintf_r+0xfe>
  4049bc:	f899 6000 	ldrb.w	r6, [r9]
  4049c0:	2e2a      	cmp	r6, #42	; 0x2a
  4049c2:	f109 0001 	add.w	r0, r9, #1
  4049c6:	f000 86f1 	beq.w	4057ac <_vfprintf_r+0x14d0>
  4049ca:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4049ce:	2b09      	cmp	r3, #9
  4049d0:	4681      	mov	r9, r0
  4049d2:	bf98      	it	ls
  4049d4:	2000      	movls	r0, #0
  4049d6:	f200 863d 	bhi.w	405654 <_vfprintf_r+0x1378>
  4049da:	f819 6b01 	ldrb.w	r6, [r9], #1
  4049de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4049e2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4049e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4049ea:	2b09      	cmp	r3, #9
  4049ec:	d9f5      	bls.n	4049da <_vfprintf_r+0x6fe>
  4049ee:	9009      	str	r0, [sp, #36]	; 0x24
  4049f0:	e4f5      	b.n	4043de <_vfprintf_r+0x102>
  4049f2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4049f6:	f899 6000 	ldrb.w	r6, [r9]
  4049fa:	e4ee      	b.n	4043da <_vfprintf_r+0xfe>
  4049fc:	f899 6000 	ldrb.w	r6, [r9]
  404a00:	2201      	movs	r2, #1
  404a02:	212b      	movs	r1, #43	; 0x2b
  404a04:	e4e9      	b.n	4043da <_vfprintf_r+0xfe>
  404a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404a08:	4bae      	ldr	r3, [pc, #696]	; (404cc4 <_vfprintf_r+0x9e8>)
  404a0a:	6814      	ldr	r4, [r2, #0]
  404a0c:	9318      	str	r3, [sp, #96]	; 0x60
  404a0e:	2678      	movs	r6, #120	; 0x78
  404a10:	2330      	movs	r3, #48	; 0x30
  404a12:	3204      	adds	r2, #4
  404a14:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404a18:	f04b 0b02 	orr.w	fp, fp, #2
  404a1c:	920e      	str	r2, [sp, #56]	; 0x38
  404a1e:	2500      	movs	r5, #0
  404a20:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  404a24:	2302      	movs	r3, #2
  404a26:	e565      	b.n	4044f4 <_vfprintf_r+0x218>
  404a28:	2a00      	cmp	r2, #0
  404a2a:	f040 86e4 	bne.w	4057f6 <_vfprintf_r+0x151a>
  404a2e:	4ba6      	ldr	r3, [pc, #664]	; (404cc8 <_vfprintf_r+0x9ec>)
  404a30:	9318      	str	r3, [sp, #96]	; 0x60
  404a32:	e6ff      	b.n	404834 <_vfprintf_r+0x558>
  404a34:	990e      	ldr	r1, [sp, #56]	; 0x38
  404a36:	f8cd b018 	str.w	fp, [sp, #24]
  404a3a:	680a      	ldr	r2, [r1, #0]
  404a3c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404a40:	2300      	movs	r3, #0
  404a42:	460a      	mov	r2, r1
  404a44:	469a      	mov	sl, r3
  404a46:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404a4a:	3204      	adds	r2, #4
  404a4c:	2301      	movs	r3, #1
  404a4e:	9307      	str	r3, [sp, #28]
  404a50:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  404a54:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  404a58:	920e      	str	r2, [sp, #56]	; 0x38
  404a5a:	930d      	str	r3, [sp, #52]	; 0x34
  404a5c:	af26      	add	r7, sp, #152	; 0x98
  404a5e:	e575      	b.n	40454c <_vfprintf_r+0x270>
  404a60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404a64:	2000      	movs	r0, #0
  404a66:	f819 6b01 	ldrb.w	r6, [r9], #1
  404a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404a6e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  404a72:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404a76:	2b09      	cmp	r3, #9
  404a78:	d9f5      	bls.n	404a66 <_vfprintf_r+0x78a>
  404a7a:	900c      	str	r0, [sp, #48]	; 0x30
  404a7c:	e4af      	b.n	4043de <_vfprintf_r+0x102>
  404a7e:	2a00      	cmp	r2, #0
  404a80:	f040 86c8 	bne.w	405814 <_vfprintf_r+0x1538>
  404a84:	f04b 0b10 	orr.w	fp, fp, #16
  404a88:	e726      	b.n	4048d8 <_vfprintf_r+0x5fc>
  404a8a:	f04b 0b01 	orr.w	fp, fp, #1
  404a8e:	f899 6000 	ldrb.w	r6, [r9]
  404a92:	e4a2      	b.n	4043da <_vfprintf_r+0xfe>
  404a94:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404a96:	6823      	ldr	r3, [r4, #0]
  404a98:	930c      	str	r3, [sp, #48]	; 0x30
  404a9a:	4618      	mov	r0, r3
  404a9c:	2800      	cmp	r0, #0
  404a9e:	4623      	mov	r3, r4
  404aa0:	f103 0304 	add.w	r3, r3, #4
  404aa4:	f6ff aeb8 	blt.w	404818 <_vfprintf_r+0x53c>
  404aa8:	930e      	str	r3, [sp, #56]	; 0x38
  404aaa:	f899 6000 	ldrb.w	r6, [r9]
  404aae:	e494      	b.n	4043da <_vfprintf_r+0xfe>
  404ab0:	2a00      	cmp	r2, #0
  404ab2:	f040 86b7 	bne.w	405824 <_vfprintf_r+0x1548>
  404ab6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404ab8:	3507      	adds	r5, #7
  404aba:	f025 0307 	bic.w	r3, r5, #7
  404abe:	f103 0208 	add.w	r2, r3, #8
  404ac2:	920e      	str	r2, [sp, #56]	; 0x38
  404ac4:	681a      	ldr	r2, [r3, #0]
  404ac6:	9213      	str	r2, [sp, #76]	; 0x4c
  404ac8:	685b      	ldr	r3, [r3, #4]
  404aca:	9312      	str	r3, [sp, #72]	; 0x48
  404acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ace:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  404ad0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404ad4:	4628      	mov	r0, r5
  404ad6:	4621      	mov	r1, r4
  404ad8:	f04f 32ff 	mov.w	r2, #4294967295
  404adc:	4b7b      	ldr	r3, [pc, #492]	; (404ccc <_vfprintf_r+0x9f0>)
  404ade:	f003 fcdf 	bl	4084a0 <__aeabi_dcmpun>
  404ae2:	2800      	cmp	r0, #0
  404ae4:	f040 83a2 	bne.w	40522c <_vfprintf_r+0xf50>
  404ae8:	4628      	mov	r0, r5
  404aea:	4621      	mov	r1, r4
  404aec:	f04f 32ff 	mov.w	r2, #4294967295
  404af0:	4b76      	ldr	r3, [pc, #472]	; (404ccc <_vfprintf_r+0x9f0>)
  404af2:	f003 fcb7 	bl	408464 <__aeabi_dcmple>
  404af6:	2800      	cmp	r0, #0
  404af8:	f040 8398 	bne.w	40522c <_vfprintf_r+0xf50>
  404afc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404afe:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404b02:	9912      	ldr	r1, [sp, #72]	; 0x48
  404b04:	f003 fca4 	bl	408450 <__aeabi_dcmplt>
  404b08:	2800      	cmp	r0, #0
  404b0a:	f040 8435 	bne.w	405378 <_vfprintf_r+0x109c>
  404b0e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404b12:	4f6f      	ldr	r7, [pc, #444]	; (404cd0 <_vfprintf_r+0x9f4>)
  404b14:	4b6f      	ldr	r3, [pc, #444]	; (404cd4 <_vfprintf_r+0x9f8>)
  404b16:	2203      	movs	r2, #3
  404b18:	2100      	movs	r1, #0
  404b1a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404b1e:	9207      	str	r2, [sp, #28]
  404b20:	9109      	str	r1, [sp, #36]	; 0x24
  404b22:	9006      	str	r0, [sp, #24]
  404b24:	2e47      	cmp	r6, #71	; 0x47
  404b26:	bfd8      	it	le
  404b28:	461f      	movle	r7, r3
  404b2a:	920d      	str	r2, [sp, #52]	; 0x34
  404b2c:	9110      	str	r1, [sp, #64]	; 0x40
  404b2e:	e507      	b.n	404540 <_vfprintf_r+0x264>
  404b30:	f04b 0b08 	orr.w	fp, fp, #8
  404b34:	f899 6000 	ldrb.w	r6, [r9]
  404b38:	e44f      	b.n	4043da <_vfprintf_r+0xfe>
  404b3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404b3c:	3507      	adds	r5, #7
  404b3e:	f025 0307 	bic.w	r3, r5, #7
  404b42:	f103 0208 	add.w	r2, r3, #8
  404b46:	e9d3 4500 	ldrd	r4, r5, [r3]
  404b4a:	920e      	str	r2, [sp, #56]	; 0x38
  404b4c:	2300      	movs	r3, #0
  404b4e:	e4d1      	b.n	4044f4 <_vfprintf_r+0x218>
  404b50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404b52:	3507      	adds	r5, #7
  404b54:	f025 0307 	bic.w	r3, r5, #7
  404b58:	f103 0208 	add.w	r2, r3, #8
  404b5c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404b60:	920e      	str	r2, [sp, #56]	; 0x38
  404b62:	2301      	movs	r3, #1
  404b64:	e4c6      	b.n	4044f4 <_vfprintf_r+0x218>
  404b66:	2a00      	cmp	r2, #0
  404b68:	f040 8650 	bne.w	40580c <_vfprintf_r+0x1530>
  404b6c:	b1c6      	cbz	r6, 404ba0 <_vfprintf_r+0x8c4>
  404b6e:	2300      	movs	r3, #0
  404b70:	2201      	movs	r2, #1
  404b72:	469a      	mov	sl, r3
  404b74:	9207      	str	r2, [sp, #28]
  404b76:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  404b7a:	f8cd b018 	str.w	fp, [sp, #24]
  404b7e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404b82:	9309      	str	r3, [sp, #36]	; 0x24
  404b84:	9310      	str	r3, [sp, #64]	; 0x40
  404b86:	920d      	str	r2, [sp, #52]	; 0x34
  404b88:	af26      	add	r7, sp, #152	; 0x98
  404b8a:	e4df      	b.n	40454c <_vfprintf_r+0x270>
  404b8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404b8e:	6813      	ldr	r3, [r2, #0]
  404b90:	3204      	adds	r2, #4
  404b92:	920e      	str	r2, [sp, #56]	; 0x38
  404b94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404b96:	601a      	str	r2, [r3, #0]
  404b98:	f7ff bbec 	b.w	404374 <_vfprintf_r+0x98>
  404b9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b9e:	e527      	b.n	4045f0 <_vfprintf_r+0x314>
  404ba0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404ba2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404ba6:	2b00      	cmp	r3, #0
  404ba8:	f040 8594 	bne.w	4056d4 <_vfprintf_r+0x13f8>
  404bac:	2300      	movs	r3, #0
  404bae:	9324      	str	r3, [sp, #144]	; 0x90
  404bb0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404bb4:	f013 0f01 	tst.w	r3, #1
  404bb8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404bbc:	d102      	bne.n	404bc4 <_vfprintf_r+0x8e8>
  404bbe:	059a      	lsls	r2, r3, #22
  404bc0:	f140 8249 	bpl.w	405056 <_vfprintf_r+0xd7a>
  404bc4:	065b      	lsls	r3, r3, #25
  404bc6:	f53f adec 	bmi.w	4047a2 <_vfprintf_r+0x4c6>
  404bca:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404bcc:	b041      	add	sp, #260	; 0x104
  404bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bd2:	2e65      	cmp	r6, #101	; 0x65
  404bd4:	f340 80b2 	ble.w	404d3c <_vfprintf_r+0xa60>
  404bd8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404bda:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404bdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404bde:	9912      	ldr	r1, [sp, #72]	; 0x48
  404be0:	f003 fc2c 	bl	40843c <__aeabi_dcmpeq>
  404be4:	2800      	cmp	r0, #0
  404be6:	f000 8160 	beq.w	404eaa <_vfprintf_r+0xbce>
  404bea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404bec:	4a3a      	ldr	r2, [pc, #232]	; (404cd8 <_vfprintf_r+0x9fc>)
  404bee:	f8c8 2000 	str.w	r2, [r8]
  404bf2:	3301      	adds	r3, #1
  404bf4:	3401      	adds	r4, #1
  404bf6:	2201      	movs	r2, #1
  404bf8:	2b07      	cmp	r3, #7
  404bfa:	9425      	str	r4, [sp, #148]	; 0x94
  404bfc:	9324      	str	r3, [sp, #144]	; 0x90
  404bfe:	f8c8 2004 	str.w	r2, [r8, #4]
  404c02:	f300 83bf 	bgt.w	405384 <_vfprintf_r+0x10a8>
  404c06:	f108 0808 	add.w	r8, r8, #8
  404c0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404c0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c0e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c10:	4293      	cmp	r3, r2
  404c12:	db03      	blt.n	404c1c <_vfprintf_r+0x940>
  404c14:	9b06      	ldr	r3, [sp, #24]
  404c16:	07df      	lsls	r7, r3, #31
  404c18:	f57f ad65 	bpl.w	4046e6 <_vfprintf_r+0x40a>
  404c1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c1e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404c20:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404c22:	f8c8 2000 	str.w	r2, [r8]
  404c26:	3301      	adds	r3, #1
  404c28:	440c      	add	r4, r1
  404c2a:	2b07      	cmp	r3, #7
  404c2c:	f8c8 1004 	str.w	r1, [r8, #4]
  404c30:	9425      	str	r4, [sp, #148]	; 0x94
  404c32:	9324      	str	r3, [sp, #144]	; 0x90
  404c34:	f300 83f8 	bgt.w	405428 <_vfprintf_r+0x114c>
  404c38:	f108 0808 	add.w	r8, r8, #8
  404c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c3e:	1e5e      	subs	r6, r3, #1
  404c40:	2e00      	cmp	r6, #0
  404c42:	f77f ad50 	ble.w	4046e6 <_vfprintf_r+0x40a>
  404c46:	2e10      	cmp	r6, #16
  404c48:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c4a:	4d24      	ldr	r5, [pc, #144]	; (404cdc <_vfprintf_r+0xa00>)
  404c4c:	f340 81dd 	ble.w	40500a <_vfprintf_r+0xd2e>
  404c50:	2710      	movs	r7, #16
  404c52:	f8dd a020 	ldr.w	sl, [sp, #32]
  404c56:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404c5a:	e005      	b.n	404c68 <_vfprintf_r+0x98c>
  404c5c:	f108 0808 	add.w	r8, r8, #8
  404c60:	3e10      	subs	r6, #16
  404c62:	2e10      	cmp	r6, #16
  404c64:	f340 81d1 	ble.w	40500a <_vfprintf_r+0xd2e>
  404c68:	3301      	adds	r3, #1
  404c6a:	3410      	adds	r4, #16
  404c6c:	2b07      	cmp	r3, #7
  404c6e:	9425      	str	r4, [sp, #148]	; 0x94
  404c70:	9324      	str	r3, [sp, #144]	; 0x90
  404c72:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c76:	ddf1      	ble.n	404c5c <_vfprintf_r+0x980>
  404c78:	aa23      	add	r2, sp, #140	; 0x8c
  404c7a:	4659      	mov	r1, fp
  404c7c:	4650      	mov	r0, sl
  404c7e:	f003 f8d7 	bl	407e30 <__sprint_r>
  404c82:	2800      	cmp	r0, #0
  404c84:	f040 83cd 	bne.w	405422 <_vfprintf_r+0x1146>
  404c88:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c8c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404c90:	e7e6      	b.n	404c60 <_vfprintf_r+0x984>
  404c92:	46aa      	mov	sl, r5
  404c94:	e78c      	b.n	404bb0 <_vfprintf_r+0x8d4>
  404c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404c98:	9a07      	ldr	r2, [sp, #28]
  404c9a:	eba3 0a02 	sub.w	sl, r3, r2
  404c9e:	f1ba 0f00 	cmp.w	sl, #0
  404ca2:	f77f acca 	ble.w	40463a <_vfprintf_r+0x35e>
  404ca6:	f1ba 0f10 	cmp.w	sl, #16
  404caa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cac:	4d0b      	ldr	r5, [pc, #44]	; (404cdc <_vfprintf_r+0xa00>)
  404cae:	dd39      	ble.n	404d24 <_vfprintf_r+0xa48>
  404cb0:	4642      	mov	r2, r8
  404cb2:	4621      	mov	r1, r4
  404cb4:	46b0      	mov	r8, r6
  404cb6:	f04f 0b10 	mov.w	fp, #16
  404cba:	462e      	mov	r6, r5
  404cbc:	9c08      	ldr	r4, [sp, #32]
  404cbe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404cc0:	e015      	b.n	404cee <_vfprintf_r+0xa12>
  404cc2:	bf00      	nop
  404cc4:	00408914 	.word	0x00408914
  404cc8:	00408900 	.word	0x00408900
  404ccc:	7fefffff 	.word	0x7fefffff
  404cd0:	004088f4 	.word	0x004088f4
  404cd4:	004088f0 	.word	0x004088f0
  404cd8:	00408930 	.word	0x00408930
  404cdc:	00408944 	.word	0x00408944
  404ce0:	f1aa 0a10 	sub.w	sl, sl, #16
  404ce4:	f1ba 0f10 	cmp.w	sl, #16
  404ce8:	f102 0208 	add.w	r2, r2, #8
  404cec:	dd16      	ble.n	404d1c <_vfprintf_r+0xa40>
  404cee:	3301      	adds	r3, #1
  404cf0:	3110      	adds	r1, #16
  404cf2:	2b07      	cmp	r3, #7
  404cf4:	9125      	str	r1, [sp, #148]	; 0x94
  404cf6:	9324      	str	r3, [sp, #144]	; 0x90
  404cf8:	e882 0840 	stmia.w	r2, {r6, fp}
  404cfc:	ddf0      	ble.n	404ce0 <_vfprintf_r+0xa04>
  404cfe:	aa23      	add	r2, sp, #140	; 0x8c
  404d00:	4629      	mov	r1, r5
  404d02:	4620      	mov	r0, r4
  404d04:	f003 f894 	bl	407e30 <__sprint_r>
  404d08:	2800      	cmp	r0, #0
  404d0a:	d1c2      	bne.n	404c92 <_vfprintf_r+0x9b6>
  404d0c:	f1aa 0a10 	sub.w	sl, sl, #16
  404d10:	f1ba 0f10 	cmp.w	sl, #16
  404d14:	9925      	ldr	r1, [sp, #148]	; 0x94
  404d16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d18:	aa30      	add	r2, sp, #192	; 0xc0
  404d1a:	dce8      	bgt.n	404cee <_vfprintf_r+0xa12>
  404d1c:	4635      	mov	r5, r6
  404d1e:	460c      	mov	r4, r1
  404d20:	4646      	mov	r6, r8
  404d22:	4690      	mov	r8, r2
  404d24:	3301      	adds	r3, #1
  404d26:	4454      	add	r4, sl
  404d28:	2b07      	cmp	r3, #7
  404d2a:	9425      	str	r4, [sp, #148]	; 0x94
  404d2c:	9324      	str	r3, [sp, #144]	; 0x90
  404d2e:	e888 0420 	stmia.w	r8, {r5, sl}
  404d32:	f300 8264 	bgt.w	4051fe <_vfprintf_r+0xf22>
  404d36:	f108 0808 	add.w	r8, r8, #8
  404d3a:	e47e      	b.n	40463a <_vfprintf_r+0x35e>
  404d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d3e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404d40:	2b01      	cmp	r3, #1
  404d42:	f340 81fd 	ble.w	405140 <_vfprintf_r+0xe64>
  404d46:	3601      	adds	r6, #1
  404d48:	3401      	adds	r4, #1
  404d4a:	2301      	movs	r3, #1
  404d4c:	2e07      	cmp	r6, #7
  404d4e:	9425      	str	r4, [sp, #148]	; 0x94
  404d50:	9624      	str	r6, [sp, #144]	; 0x90
  404d52:	f8c8 7000 	str.w	r7, [r8]
  404d56:	f8c8 3004 	str.w	r3, [r8, #4]
  404d5a:	f300 820e 	bgt.w	40517a <_vfprintf_r+0xe9e>
  404d5e:	f108 0808 	add.w	r8, r8, #8
  404d62:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404d66:	f8c8 3000 	str.w	r3, [r8]
  404d6a:	3601      	adds	r6, #1
  404d6c:	4414      	add	r4, r2
  404d6e:	2e07      	cmp	r6, #7
  404d70:	9425      	str	r4, [sp, #148]	; 0x94
  404d72:	9624      	str	r6, [sp, #144]	; 0x90
  404d74:	f8c8 2004 	str.w	r2, [r8, #4]
  404d78:	f300 822e 	bgt.w	4051d8 <_vfprintf_r+0xefc>
  404d7c:	f108 0808 	add.w	r8, r8, #8
  404d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404d82:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404d84:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404d86:	9912      	ldr	r1, [sp, #72]	; 0x48
  404d88:	f003 fb58 	bl	40843c <__aeabi_dcmpeq>
  404d8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d8e:	2800      	cmp	r0, #0
  404d90:	f040 8106 	bne.w	404fa0 <_vfprintf_r+0xcc4>
  404d94:	3b01      	subs	r3, #1
  404d96:	3601      	adds	r6, #1
  404d98:	3701      	adds	r7, #1
  404d9a:	441c      	add	r4, r3
  404d9c:	2e07      	cmp	r6, #7
  404d9e:	9624      	str	r6, [sp, #144]	; 0x90
  404da0:	9425      	str	r4, [sp, #148]	; 0x94
  404da2:	f8c8 7000 	str.w	r7, [r8]
  404da6:	f8c8 3004 	str.w	r3, [r8, #4]
  404daa:	f300 81d9 	bgt.w	405160 <_vfprintf_r+0xe84>
  404dae:	f108 0808 	add.w	r8, r8, #8
  404db2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404db4:	f8c8 2004 	str.w	r2, [r8, #4]
  404db8:	3601      	adds	r6, #1
  404dba:	4414      	add	r4, r2
  404dbc:	ab1f      	add	r3, sp, #124	; 0x7c
  404dbe:	2e07      	cmp	r6, #7
  404dc0:	9425      	str	r4, [sp, #148]	; 0x94
  404dc2:	9624      	str	r6, [sp, #144]	; 0x90
  404dc4:	f8c8 3000 	str.w	r3, [r8]
  404dc8:	f77f ac8b 	ble.w	4046e2 <_vfprintf_r+0x406>
  404dcc:	aa23      	add	r2, sp, #140	; 0x8c
  404dce:	990a      	ldr	r1, [sp, #40]	; 0x28
  404dd0:	9808      	ldr	r0, [sp, #32]
  404dd2:	f003 f82d 	bl	407e30 <__sprint_r>
  404dd6:	b958      	cbnz	r0, 404df0 <_vfprintf_r+0xb14>
  404dd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404dda:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404dde:	e482      	b.n	4046e6 <_vfprintf_r+0x40a>
  404de0:	aa23      	add	r2, sp, #140	; 0x8c
  404de2:	990a      	ldr	r1, [sp, #40]	; 0x28
  404de4:	9808      	ldr	r0, [sp, #32]
  404de6:	f003 f823 	bl	407e30 <__sprint_r>
  404dea:	2800      	cmp	r0, #0
  404dec:	f43f acc5 	beq.w	40477a <_vfprintf_r+0x49e>
  404df0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404df4:	e6dc      	b.n	404bb0 <_vfprintf_r+0x8d4>
  404df6:	f8dd b018 	ldr.w	fp, [sp, #24]
  404dfa:	2b01      	cmp	r3, #1
  404dfc:	f000 8121 	beq.w	405042 <_vfprintf_r+0xd66>
  404e00:	2b02      	cmp	r3, #2
  404e02:	d127      	bne.n	404e54 <_vfprintf_r+0xb78>
  404e04:	f8cd b018 	str.w	fp, [sp, #24]
  404e08:	2400      	movs	r4, #0
  404e0a:	2500      	movs	r5, #0
  404e0c:	e591      	b.n	404932 <_vfprintf_r+0x656>
  404e0e:	aa23      	add	r2, sp, #140	; 0x8c
  404e10:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e12:	9808      	ldr	r0, [sp, #32]
  404e14:	f003 f80c 	bl	407e30 <__sprint_r>
  404e18:	2800      	cmp	r0, #0
  404e1a:	d1e9      	bne.n	404df0 <_vfprintf_r+0xb14>
  404e1c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e1e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404e22:	e44d      	b.n	4046c0 <_vfprintf_r+0x3e4>
  404e24:	aa23      	add	r2, sp, #140	; 0x8c
  404e26:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e28:	9808      	ldr	r0, [sp, #32]
  404e2a:	f003 f801 	bl	407e30 <__sprint_r>
  404e2e:	2800      	cmp	r0, #0
  404e30:	d1de      	bne.n	404df0 <_vfprintf_r+0xb14>
  404e32:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404e38:	f7ff bbec 	b.w	404614 <_vfprintf_r+0x338>
  404e3c:	aa23      	add	r2, sp, #140	; 0x8c
  404e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e40:	9808      	ldr	r0, [sp, #32]
  404e42:	f002 fff5 	bl	407e30 <__sprint_r>
  404e46:	2800      	cmp	r0, #0
  404e48:	d1d2      	bne.n	404df0 <_vfprintf_r+0xb14>
  404e4a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e4c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404e50:	f7ff bbf0 	b.w	404634 <_vfprintf_r+0x358>
  404e54:	f8cd b018 	str.w	fp, [sp, #24]
  404e58:	2400      	movs	r4, #0
  404e5a:	2500      	movs	r5, #0
  404e5c:	a930      	add	r1, sp, #192	; 0xc0
  404e5e:	e000      	b.n	404e62 <_vfprintf_r+0xb86>
  404e60:	4639      	mov	r1, r7
  404e62:	08e2      	lsrs	r2, r4, #3
  404e64:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404e68:	08e8      	lsrs	r0, r5, #3
  404e6a:	f004 0307 	and.w	r3, r4, #7
  404e6e:	4605      	mov	r5, r0
  404e70:	4614      	mov	r4, r2
  404e72:	3330      	adds	r3, #48	; 0x30
  404e74:	ea54 0205 	orrs.w	r2, r4, r5
  404e78:	f801 3c01 	strb.w	r3, [r1, #-1]
  404e7c:	f101 37ff 	add.w	r7, r1, #4294967295
  404e80:	d1ee      	bne.n	404e60 <_vfprintf_r+0xb84>
  404e82:	9a06      	ldr	r2, [sp, #24]
  404e84:	07d2      	lsls	r2, r2, #31
  404e86:	f57f ad64 	bpl.w	404952 <_vfprintf_r+0x676>
  404e8a:	2b30      	cmp	r3, #48	; 0x30
  404e8c:	f43f ad61 	beq.w	404952 <_vfprintf_r+0x676>
  404e90:	2330      	movs	r3, #48	; 0x30
  404e92:	3902      	subs	r1, #2
  404e94:	f807 3c01 	strb.w	r3, [r7, #-1]
  404e98:	ab30      	add	r3, sp, #192	; 0xc0
  404e9a:	1a5b      	subs	r3, r3, r1
  404e9c:	930d      	str	r3, [sp, #52]	; 0x34
  404e9e:	460f      	mov	r7, r1
  404ea0:	f7ff bb46 	b.w	404530 <_vfprintf_r+0x254>
  404ea4:	2302      	movs	r3, #2
  404ea6:	f7ff bb25 	b.w	4044f4 <_vfprintf_r+0x218>
  404eaa:	991d      	ldr	r1, [sp, #116]	; 0x74
  404eac:	2900      	cmp	r1, #0
  404eae:	f340 8274 	ble.w	40539a <_vfprintf_r+0x10be>
  404eb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404eb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404eb6:	4293      	cmp	r3, r2
  404eb8:	bfa8      	it	ge
  404eba:	4613      	movge	r3, r2
  404ebc:	2b00      	cmp	r3, #0
  404ebe:	461e      	mov	r6, r3
  404ec0:	dd0d      	ble.n	404ede <_vfprintf_r+0xc02>
  404ec2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ec4:	f8c8 7000 	str.w	r7, [r8]
  404ec8:	3301      	adds	r3, #1
  404eca:	4434      	add	r4, r6
  404ecc:	2b07      	cmp	r3, #7
  404ece:	9425      	str	r4, [sp, #148]	; 0x94
  404ed0:	f8c8 6004 	str.w	r6, [r8, #4]
  404ed4:	9324      	str	r3, [sp, #144]	; 0x90
  404ed6:	f300 8324 	bgt.w	405522 <_vfprintf_r+0x1246>
  404eda:	f108 0808 	add.w	r8, r8, #8
  404ede:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404ee0:	2e00      	cmp	r6, #0
  404ee2:	bfa8      	it	ge
  404ee4:	1b9b      	subge	r3, r3, r6
  404ee6:	2b00      	cmp	r3, #0
  404ee8:	461e      	mov	r6, r3
  404eea:	f340 80d0 	ble.w	40508e <_vfprintf_r+0xdb2>
  404eee:	2e10      	cmp	r6, #16
  404ef0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ef2:	4dc0      	ldr	r5, [pc, #768]	; (4051f4 <_vfprintf_r+0xf18>)
  404ef4:	f340 80b7 	ble.w	405066 <_vfprintf_r+0xd8a>
  404ef8:	4622      	mov	r2, r4
  404efa:	f04f 0a10 	mov.w	sl, #16
  404efe:	f8dd b020 	ldr.w	fp, [sp, #32]
  404f02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404f04:	e005      	b.n	404f12 <_vfprintf_r+0xc36>
  404f06:	f108 0808 	add.w	r8, r8, #8
  404f0a:	3e10      	subs	r6, #16
  404f0c:	2e10      	cmp	r6, #16
  404f0e:	f340 80a9 	ble.w	405064 <_vfprintf_r+0xd88>
  404f12:	3301      	adds	r3, #1
  404f14:	3210      	adds	r2, #16
  404f16:	2b07      	cmp	r3, #7
  404f18:	9225      	str	r2, [sp, #148]	; 0x94
  404f1a:	9324      	str	r3, [sp, #144]	; 0x90
  404f1c:	e888 0420 	stmia.w	r8, {r5, sl}
  404f20:	ddf1      	ble.n	404f06 <_vfprintf_r+0xc2a>
  404f22:	aa23      	add	r2, sp, #140	; 0x8c
  404f24:	4621      	mov	r1, r4
  404f26:	4658      	mov	r0, fp
  404f28:	f002 ff82 	bl	407e30 <__sprint_r>
  404f2c:	2800      	cmp	r0, #0
  404f2e:	f040 8324 	bne.w	40557a <_vfprintf_r+0x129e>
  404f32:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404f34:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f36:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f3a:	e7e6      	b.n	404f0a <_vfprintf_r+0xc2e>
  404f3c:	2d00      	cmp	r5, #0
  404f3e:	bf08      	it	eq
  404f40:	2c0a      	cmpeq	r4, #10
  404f42:	d37c      	bcc.n	40503e <_vfprintf_r+0xd62>
  404f44:	af30      	add	r7, sp, #192	; 0xc0
  404f46:	4620      	mov	r0, r4
  404f48:	4629      	mov	r1, r5
  404f4a:	220a      	movs	r2, #10
  404f4c:	2300      	movs	r3, #0
  404f4e:	f003 fae5 	bl	40851c <__aeabi_uldivmod>
  404f52:	3230      	adds	r2, #48	; 0x30
  404f54:	f807 2d01 	strb.w	r2, [r7, #-1]!
  404f58:	4620      	mov	r0, r4
  404f5a:	4629      	mov	r1, r5
  404f5c:	2300      	movs	r3, #0
  404f5e:	220a      	movs	r2, #10
  404f60:	f003 fadc 	bl	40851c <__aeabi_uldivmod>
  404f64:	4604      	mov	r4, r0
  404f66:	460d      	mov	r5, r1
  404f68:	ea54 0305 	orrs.w	r3, r4, r5
  404f6c:	d1eb      	bne.n	404f46 <_vfprintf_r+0xc6a>
  404f6e:	ab30      	add	r3, sp, #192	; 0xc0
  404f70:	1bdb      	subs	r3, r3, r7
  404f72:	930d      	str	r3, [sp, #52]	; 0x34
  404f74:	f7ff badc 	b.w	404530 <_vfprintf_r+0x254>
  404f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f7a:	930d      	str	r3, [sp, #52]	; 0x34
  404f7c:	af30      	add	r7, sp, #192	; 0xc0
  404f7e:	f7ff bad7 	b.w	404530 <_vfprintf_r+0x254>
  404f82:	aa23      	add	r2, sp, #140	; 0x8c
  404f84:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f86:	9808      	ldr	r0, [sp, #32]
  404f88:	f002 ff52 	bl	407e30 <__sprint_r>
  404f8c:	2800      	cmp	r0, #0
  404f8e:	f47f af2f 	bne.w	404df0 <_vfprintf_r+0xb14>
  404f92:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404f96:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f98:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f9c:	f7ff bb28 	b.w	4045f0 <_vfprintf_r+0x314>
  404fa0:	1e5f      	subs	r7, r3, #1
  404fa2:	2f00      	cmp	r7, #0
  404fa4:	f77f af05 	ble.w	404db2 <_vfprintf_r+0xad6>
  404fa8:	2f10      	cmp	r7, #16
  404faa:	4d92      	ldr	r5, [pc, #584]	; (4051f4 <_vfprintf_r+0xf18>)
  404fac:	f340 810a 	ble.w	4051c4 <_vfprintf_r+0xee8>
  404fb0:	f04f 0a10 	mov.w	sl, #16
  404fb4:	f8dd b020 	ldr.w	fp, [sp, #32]
  404fb8:	e005      	b.n	404fc6 <_vfprintf_r+0xcea>
  404fba:	f108 0808 	add.w	r8, r8, #8
  404fbe:	3f10      	subs	r7, #16
  404fc0:	2f10      	cmp	r7, #16
  404fc2:	f340 80ff 	ble.w	4051c4 <_vfprintf_r+0xee8>
  404fc6:	3601      	adds	r6, #1
  404fc8:	3410      	adds	r4, #16
  404fca:	2e07      	cmp	r6, #7
  404fcc:	9425      	str	r4, [sp, #148]	; 0x94
  404fce:	9624      	str	r6, [sp, #144]	; 0x90
  404fd0:	e888 0420 	stmia.w	r8, {r5, sl}
  404fd4:	ddf1      	ble.n	404fba <_vfprintf_r+0xcde>
  404fd6:	aa23      	add	r2, sp, #140	; 0x8c
  404fd8:	990a      	ldr	r1, [sp, #40]	; 0x28
  404fda:	4658      	mov	r0, fp
  404fdc:	f002 ff28 	bl	407e30 <__sprint_r>
  404fe0:	2800      	cmp	r0, #0
  404fe2:	f47f af05 	bne.w	404df0 <_vfprintf_r+0xb14>
  404fe6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404fe8:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404fea:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404fee:	e7e6      	b.n	404fbe <_vfprintf_r+0xce2>
  404ff0:	990e      	ldr	r1, [sp, #56]	; 0x38
  404ff2:	460a      	mov	r2, r1
  404ff4:	3204      	adds	r2, #4
  404ff6:	680c      	ldr	r4, [r1, #0]
  404ff8:	920e      	str	r2, [sp, #56]	; 0x38
  404ffa:	2500      	movs	r5, #0
  404ffc:	f7ff ba7a 	b.w	4044f4 <_vfprintf_r+0x218>
  405000:	681c      	ldr	r4, [r3, #0]
  405002:	3304      	adds	r3, #4
  405004:	930e      	str	r3, [sp, #56]	; 0x38
  405006:	2500      	movs	r5, #0
  405008:	e426      	b.n	404858 <_vfprintf_r+0x57c>
  40500a:	3301      	adds	r3, #1
  40500c:	4434      	add	r4, r6
  40500e:	2b07      	cmp	r3, #7
  405010:	9425      	str	r4, [sp, #148]	; 0x94
  405012:	9324      	str	r3, [sp, #144]	; 0x90
  405014:	e888 0060 	stmia.w	r8, {r5, r6}
  405018:	f77f ab63 	ble.w	4046e2 <_vfprintf_r+0x406>
  40501c:	e6d6      	b.n	404dcc <_vfprintf_r+0xaf0>
  40501e:	3204      	adds	r2, #4
  405020:	681c      	ldr	r4, [r3, #0]
  405022:	920e      	str	r2, [sp, #56]	; 0x38
  405024:	2301      	movs	r3, #1
  405026:	2500      	movs	r5, #0
  405028:	f7ff ba64 	b.w	4044f4 <_vfprintf_r+0x218>
  40502c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40502e:	6814      	ldr	r4, [r2, #0]
  405030:	4613      	mov	r3, r2
  405032:	3304      	adds	r3, #4
  405034:	17e5      	asrs	r5, r4, #31
  405036:	930e      	str	r3, [sp, #56]	; 0x38
  405038:	4622      	mov	r2, r4
  40503a:	462b      	mov	r3, r5
  40503c:	e460      	b.n	404900 <_vfprintf_r+0x624>
  40503e:	f8dd b018 	ldr.w	fp, [sp, #24]
  405042:	f8cd b018 	str.w	fp, [sp, #24]
  405046:	af40      	add	r7, sp, #256	; 0x100
  405048:	3430      	adds	r4, #48	; 0x30
  40504a:	2301      	movs	r3, #1
  40504c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405050:	930d      	str	r3, [sp, #52]	; 0x34
  405052:	f7ff ba6d 	b.w	404530 <_vfprintf_r+0x254>
  405056:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40505a:	f002 f895 	bl	407188 <__retarget_lock_release_recursive>
  40505e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  405062:	e5af      	b.n	404bc4 <_vfprintf_r+0x8e8>
  405064:	4614      	mov	r4, r2
  405066:	3301      	adds	r3, #1
  405068:	4434      	add	r4, r6
  40506a:	2b07      	cmp	r3, #7
  40506c:	9425      	str	r4, [sp, #148]	; 0x94
  40506e:	9324      	str	r3, [sp, #144]	; 0x90
  405070:	e888 0060 	stmia.w	r8, {r5, r6}
  405074:	f340 816d 	ble.w	405352 <_vfprintf_r+0x1076>
  405078:	aa23      	add	r2, sp, #140	; 0x8c
  40507a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40507c:	9808      	ldr	r0, [sp, #32]
  40507e:	f002 fed7 	bl	407e30 <__sprint_r>
  405082:	2800      	cmp	r0, #0
  405084:	f47f aeb4 	bne.w	404df0 <_vfprintf_r+0xb14>
  405088:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40508a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40508e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405090:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405092:	4293      	cmp	r3, r2
  405094:	f280 8158 	bge.w	405348 <_vfprintf_r+0x106c>
  405098:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40509a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40509c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40509e:	f8c8 1000 	str.w	r1, [r8]
  4050a2:	3201      	adds	r2, #1
  4050a4:	4404      	add	r4, r0
  4050a6:	2a07      	cmp	r2, #7
  4050a8:	9425      	str	r4, [sp, #148]	; 0x94
  4050aa:	f8c8 0004 	str.w	r0, [r8, #4]
  4050ae:	9224      	str	r2, [sp, #144]	; 0x90
  4050b0:	f300 8152 	bgt.w	405358 <_vfprintf_r+0x107c>
  4050b4:	f108 0808 	add.w	r8, r8, #8
  4050b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050ba:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050bc:	1ad3      	subs	r3, r2, r3
  4050be:	1a56      	subs	r6, r2, r1
  4050c0:	429e      	cmp	r6, r3
  4050c2:	bfa8      	it	ge
  4050c4:	461e      	movge	r6, r3
  4050c6:	2e00      	cmp	r6, #0
  4050c8:	dd0e      	ble.n	4050e8 <_vfprintf_r+0xe0c>
  4050ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4050cc:	f8c8 6004 	str.w	r6, [r8, #4]
  4050d0:	3201      	adds	r2, #1
  4050d2:	440f      	add	r7, r1
  4050d4:	4434      	add	r4, r6
  4050d6:	2a07      	cmp	r2, #7
  4050d8:	f8c8 7000 	str.w	r7, [r8]
  4050dc:	9425      	str	r4, [sp, #148]	; 0x94
  4050de:	9224      	str	r2, [sp, #144]	; 0x90
  4050e0:	f300 823c 	bgt.w	40555c <_vfprintf_r+0x1280>
  4050e4:	f108 0808 	add.w	r8, r8, #8
  4050e8:	2e00      	cmp	r6, #0
  4050ea:	bfac      	ite	ge
  4050ec:	1b9e      	subge	r6, r3, r6
  4050ee:	461e      	movlt	r6, r3
  4050f0:	2e00      	cmp	r6, #0
  4050f2:	f77f aaf8 	ble.w	4046e6 <_vfprintf_r+0x40a>
  4050f6:	2e10      	cmp	r6, #16
  4050f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050fa:	4d3e      	ldr	r5, [pc, #248]	; (4051f4 <_vfprintf_r+0xf18>)
  4050fc:	dd85      	ble.n	40500a <_vfprintf_r+0xd2e>
  4050fe:	2710      	movs	r7, #16
  405100:	f8dd a020 	ldr.w	sl, [sp, #32]
  405104:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405108:	e005      	b.n	405116 <_vfprintf_r+0xe3a>
  40510a:	f108 0808 	add.w	r8, r8, #8
  40510e:	3e10      	subs	r6, #16
  405110:	2e10      	cmp	r6, #16
  405112:	f77f af7a 	ble.w	40500a <_vfprintf_r+0xd2e>
  405116:	3301      	adds	r3, #1
  405118:	3410      	adds	r4, #16
  40511a:	2b07      	cmp	r3, #7
  40511c:	9425      	str	r4, [sp, #148]	; 0x94
  40511e:	9324      	str	r3, [sp, #144]	; 0x90
  405120:	e888 00a0 	stmia.w	r8, {r5, r7}
  405124:	ddf1      	ble.n	40510a <_vfprintf_r+0xe2e>
  405126:	aa23      	add	r2, sp, #140	; 0x8c
  405128:	4659      	mov	r1, fp
  40512a:	4650      	mov	r0, sl
  40512c:	f002 fe80 	bl	407e30 <__sprint_r>
  405130:	2800      	cmp	r0, #0
  405132:	f040 8176 	bne.w	405422 <_vfprintf_r+0x1146>
  405136:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405138:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40513a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40513e:	e7e6      	b.n	40510e <_vfprintf_r+0xe32>
  405140:	9b06      	ldr	r3, [sp, #24]
  405142:	07d8      	lsls	r0, r3, #31
  405144:	f53f adff 	bmi.w	404d46 <_vfprintf_r+0xa6a>
  405148:	3601      	adds	r6, #1
  40514a:	3401      	adds	r4, #1
  40514c:	2301      	movs	r3, #1
  40514e:	2e07      	cmp	r6, #7
  405150:	9425      	str	r4, [sp, #148]	; 0x94
  405152:	9624      	str	r6, [sp, #144]	; 0x90
  405154:	f8c8 7000 	str.w	r7, [r8]
  405158:	f8c8 3004 	str.w	r3, [r8, #4]
  40515c:	f77f ae27 	ble.w	404dae <_vfprintf_r+0xad2>
  405160:	aa23      	add	r2, sp, #140	; 0x8c
  405162:	990a      	ldr	r1, [sp, #40]	; 0x28
  405164:	9808      	ldr	r0, [sp, #32]
  405166:	f002 fe63 	bl	407e30 <__sprint_r>
  40516a:	2800      	cmp	r0, #0
  40516c:	f47f ae40 	bne.w	404df0 <_vfprintf_r+0xb14>
  405170:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405172:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405174:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405178:	e61b      	b.n	404db2 <_vfprintf_r+0xad6>
  40517a:	aa23      	add	r2, sp, #140	; 0x8c
  40517c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40517e:	9808      	ldr	r0, [sp, #32]
  405180:	f002 fe56 	bl	407e30 <__sprint_r>
  405184:	2800      	cmp	r0, #0
  405186:	f47f ae33 	bne.w	404df0 <_vfprintf_r+0xb14>
  40518a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40518c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40518e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405192:	e5e6      	b.n	404d62 <_vfprintf_r+0xa86>
  405194:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405196:	3507      	adds	r5, #7
  405198:	f025 0507 	bic.w	r5, r5, #7
  40519c:	e9d5 2300 	ldrd	r2, r3, [r5]
  4051a0:	f105 0108 	add.w	r1, r5, #8
  4051a4:	910e      	str	r1, [sp, #56]	; 0x38
  4051a6:	4614      	mov	r4, r2
  4051a8:	461d      	mov	r5, r3
  4051aa:	f7ff bba9 	b.w	404900 <_vfprintf_r+0x624>
  4051ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4051b0:	3507      	adds	r5, #7
  4051b2:	f025 0307 	bic.w	r3, r5, #7
  4051b6:	f103 0208 	add.w	r2, r3, #8
  4051ba:	920e      	str	r2, [sp, #56]	; 0x38
  4051bc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4051c0:	f7ff bb4a 	b.w	404858 <_vfprintf_r+0x57c>
  4051c4:	3601      	adds	r6, #1
  4051c6:	443c      	add	r4, r7
  4051c8:	2e07      	cmp	r6, #7
  4051ca:	9425      	str	r4, [sp, #148]	; 0x94
  4051cc:	9624      	str	r6, [sp, #144]	; 0x90
  4051ce:	e888 00a0 	stmia.w	r8, {r5, r7}
  4051d2:	f77f adec 	ble.w	404dae <_vfprintf_r+0xad2>
  4051d6:	e7c3      	b.n	405160 <_vfprintf_r+0xe84>
  4051d8:	aa23      	add	r2, sp, #140	; 0x8c
  4051da:	990a      	ldr	r1, [sp, #40]	; 0x28
  4051dc:	9808      	ldr	r0, [sp, #32]
  4051de:	f002 fe27 	bl	407e30 <__sprint_r>
  4051e2:	2800      	cmp	r0, #0
  4051e4:	f47f ae04 	bne.w	404df0 <_vfprintf_r+0xb14>
  4051e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4051ea:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4051ec:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4051f0:	e5c6      	b.n	404d80 <_vfprintf_r+0xaa4>
  4051f2:	bf00      	nop
  4051f4:	00408944 	.word	0x00408944
  4051f8:	af30      	add	r7, sp, #192	; 0xc0
  4051fa:	f7ff b999 	b.w	404530 <_vfprintf_r+0x254>
  4051fe:	aa23      	add	r2, sp, #140	; 0x8c
  405200:	990a      	ldr	r1, [sp, #40]	; 0x28
  405202:	9808      	ldr	r0, [sp, #32]
  405204:	f002 fe14 	bl	407e30 <__sprint_r>
  405208:	2800      	cmp	r0, #0
  40520a:	f47f adf1 	bne.w	404df0 <_vfprintf_r+0xb14>
  40520e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405210:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405214:	f7ff ba11 	b.w	40463a <_vfprintf_r+0x35e>
  405218:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40521c:	4264      	negs	r4, r4
  40521e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405222:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405226:	2301      	movs	r3, #1
  405228:	f7ff b968 	b.w	4044fc <_vfprintf_r+0x220>
  40522c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40522e:	4622      	mov	r2, r4
  405230:	4620      	mov	r0, r4
  405232:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405234:	4623      	mov	r3, r4
  405236:	4621      	mov	r1, r4
  405238:	f003 f932 	bl	4084a0 <__aeabi_dcmpun>
  40523c:	2800      	cmp	r0, #0
  40523e:	f040 828c 	bne.w	40575a <_vfprintf_r+0x147e>
  405242:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405244:	3301      	adds	r3, #1
  405246:	f026 0320 	bic.w	r3, r6, #32
  40524a:	930d      	str	r3, [sp, #52]	; 0x34
  40524c:	f000 8091 	beq.w	405372 <_vfprintf_r+0x1096>
  405250:	2b47      	cmp	r3, #71	; 0x47
  405252:	d104      	bne.n	40525e <_vfprintf_r+0xf82>
  405254:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405256:	2b00      	cmp	r3, #0
  405258:	bf08      	it	eq
  40525a:	2301      	moveq	r3, #1
  40525c:	9309      	str	r3, [sp, #36]	; 0x24
  40525e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405262:	9306      	str	r3, [sp, #24]
  405264:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405266:	f1b3 0a00 	subs.w	sl, r3, #0
  40526a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40526c:	9307      	str	r3, [sp, #28]
  40526e:	bfbb      	ittet	lt
  405270:	4653      	movlt	r3, sl
  405272:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  405276:	2300      	movge	r3, #0
  405278:	232d      	movlt	r3, #45	; 0x2d
  40527a:	2e66      	cmp	r6, #102	; 0x66
  40527c:	930f      	str	r3, [sp, #60]	; 0x3c
  40527e:	f000 817f 	beq.w	405580 <_vfprintf_r+0x12a4>
  405282:	2e46      	cmp	r6, #70	; 0x46
  405284:	f000 81d4 	beq.w	405630 <_vfprintf_r+0x1354>
  405288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40528a:	9a07      	ldr	r2, [sp, #28]
  40528c:	2b45      	cmp	r3, #69	; 0x45
  40528e:	bf0c      	ite	eq
  405290:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  405292:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  405294:	a821      	add	r0, sp, #132	; 0x84
  405296:	a91e      	add	r1, sp, #120	; 0x78
  405298:	bf08      	it	eq
  40529a:	1c5d      	addeq	r5, r3, #1
  40529c:	9004      	str	r0, [sp, #16]
  40529e:	9103      	str	r1, [sp, #12]
  4052a0:	a81d      	add	r0, sp, #116	; 0x74
  4052a2:	2102      	movs	r1, #2
  4052a4:	9002      	str	r0, [sp, #8]
  4052a6:	4653      	mov	r3, sl
  4052a8:	9501      	str	r5, [sp, #4]
  4052aa:	9100      	str	r1, [sp, #0]
  4052ac:	9808      	ldr	r0, [sp, #32]
  4052ae:	f000 fc0b 	bl	405ac8 <_dtoa_r>
  4052b2:	2e67      	cmp	r6, #103	; 0x67
  4052b4:	4607      	mov	r7, r0
  4052b6:	f040 81af 	bne.w	405618 <_vfprintf_r+0x133c>
  4052ba:	f01b 0f01 	tst.w	fp, #1
  4052be:	f000 8213 	beq.w	4056e8 <_vfprintf_r+0x140c>
  4052c2:	197c      	adds	r4, r7, r5
  4052c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4052c6:	9807      	ldr	r0, [sp, #28]
  4052c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4052ca:	4651      	mov	r1, sl
  4052cc:	f003 f8b6 	bl	40843c <__aeabi_dcmpeq>
  4052d0:	2800      	cmp	r0, #0
  4052d2:	f040 8132 	bne.w	40553a <_vfprintf_r+0x125e>
  4052d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4052d8:	42a3      	cmp	r3, r4
  4052da:	d206      	bcs.n	4052ea <_vfprintf_r+0x100e>
  4052dc:	2130      	movs	r1, #48	; 0x30
  4052de:	1c5a      	adds	r2, r3, #1
  4052e0:	9221      	str	r2, [sp, #132]	; 0x84
  4052e2:	7019      	strb	r1, [r3, #0]
  4052e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4052e6:	429c      	cmp	r4, r3
  4052e8:	d8f9      	bhi.n	4052de <_vfprintf_r+0x1002>
  4052ea:	1bdb      	subs	r3, r3, r7
  4052ec:	9311      	str	r3, [sp, #68]	; 0x44
  4052ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4052f0:	2b47      	cmp	r3, #71	; 0x47
  4052f2:	f000 80b9 	beq.w	405468 <_vfprintf_r+0x118c>
  4052f6:	2e65      	cmp	r6, #101	; 0x65
  4052f8:	f340 8276 	ble.w	4057e8 <_vfprintf_r+0x150c>
  4052fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4052fe:	9310      	str	r3, [sp, #64]	; 0x40
  405300:	2e66      	cmp	r6, #102	; 0x66
  405302:	f000 8162 	beq.w	4055ca <_vfprintf_r+0x12ee>
  405306:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405308:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40530a:	4619      	mov	r1, r3
  40530c:	4291      	cmp	r1, r2
  40530e:	f300 814f 	bgt.w	4055b0 <_vfprintf_r+0x12d4>
  405312:	f01b 0f01 	tst.w	fp, #1
  405316:	f040 8209 	bne.w	40572c <_vfprintf_r+0x1450>
  40531a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40531e:	9307      	str	r3, [sp, #28]
  405320:	920d      	str	r2, [sp, #52]	; 0x34
  405322:	2667      	movs	r6, #103	; 0x67
  405324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405326:	2b00      	cmp	r3, #0
  405328:	f040 8096 	bne.w	405458 <_vfprintf_r+0x117c>
  40532c:	9309      	str	r3, [sp, #36]	; 0x24
  40532e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405332:	f7ff b905 	b.w	404540 <_vfprintf_r+0x264>
  405336:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40533a:	f001 ff25 	bl	407188 <__retarget_lock_release_recursive>
  40533e:	f04f 33ff 	mov.w	r3, #4294967295
  405342:	930b      	str	r3, [sp, #44]	; 0x2c
  405344:	f7ff ba30 	b.w	4047a8 <_vfprintf_r+0x4cc>
  405348:	9a06      	ldr	r2, [sp, #24]
  40534a:	07d5      	lsls	r5, r2, #31
  40534c:	f57f aeb4 	bpl.w	4050b8 <_vfprintf_r+0xddc>
  405350:	e6a2      	b.n	405098 <_vfprintf_r+0xdbc>
  405352:	f108 0808 	add.w	r8, r8, #8
  405356:	e69a      	b.n	40508e <_vfprintf_r+0xdb2>
  405358:	aa23      	add	r2, sp, #140	; 0x8c
  40535a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40535c:	9808      	ldr	r0, [sp, #32]
  40535e:	f002 fd67 	bl	407e30 <__sprint_r>
  405362:	2800      	cmp	r0, #0
  405364:	f47f ad44 	bne.w	404df0 <_vfprintf_r+0xb14>
  405368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40536a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40536c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405370:	e6a2      	b.n	4050b8 <_vfprintf_r+0xddc>
  405372:	2306      	movs	r3, #6
  405374:	9309      	str	r3, [sp, #36]	; 0x24
  405376:	e772      	b.n	40525e <_vfprintf_r+0xf82>
  405378:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40537c:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405380:	f7ff bbc7 	b.w	404b12 <_vfprintf_r+0x836>
  405384:	aa23      	add	r2, sp, #140	; 0x8c
  405386:	990a      	ldr	r1, [sp, #40]	; 0x28
  405388:	9808      	ldr	r0, [sp, #32]
  40538a:	f002 fd51 	bl	407e30 <__sprint_r>
  40538e:	2800      	cmp	r0, #0
  405390:	f47f ad2e 	bne.w	404df0 <_vfprintf_r+0xb14>
  405394:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405398:	e437      	b.n	404c0a <_vfprintf_r+0x92e>
  40539a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40539c:	4ab4      	ldr	r2, [pc, #720]	; (405670 <_vfprintf_r+0x1394>)
  40539e:	f8c8 2000 	str.w	r2, [r8]
  4053a2:	3301      	adds	r3, #1
  4053a4:	3401      	adds	r4, #1
  4053a6:	2201      	movs	r2, #1
  4053a8:	2b07      	cmp	r3, #7
  4053aa:	9425      	str	r4, [sp, #148]	; 0x94
  4053ac:	9324      	str	r3, [sp, #144]	; 0x90
  4053ae:	f8c8 2004 	str.w	r2, [r8, #4]
  4053b2:	f300 8124 	bgt.w	4055fe <_vfprintf_r+0x1322>
  4053b6:	f108 0808 	add.w	r8, r8, #8
  4053ba:	b929      	cbnz	r1, 4053c8 <_vfprintf_r+0x10ec>
  4053bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053be:	b91b      	cbnz	r3, 4053c8 <_vfprintf_r+0x10ec>
  4053c0:	9b06      	ldr	r3, [sp, #24]
  4053c2:	07de      	lsls	r6, r3, #31
  4053c4:	f57f a98f 	bpl.w	4046e6 <_vfprintf_r+0x40a>
  4053c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053ca:	9814      	ldr	r0, [sp, #80]	; 0x50
  4053cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4053ce:	f8c8 2000 	str.w	r2, [r8]
  4053d2:	3301      	adds	r3, #1
  4053d4:	4602      	mov	r2, r0
  4053d6:	4422      	add	r2, r4
  4053d8:	2b07      	cmp	r3, #7
  4053da:	9225      	str	r2, [sp, #148]	; 0x94
  4053dc:	f8c8 0004 	str.w	r0, [r8, #4]
  4053e0:	9324      	str	r3, [sp, #144]	; 0x90
  4053e2:	f300 8169 	bgt.w	4056b8 <_vfprintf_r+0x13dc>
  4053e6:	f108 0808 	add.w	r8, r8, #8
  4053ea:	2900      	cmp	r1, #0
  4053ec:	f2c0 8136 	blt.w	40565c <_vfprintf_r+0x1380>
  4053f0:	9911      	ldr	r1, [sp, #68]	; 0x44
  4053f2:	f8c8 7000 	str.w	r7, [r8]
  4053f6:	3301      	adds	r3, #1
  4053f8:	188c      	adds	r4, r1, r2
  4053fa:	2b07      	cmp	r3, #7
  4053fc:	9425      	str	r4, [sp, #148]	; 0x94
  4053fe:	9324      	str	r3, [sp, #144]	; 0x90
  405400:	f8c8 1004 	str.w	r1, [r8, #4]
  405404:	f77f a96d 	ble.w	4046e2 <_vfprintf_r+0x406>
  405408:	e4e0      	b.n	404dcc <_vfprintf_r+0xaf0>
  40540a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40540c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40540e:	6813      	ldr	r3, [r2, #0]
  405410:	17cd      	asrs	r5, r1, #31
  405412:	4608      	mov	r0, r1
  405414:	3204      	adds	r2, #4
  405416:	4629      	mov	r1, r5
  405418:	920e      	str	r2, [sp, #56]	; 0x38
  40541a:	e9c3 0100 	strd	r0, r1, [r3]
  40541e:	f7fe bfa9 	b.w	404374 <_vfprintf_r+0x98>
  405422:	46da      	mov	sl, fp
  405424:	f7ff bbc4 	b.w	404bb0 <_vfprintf_r+0x8d4>
  405428:	aa23      	add	r2, sp, #140	; 0x8c
  40542a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40542c:	9808      	ldr	r0, [sp, #32]
  40542e:	f002 fcff 	bl	407e30 <__sprint_r>
  405432:	2800      	cmp	r0, #0
  405434:	f47f acdc 	bne.w	404df0 <_vfprintf_r+0xb14>
  405438:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40543a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40543e:	f7ff bbfd 	b.w	404c3c <_vfprintf_r+0x960>
  405442:	4638      	mov	r0, r7
  405444:	9409      	str	r4, [sp, #36]	; 0x24
  405446:	f7fe fedb 	bl	404200 <strlen>
  40544a:	950e      	str	r5, [sp, #56]	; 0x38
  40544c:	900d      	str	r0, [sp, #52]	; 0x34
  40544e:	f8cd b018 	str.w	fp, [sp, #24]
  405452:	4603      	mov	r3, r0
  405454:	f7ff ba36 	b.w	4048c4 <_vfprintf_r+0x5e8>
  405458:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40545c:	2300      	movs	r3, #0
  40545e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405462:	9309      	str	r3, [sp, #36]	; 0x24
  405464:	f7ff b86f 	b.w	404546 <_vfprintf_r+0x26a>
  405468:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40546a:	9310      	str	r3, [sp, #64]	; 0x40
  40546c:	461a      	mov	r2, r3
  40546e:	3303      	adds	r3, #3
  405470:	db04      	blt.n	40547c <_vfprintf_r+0x11a0>
  405472:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405474:	4619      	mov	r1, r3
  405476:	4291      	cmp	r1, r2
  405478:	f6bf af45 	bge.w	405306 <_vfprintf_r+0x102a>
  40547c:	3e02      	subs	r6, #2
  40547e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405480:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  405484:	3b01      	subs	r3, #1
  405486:	2b00      	cmp	r3, #0
  405488:	931d      	str	r3, [sp, #116]	; 0x74
  40548a:	bfbd      	ittte	lt
  40548c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40548e:	f1c3 0301 	rsblt	r3, r3, #1
  405492:	222d      	movlt	r2, #45	; 0x2d
  405494:	222b      	movge	r2, #43	; 0x2b
  405496:	2b09      	cmp	r3, #9
  405498:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40549c:	f340 813e 	ble.w	40571c <_vfprintf_r+0x1440>
  4054a0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  4054a4:	4620      	mov	r0, r4
  4054a6:	4d73      	ldr	r5, [pc, #460]	; (405674 <_vfprintf_r+0x1398>)
  4054a8:	e000      	b.n	4054ac <_vfprintf_r+0x11d0>
  4054aa:	4610      	mov	r0, r2
  4054ac:	fb85 1203 	smull	r1, r2, r5, r3
  4054b0:	17d9      	asrs	r1, r3, #31
  4054b2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4054b6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4054ba:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4054be:	3230      	adds	r2, #48	; 0x30
  4054c0:	2909      	cmp	r1, #9
  4054c2:	f800 2c01 	strb.w	r2, [r0, #-1]
  4054c6:	460b      	mov	r3, r1
  4054c8:	f100 32ff 	add.w	r2, r0, #4294967295
  4054cc:	dced      	bgt.n	4054aa <_vfprintf_r+0x11ce>
  4054ce:	3330      	adds	r3, #48	; 0x30
  4054d0:	3802      	subs	r0, #2
  4054d2:	b2d9      	uxtb	r1, r3
  4054d4:	4284      	cmp	r4, r0
  4054d6:	f802 1c01 	strb.w	r1, [r2, #-1]
  4054da:	f240 8190 	bls.w	4057fe <_vfprintf_r+0x1522>
  4054de:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  4054e2:	4613      	mov	r3, r2
  4054e4:	e001      	b.n	4054ea <_vfprintf_r+0x120e>
  4054e6:	f813 1b01 	ldrb.w	r1, [r3], #1
  4054ea:	f800 1b01 	strb.w	r1, [r0], #1
  4054ee:	42a3      	cmp	r3, r4
  4054f0:	d1f9      	bne.n	4054e6 <_vfprintf_r+0x120a>
  4054f2:	3301      	adds	r3, #1
  4054f4:	1a9b      	subs	r3, r3, r2
  4054f6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4054fa:	4413      	add	r3, r2
  4054fc:	aa1f      	add	r2, sp, #124	; 0x7c
  4054fe:	1a9b      	subs	r3, r3, r2
  405500:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405502:	9319      	str	r3, [sp, #100]	; 0x64
  405504:	2a01      	cmp	r2, #1
  405506:	4413      	add	r3, r2
  405508:	930d      	str	r3, [sp, #52]	; 0x34
  40550a:	f340 8145 	ble.w	405798 <_vfprintf_r+0x14bc>
  40550e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405510:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405512:	4413      	add	r3, r2
  405514:	930d      	str	r3, [sp, #52]	; 0x34
  405516:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40551a:	9307      	str	r3, [sp, #28]
  40551c:	2300      	movs	r3, #0
  40551e:	9310      	str	r3, [sp, #64]	; 0x40
  405520:	e700      	b.n	405324 <_vfprintf_r+0x1048>
  405522:	aa23      	add	r2, sp, #140	; 0x8c
  405524:	990a      	ldr	r1, [sp, #40]	; 0x28
  405526:	9808      	ldr	r0, [sp, #32]
  405528:	f002 fc82 	bl	407e30 <__sprint_r>
  40552c:	2800      	cmp	r0, #0
  40552e:	f47f ac5f 	bne.w	404df0 <_vfprintf_r+0xb14>
  405532:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405534:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405538:	e4d1      	b.n	404ede <_vfprintf_r+0xc02>
  40553a:	4623      	mov	r3, r4
  40553c:	e6d5      	b.n	4052ea <_vfprintf_r+0x100e>
  40553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405540:	9710      	str	r7, [sp, #64]	; 0x40
  405542:	2b06      	cmp	r3, #6
  405544:	bf28      	it	cs
  405546:	2306      	movcs	r3, #6
  405548:	9709      	str	r7, [sp, #36]	; 0x24
  40554a:	46ba      	mov	sl, r7
  40554c:	9307      	str	r3, [sp, #28]
  40554e:	950e      	str	r5, [sp, #56]	; 0x38
  405550:	f8cd b018 	str.w	fp, [sp, #24]
  405554:	930d      	str	r3, [sp, #52]	; 0x34
  405556:	4f48      	ldr	r7, [pc, #288]	; (405678 <_vfprintf_r+0x139c>)
  405558:	f7fe bff2 	b.w	404540 <_vfprintf_r+0x264>
  40555c:	aa23      	add	r2, sp, #140	; 0x8c
  40555e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405560:	9808      	ldr	r0, [sp, #32]
  405562:	f002 fc65 	bl	407e30 <__sprint_r>
  405566:	2800      	cmp	r0, #0
  405568:	f47f ac42 	bne.w	404df0 <_vfprintf_r+0xb14>
  40556c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40556e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405570:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405572:	1ad3      	subs	r3, r2, r3
  405574:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405578:	e5b6      	b.n	4050e8 <_vfprintf_r+0xe0c>
  40557a:	46a2      	mov	sl, r4
  40557c:	f7ff bb18 	b.w	404bb0 <_vfprintf_r+0x8d4>
  405580:	a821      	add	r0, sp, #132	; 0x84
  405582:	a91e      	add	r1, sp, #120	; 0x78
  405584:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405586:	9004      	str	r0, [sp, #16]
  405588:	9103      	str	r1, [sp, #12]
  40558a:	a81d      	add	r0, sp, #116	; 0x74
  40558c:	2103      	movs	r1, #3
  40558e:	9002      	str	r0, [sp, #8]
  405590:	9a07      	ldr	r2, [sp, #28]
  405592:	9501      	str	r5, [sp, #4]
  405594:	4653      	mov	r3, sl
  405596:	9100      	str	r1, [sp, #0]
  405598:	9808      	ldr	r0, [sp, #32]
  40559a:	f000 fa95 	bl	405ac8 <_dtoa_r>
  40559e:	4607      	mov	r7, r0
  4055a0:	1944      	adds	r4, r0, r5
  4055a2:	783b      	ldrb	r3, [r7, #0]
  4055a4:	2b30      	cmp	r3, #48	; 0x30
  4055a6:	f000 80ca 	beq.w	40573e <_vfprintf_r+0x1462>
  4055aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4055ac:	442c      	add	r4, r5
  4055ae:	e689      	b.n	4052c4 <_vfprintf_r+0xfe8>
  4055b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4055b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055b4:	4413      	add	r3, r2
  4055b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4055b8:	930d      	str	r3, [sp, #52]	; 0x34
  4055ba:	2a00      	cmp	r2, #0
  4055bc:	f340 80e4 	ble.w	405788 <_vfprintf_r+0x14ac>
  4055c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4055c4:	9307      	str	r3, [sp, #28]
  4055c6:	2667      	movs	r6, #103	; 0x67
  4055c8:	e6ac      	b.n	405324 <_vfprintf_r+0x1048>
  4055ca:	2b00      	cmp	r3, #0
  4055cc:	f340 80fb 	ble.w	4057c6 <_vfprintf_r+0x14ea>
  4055d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4055d2:	2a00      	cmp	r2, #0
  4055d4:	f040 80ce 	bne.w	405774 <_vfprintf_r+0x1498>
  4055d8:	f01b 0f01 	tst.w	fp, #1
  4055dc:	f040 80ca 	bne.w	405774 <_vfprintf_r+0x1498>
  4055e0:	9307      	str	r3, [sp, #28]
  4055e2:	930d      	str	r3, [sp, #52]	; 0x34
  4055e4:	e69e      	b.n	405324 <_vfprintf_r+0x1048>
  4055e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4055e8:	9307      	str	r3, [sp, #28]
  4055ea:	930d      	str	r3, [sp, #52]	; 0x34
  4055ec:	9009      	str	r0, [sp, #36]	; 0x24
  4055ee:	950e      	str	r5, [sp, #56]	; 0x38
  4055f0:	f8cd b018 	str.w	fp, [sp, #24]
  4055f4:	9010      	str	r0, [sp, #64]	; 0x40
  4055f6:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4055fa:	f7fe bfa1 	b.w	404540 <_vfprintf_r+0x264>
  4055fe:	aa23      	add	r2, sp, #140	; 0x8c
  405600:	990a      	ldr	r1, [sp, #40]	; 0x28
  405602:	9808      	ldr	r0, [sp, #32]
  405604:	f002 fc14 	bl	407e30 <__sprint_r>
  405608:	2800      	cmp	r0, #0
  40560a:	f47f abf1 	bne.w	404df0 <_vfprintf_r+0xb14>
  40560e:	991d      	ldr	r1, [sp, #116]	; 0x74
  405610:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405612:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405616:	e6d0      	b.n	4053ba <_vfprintf_r+0x10de>
  405618:	2e47      	cmp	r6, #71	; 0x47
  40561a:	f47f ae52 	bne.w	4052c2 <_vfprintf_r+0xfe6>
  40561e:	f01b 0f01 	tst.w	fp, #1
  405622:	f000 80da 	beq.w	4057da <_vfprintf_r+0x14fe>
  405626:	2e46      	cmp	r6, #70	; 0x46
  405628:	eb07 0405 	add.w	r4, r7, r5
  40562c:	d0b9      	beq.n	4055a2 <_vfprintf_r+0x12c6>
  40562e:	e649      	b.n	4052c4 <_vfprintf_r+0xfe8>
  405630:	a821      	add	r0, sp, #132	; 0x84
  405632:	a91e      	add	r1, sp, #120	; 0x78
  405634:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405636:	9004      	str	r0, [sp, #16]
  405638:	9103      	str	r1, [sp, #12]
  40563a:	a81d      	add	r0, sp, #116	; 0x74
  40563c:	2103      	movs	r1, #3
  40563e:	9002      	str	r0, [sp, #8]
  405640:	9a07      	ldr	r2, [sp, #28]
  405642:	9401      	str	r4, [sp, #4]
  405644:	4653      	mov	r3, sl
  405646:	9100      	str	r1, [sp, #0]
  405648:	9808      	ldr	r0, [sp, #32]
  40564a:	f000 fa3d 	bl	405ac8 <_dtoa_r>
  40564e:	4625      	mov	r5, r4
  405650:	4607      	mov	r7, r0
  405652:	e7e8      	b.n	405626 <_vfprintf_r+0x134a>
  405654:	2300      	movs	r3, #0
  405656:	9309      	str	r3, [sp, #36]	; 0x24
  405658:	f7fe bec1 	b.w	4043de <_vfprintf_r+0x102>
  40565c:	424e      	negs	r6, r1
  40565e:	3110      	adds	r1, #16
  405660:	4d06      	ldr	r5, [pc, #24]	; (40567c <_vfprintf_r+0x13a0>)
  405662:	da43      	bge.n	4056ec <_vfprintf_r+0x1410>
  405664:	2410      	movs	r4, #16
  405666:	f8dd a020 	ldr.w	sl, [sp, #32]
  40566a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40566e:	e00c      	b.n	40568a <_vfprintf_r+0x13ae>
  405670:	00408930 	.word	0x00408930
  405674:	66666667 	.word	0x66666667
  405678:	00408928 	.word	0x00408928
  40567c:	00408944 	.word	0x00408944
  405680:	f108 0808 	add.w	r8, r8, #8
  405684:	3e10      	subs	r6, #16
  405686:	2e10      	cmp	r6, #16
  405688:	dd30      	ble.n	4056ec <_vfprintf_r+0x1410>
  40568a:	3301      	adds	r3, #1
  40568c:	3210      	adds	r2, #16
  40568e:	2b07      	cmp	r3, #7
  405690:	9225      	str	r2, [sp, #148]	; 0x94
  405692:	9324      	str	r3, [sp, #144]	; 0x90
  405694:	f8c8 5000 	str.w	r5, [r8]
  405698:	f8c8 4004 	str.w	r4, [r8, #4]
  40569c:	ddf0      	ble.n	405680 <_vfprintf_r+0x13a4>
  40569e:	aa23      	add	r2, sp, #140	; 0x8c
  4056a0:	4659      	mov	r1, fp
  4056a2:	4650      	mov	r0, sl
  4056a4:	f002 fbc4 	bl	407e30 <__sprint_r>
  4056a8:	2800      	cmp	r0, #0
  4056aa:	f47f aeba 	bne.w	405422 <_vfprintf_r+0x1146>
  4056ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4056b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056b2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4056b6:	e7e5      	b.n	405684 <_vfprintf_r+0x13a8>
  4056b8:	aa23      	add	r2, sp, #140	; 0x8c
  4056ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4056bc:	9808      	ldr	r0, [sp, #32]
  4056be:	f002 fbb7 	bl	407e30 <__sprint_r>
  4056c2:	2800      	cmp	r0, #0
  4056c4:	f47f ab94 	bne.w	404df0 <_vfprintf_r+0xb14>
  4056c8:	991d      	ldr	r1, [sp, #116]	; 0x74
  4056ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4056cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056ce:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4056d2:	e68a      	b.n	4053ea <_vfprintf_r+0x110e>
  4056d4:	9808      	ldr	r0, [sp, #32]
  4056d6:	aa23      	add	r2, sp, #140	; 0x8c
  4056d8:	4651      	mov	r1, sl
  4056da:	f002 fba9 	bl	407e30 <__sprint_r>
  4056de:	2800      	cmp	r0, #0
  4056e0:	f43f aa64 	beq.w	404bac <_vfprintf_r+0x8d0>
  4056e4:	f7ff ba64 	b.w	404bb0 <_vfprintf_r+0x8d4>
  4056e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4056ea:	e5fe      	b.n	4052ea <_vfprintf_r+0x100e>
  4056ec:	3301      	adds	r3, #1
  4056ee:	4432      	add	r2, r6
  4056f0:	2b07      	cmp	r3, #7
  4056f2:	e888 0060 	stmia.w	r8, {r5, r6}
  4056f6:	9225      	str	r2, [sp, #148]	; 0x94
  4056f8:	9324      	str	r3, [sp, #144]	; 0x90
  4056fa:	f108 0808 	add.w	r8, r8, #8
  4056fe:	f77f ae77 	ble.w	4053f0 <_vfprintf_r+0x1114>
  405702:	aa23      	add	r2, sp, #140	; 0x8c
  405704:	990a      	ldr	r1, [sp, #40]	; 0x28
  405706:	9808      	ldr	r0, [sp, #32]
  405708:	f002 fb92 	bl	407e30 <__sprint_r>
  40570c:	2800      	cmp	r0, #0
  40570e:	f47f ab6f 	bne.w	404df0 <_vfprintf_r+0xb14>
  405712:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405714:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405716:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40571a:	e669      	b.n	4053f0 <_vfprintf_r+0x1114>
  40571c:	3330      	adds	r3, #48	; 0x30
  40571e:	2230      	movs	r2, #48	; 0x30
  405720:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405724:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405728:	ab20      	add	r3, sp, #128	; 0x80
  40572a:	e6e7      	b.n	4054fc <_vfprintf_r+0x1220>
  40572c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40572e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405730:	4413      	add	r3, r2
  405732:	930d      	str	r3, [sp, #52]	; 0x34
  405734:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405738:	9307      	str	r3, [sp, #28]
  40573a:	2667      	movs	r6, #103	; 0x67
  40573c:	e5f2      	b.n	405324 <_vfprintf_r+0x1048>
  40573e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405740:	9807      	ldr	r0, [sp, #28]
  405742:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405744:	4651      	mov	r1, sl
  405746:	f002 fe79 	bl	40843c <__aeabi_dcmpeq>
  40574a:	2800      	cmp	r0, #0
  40574c:	f47f af2d 	bne.w	4055aa <_vfprintf_r+0x12ce>
  405750:	f1c5 0501 	rsb	r5, r5, #1
  405754:	951d      	str	r5, [sp, #116]	; 0x74
  405756:	442c      	add	r4, r5
  405758:	e5b4      	b.n	4052c4 <_vfprintf_r+0xfe8>
  40575a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40575c:	4f33      	ldr	r7, [pc, #204]	; (40582c <_vfprintf_r+0x1550>)
  40575e:	2b00      	cmp	r3, #0
  405760:	bfb6      	itet	lt
  405762:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  405766:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  40576a:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40576e:	4b30      	ldr	r3, [pc, #192]	; (405830 <_vfprintf_r+0x1554>)
  405770:	f7ff b9d1 	b.w	404b16 <_vfprintf_r+0x83a>
  405774:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405776:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405778:	4413      	add	r3, r2
  40577a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40577c:	441a      	add	r2, r3
  40577e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405782:	920d      	str	r2, [sp, #52]	; 0x34
  405784:	9307      	str	r3, [sp, #28]
  405786:	e5cd      	b.n	405324 <_vfprintf_r+0x1048>
  405788:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40578a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40578c:	f1c3 0301 	rsb	r3, r3, #1
  405790:	441a      	add	r2, r3
  405792:	4613      	mov	r3, r2
  405794:	920d      	str	r2, [sp, #52]	; 0x34
  405796:	e713      	b.n	4055c0 <_vfprintf_r+0x12e4>
  405798:	f01b 0301 	ands.w	r3, fp, #1
  40579c:	9310      	str	r3, [sp, #64]	; 0x40
  40579e:	f47f aeb6 	bne.w	40550e <_vfprintf_r+0x1232>
  4057a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4057a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4057a8:	9307      	str	r3, [sp, #28]
  4057aa:	e5bb      	b.n	405324 <_vfprintf_r+0x1048>
  4057ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4057ae:	f899 6001 	ldrb.w	r6, [r9, #1]
  4057b2:	6823      	ldr	r3, [r4, #0]
  4057b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  4057b8:	9309      	str	r3, [sp, #36]	; 0x24
  4057ba:	4623      	mov	r3, r4
  4057bc:	3304      	adds	r3, #4
  4057be:	4681      	mov	r9, r0
  4057c0:	930e      	str	r3, [sp, #56]	; 0x38
  4057c2:	f7fe be0a 	b.w	4043da <_vfprintf_r+0xfe>
  4057c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057c8:	b913      	cbnz	r3, 4057d0 <_vfprintf_r+0x14f4>
  4057ca:	f01b 0f01 	tst.w	fp, #1
  4057ce:	d002      	beq.n	4057d6 <_vfprintf_r+0x14fa>
  4057d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4057d2:	3301      	adds	r3, #1
  4057d4:	e7d1      	b.n	40577a <_vfprintf_r+0x149e>
  4057d6:	2301      	movs	r3, #1
  4057d8:	e702      	b.n	4055e0 <_vfprintf_r+0x1304>
  4057da:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4057dc:	1bdb      	subs	r3, r3, r7
  4057de:	9311      	str	r3, [sp, #68]	; 0x44
  4057e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4057e2:	2b47      	cmp	r3, #71	; 0x47
  4057e4:	f43f ae40 	beq.w	405468 <_vfprintf_r+0x118c>
  4057e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4057ea:	9310      	str	r3, [sp, #64]	; 0x40
  4057ec:	e647      	b.n	40547e <_vfprintf_r+0x11a2>
  4057ee:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4057f2:	f7ff b81d 	b.w	404830 <_vfprintf_r+0x554>
  4057f6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4057fa:	f7ff b918 	b.w	404a2e <_vfprintf_r+0x752>
  4057fe:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405802:	e67b      	b.n	4054fc <_vfprintf_r+0x1220>
  405804:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405808:	f7ff b866 	b.w	4048d8 <_vfprintf_r+0x5fc>
  40580c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405810:	f7ff b9ac 	b.w	404b6c <_vfprintf_r+0x890>
  405814:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405818:	f7ff b934 	b.w	404a84 <_vfprintf_r+0x7a8>
  40581c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405820:	f7ff b8b0 	b.w	404984 <_vfprintf_r+0x6a8>
  405824:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405828:	f7ff b945 	b.w	404ab6 <_vfprintf_r+0x7da>
  40582c:	004088fc 	.word	0x004088fc
  405830:	004088f8 	.word	0x004088f8

00405834 <__sbprintf>:
  405834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405838:	460c      	mov	r4, r1
  40583a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40583e:	8989      	ldrh	r1, [r1, #12]
  405840:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405842:	89e5      	ldrh	r5, [r4, #14]
  405844:	9619      	str	r6, [sp, #100]	; 0x64
  405846:	f021 0102 	bic.w	r1, r1, #2
  40584a:	4606      	mov	r6, r0
  40584c:	69e0      	ldr	r0, [r4, #28]
  40584e:	f8ad 100c 	strh.w	r1, [sp, #12]
  405852:	4617      	mov	r7, r2
  405854:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405858:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40585a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40585e:	4698      	mov	r8, r3
  405860:	ad1a      	add	r5, sp, #104	; 0x68
  405862:	2300      	movs	r3, #0
  405864:	9007      	str	r0, [sp, #28]
  405866:	a816      	add	r0, sp, #88	; 0x58
  405868:	9209      	str	r2, [sp, #36]	; 0x24
  40586a:	9306      	str	r3, [sp, #24]
  40586c:	9500      	str	r5, [sp, #0]
  40586e:	9504      	str	r5, [sp, #16]
  405870:	9102      	str	r1, [sp, #8]
  405872:	9105      	str	r1, [sp, #20]
  405874:	f001 fc82 	bl	40717c <__retarget_lock_init_recursive>
  405878:	4643      	mov	r3, r8
  40587a:	463a      	mov	r2, r7
  40587c:	4669      	mov	r1, sp
  40587e:	4630      	mov	r0, r6
  405880:	f7fe fd2c 	bl	4042dc <_vfprintf_r>
  405884:	1e05      	subs	r5, r0, #0
  405886:	db07      	blt.n	405898 <__sbprintf+0x64>
  405888:	4630      	mov	r0, r6
  40588a:	4669      	mov	r1, sp
  40588c:	f001 f8e6 	bl	406a5c <_fflush_r>
  405890:	2800      	cmp	r0, #0
  405892:	bf18      	it	ne
  405894:	f04f 35ff 	movne.w	r5, #4294967295
  405898:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40589c:	065b      	lsls	r3, r3, #25
  40589e:	d503      	bpl.n	4058a8 <__sbprintf+0x74>
  4058a0:	89a3      	ldrh	r3, [r4, #12]
  4058a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058a6:	81a3      	strh	r3, [r4, #12]
  4058a8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4058aa:	f001 fc69 	bl	407180 <__retarget_lock_close_recursive>
  4058ae:	4628      	mov	r0, r5
  4058b0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4058b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004058b8 <__swsetup_r>:
  4058b8:	b538      	push	{r3, r4, r5, lr}
  4058ba:	4b30      	ldr	r3, [pc, #192]	; (40597c <__swsetup_r+0xc4>)
  4058bc:	681b      	ldr	r3, [r3, #0]
  4058be:	4605      	mov	r5, r0
  4058c0:	460c      	mov	r4, r1
  4058c2:	b113      	cbz	r3, 4058ca <__swsetup_r+0x12>
  4058c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4058c6:	2a00      	cmp	r2, #0
  4058c8:	d038      	beq.n	40593c <__swsetup_r+0x84>
  4058ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4058ce:	b293      	uxth	r3, r2
  4058d0:	0718      	lsls	r0, r3, #28
  4058d2:	d50c      	bpl.n	4058ee <__swsetup_r+0x36>
  4058d4:	6920      	ldr	r0, [r4, #16]
  4058d6:	b1a8      	cbz	r0, 405904 <__swsetup_r+0x4c>
  4058d8:	f013 0201 	ands.w	r2, r3, #1
  4058dc:	d01e      	beq.n	40591c <__swsetup_r+0x64>
  4058de:	6963      	ldr	r3, [r4, #20]
  4058e0:	2200      	movs	r2, #0
  4058e2:	425b      	negs	r3, r3
  4058e4:	61a3      	str	r3, [r4, #24]
  4058e6:	60a2      	str	r2, [r4, #8]
  4058e8:	b1f0      	cbz	r0, 405928 <__swsetup_r+0x70>
  4058ea:	2000      	movs	r0, #0
  4058ec:	bd38      	pop	{r3, r4, r5, pc}
  4058ee:	06d9      	lsls	r1, r3, #27
  4058f0:	d53c      	bpl.n	40596c <__swsetup_r+0xb4>
  4058f2:	0758      	lsls	r0, r3, #29
  4058f4:	d426      	bmi.n	405944 <__swsetup_r+0x8c>
  4058f6:	6920      	ldr	r0, [r4, #16]
  4058f8:	f042 0308 	orr.w	r3, r2, #8
  4058fc:	81a3      	strh	r3, [r4, #12]
  4058fe:	b29b      	uxth	r3, r3
  405900:	2800      	cmp	r0, #0
  405902:	d1e9      	bne.n	4058d8 <__swsetup_r+0x20>
  405904:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405908:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40590c:	d0e4      	beq.n	4058d8 <__swsetup_r+0x20>
  40590e:	4628      	mov	r0, r5
  405910:	4621      	mov	r1, r4
  405912:	f001 fc69 	bl	4071e8 <__smakebuf_r>
  405916:	89a3      	ldrh	r3, [r4, #12]
  405918:	6920      	ldr	r0, [r4, #16]
  40591a:	e7dd      	b.n	4058d8 <__swsetup_r+0x20>
  40591c:	0799      	lsls	r1, r3, #30
  40591e:	bf58      	it	pl
  405920:	6962      	ldrpl	r2, [r4, #20]
  405922:	60a2      	str	r2, [r4, #8]
  405924:	2800      	cmp	r0, #0
  405926:	d1e0      	bne.n	4058ea <__swsetup_r+0x32>
  405928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40592c:	061a      	lsls	r2, r3, #24
  40592e:	d5dd      	bpl.n	4058ec <__swsetup_r+0x34>
  405930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405934:	81a3      	strh	r3, [r4, #12]
  405936:	f04f 30ff 	mov.w	r0, #4294967295
  40593a:	bd38      	pop	{r3, r4, r5, pc}
  40593c:	4618      	mov	r0, r3
  40593e:	f001 f8e5 	bl	406b0c <__sinit>
  405942:	e7c2      	b.n	4058ca <__swsetup_r+0x12>
  405944:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405946:	b151      	cbz	r1, 40595e <__swsetup_r+0xa6>
  405948:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40594c:	4299      	cmp	r1, r3
  40594e:	d004      	beq.n	40595a <__swsetup_r+0xa2>
  405950:	4628      	mov	r0, r5
  405952:	f001 f97d 	bl	406c50 <_free_r>
  405956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40595a:	2300      	movs	r3, #0
  40595c:	6323      	str	r3, [r4, #48]	; 0x30
  40595e:	2300      	movs	r3, #0
  405960:	6920      	ldr	r0, [r4, #16]
  405962:	6063      	str	r3, [r4, #4]
  405964:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405968:	6020      	str	r0, [r4, #0]
  40596a:	e7c5      	b.n	4058f8 <__swsetup_r+0x40>
  40596c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405970:	2309      	movs	r3, #9
  405972:	602b      	str	r3, [r5, #0]
  405974:	f04f 30ff 	mov.w	r0, #4294967295
  405978:	81a2      	strh	r2, [r4, #12]
  40597a:	bd38      	pop	{r3, r4, r5, pc}
  40597c:	2040000c 	.word	0x2040000c

00405980 <register_fini>:
  405980:	4b02      	ldr	r3, [pc, #8]	; (40598c <register_fini+0xc>)
  405982:	b113      	cbz	r3, 40598a <register_fini+0xa>
  405984:	4802      	ldr	r0, [pc, #8]	; (405990 <register_fini+0x10>)
  405986:	f000 b805 	b.w	405994 <atexit>
  40598a:	4770      	bx	lr
  40598c:	00000000 	.word	0x00000000
  405990:	00406b7d 	.word	0x00406b7d

00405994 <atexit>:
  405994:	2300      	movs	r3, #0
  405996:	4601      	mov	r1, r0
  405998:	461a      	mov	r2, r3
  40599a:	4618      	mov	r0, r3
  40599c:	f002 ba68 	b.w	407e70 <__register_exitproc>

004059a0 <quorem>:
  4059a0:	6902      	ldr	r2, [r0, #16]
  4059a2:	690b      	ldr	r3, [r1, #16]
  4059a4:	4293      	cmp	r3, r2
  4059a6:	f300 808d 	bgt.w	405ac4 <quorem+0x124>
  4059aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059ae:	f103 38ff 	add.w	r8, r3, #4294967295
  4059b2:	f101 0714 	add.w	r7, r1, #20
  4059b6:	f100 0b14 	add.w	fp, r0, #20
  4059ba:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4059be:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4059c2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4059c6:	b083      	sub	sp, #12
  4059c8:	3201      	adds	r2, #1
  4059ca:	fbb3 f9f2 	udiv	r9, r3, r2
  4059ce:	eb0b 0304 	add.w	r3, fp, r4
  4059d2:	9400      	str	r4, [sp, #0]
  4059d4:	eb07 0a04 	add.w	sl, r7, r4
  4059d8:	9301      	str	r3, [sp, #4]
  4059da:	f1b9 0f00 	cmp.w	r9, #0
  4059de:	d039      	beq.n	405a54 <quorem+0xb4>
  4059e0:	2500      	movs	r5, #0
  4059e2:	462e      	mov	r6, r5
  4059e4:	46bc      	mov	ip, r7
  4059e6:	46de      	mov	lr, fp
  4059e8:	f85c 4b04 	ldr.w	r4, [ip], #4
  4059ec:	f8de 3000 	ldr.w	r3, [lr]
  4059f0:	b2a2      	uxth	r2, r4
  4059f2:	fb09 5502 	mla	r5, r9, r2, r5
  4059f6:	0c22      	lsrs	r2, r4, #16
  4059f8:	0c2c      	lsrs	r4, r5, #16
  4059fa:	fb09 4202 	mla	r2, r9, r2, r4
  4059fe:	b2ad      	uxth	r5, r5
  405a00:	1b75      	subs	r5, r6, r5
  405a02:	b296      	uxth	r6, r2
  405a04:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405a08:	fa15 f383 	uxtah	r3, r5, r3
  405a0c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405a10:	b29b      	uxth	r3, r3
  405a12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405a16:	45e2      	cmp	sl, ip
  405a18:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405a1c:	f84e 3b04 	str.w	r3, [lr], #4
  405a20:	ea4f 4626 	mov.w	r6, r6, asr #16
  405a24:	d2e0      	bcs.n	4059e8 <quorem+0x48>
  405a26:	9b00      	ldr	r3, [sp, #0]
  405a28:	f85b 3003 	ldr.w	r3, [fp, r3]
  405a2c:	b993      	cbnz	r3, 405a54 <quorem+0xb4>
  405a2e:	9c01      	ldr	r4, [sp, #4]
  405a30:	1f23      	subs	r3, r4, #4
  405a32:	459b      	cmp	fp, r3
  405a34:	d20c      	bcs.n	405a50 <quorem+0xb0>
  405a36:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405a3a:	b94b      	cbnz	r3, 405a50 <quorem+0xb0>
  405a3c:	f1a4 0308 	sub.w	r3, r4, #8
  405a40:	e002      	b.n	405a48 <quorem+0xa8>
  405a42:	681a      	ldr	r2, [r3, #0]
  405a44:	3b04      	subs	r3, #4
  405a46:	b91a      	cbnz	r2, 405a50 <quorem+0xb0>
  405a48:	459b      	cmp	fp, r3
  405a4a:	f108 38ff 	add.w	r8, r8, #4294967295
  405a4e:	d3f8      	bcc.n	405a42 <quorem+0xa2>
  405a50:	f8c0 8010 	str.w	r8, [r0, #16]
  405a54:	4604      	mov	r4, r0
  405a56:	f001 fec5 	bl	4077e4 <__mcmp>
  405a5a:	2800      	cmp	r0, #0
  405a5c:	db2e      	blt.n	405abc <quorem+0x11c>
  405a5e:	f109 0901 	add.w	r9, r9, #1
  405a62:	465d      	mov	r5, fp
  405a64:	2300      	movs	r3, #0
  405a66:	f857 1b04 	ldr.w	r1, [r7], #4
  405a6a:	6828      	ldr	r0, [r5, #0]
  405a6c:	b28a      	uxth	r2, r1
  405a6e:	1a9a      	subs	r2, r3, r2
  405a70:	0c0b      	lsrs	r3, r1, #16
  405a72:	fa12 f280 	uxtah	r2, r2, r0
  405a76:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405a7a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405a7e:	b292      	uxth	r2, r2
  405a80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405a84:	45ba      	cmp	sl, r7
  405a86:	f845 2b04 	str.w	r2, [r5], #4
  405a8a:	ea4f 4323 	mov.w	r3, r3, asr #16
  405a8e:	d2ea      	bcs.n	405a66 <quorem+0xc6>
  405a90:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405a94:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405a98:	b982      	cbnz	r2, 405abc <quorem+0x11c>
  405a9a:	1f1a      	subs	r2, r3, #4
  405a9c:	4593      	cmp	fp, r2
  405a9e:	d20b      	bcs.n	405ab8 <quorem+0x118>
  405aa0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405aa4:	b942      	cbnz	r2, 405ab8 <quorem+0x118>
  405aa6:	3b08      	subs	r3, #8
  405aa8:	e002      	b.n	405ab0 <quorem+0x110>
  405aaa:	681a      	ldr	r2, [r3, #0]
  405aac:	3b04      	subs	r3, #4
  405aae:	b91a      	cbnz	r2, 405ab8 <quorem+0x118>
  405ab0:	459b      	cmp	fp, r3
  405ab2:	f108 38ff 	add.w	r8, r8, #4294967295
  405ab6:	d3f8      	bcc.n	405aaa <quorem+0x10a>
  405ab8:	f8c4 8010 	str.w	r8, [r4, #16]
  405abc:	4648      	mov	r0, r9
  405abe:	b003      	add	sp, #12
  405ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ac4:	2000      	movs	r0, #0
  405ac6:	4770      	bx	lr

00405ac8 <_dtoa_r>:
  405ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405acc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405ace:	b09b      	sub	sp, #108	; 0x6c
  405ad0:	4604      	mov	r4, r0
  405ad2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405ad4:	4692      	mov	sl, r2
  405ad6:	469b      	mov	fp, r3
  405ad8:	b141      	cbz	r1, 405aec <_dtoa_r+0x24>
  405ada:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405adc:	604a      	str	r2, [r1, #4]
  405ade:	2301      	movs	r3, #1
  405ae0:	4093      	lsls	r3, r2
  405ae2:	608b      	str	r3, [r1, #8]
  405ae4:	f001 fca6 	bl	407434 <_Bfree>
  405ae8:	2300      	movs	r3, #0
  405aea:	6423      	str	r3, [r4, #64]	; 0x40
  405aec:	f1bb 0f00 	cmp.w	fp, #0
  405af0:	465d      	mov	r5, fp
  405af2:	db35      	blt.n	405b60 <_dtoa_r+0x98>
  405af4:	2300      	movs	r3, #0
  405af6:	6033      	str	r3, [r6, #0]
  405af8:	4b9d      	ldr	r3, [pc, #628]	; (405d70 <_dtoa_r+0x2a8>)
  405afa:	43ab      	bics	r3, r5
  405afc:	d015      	beq.n	405b2a <_dtoa_r+0x62>
  405afe:	4650      	mov	r0, sl
  405b00:	4659      	mov	r1, fp
  405b02:	2200      	movs	r2, #0
  405b04:	2300      	movs	r3, #0
  405b06:	f002 fc99 	bl	40843c <__aeabi_dcmpeq>
  405b0a:	4680      	mov	r8, r0
  405b0c:	2800      	cmp	r0, #0
  405b0e:	d02d      	beq.n	405b6c <_dtoa_r+0xa4>
  405b10:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b12:	2301      	movs	r3, #1
  405b14:	6013      	str	r3, [r2, #0]
  405b16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b18:	2b00      	cmp	r3, #0
  405b1a:	f000 80bd 	beq.w	405c98 <_dtoa_r+0x1d0>
  405b1e:	4895      	ldr	r0, [pc, #596]	; (405d74 <_dtoa_r+0x2ac>)
  405b20:	6018      	str	r0, [r3, #0]
  405b22:	3801      	subs	r0, #1
  405b24:	b01b      	add	sp, #108	; 0x6c
  405b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b2a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b2c:	f242 730f 	movw	r3, #9999	; 0x270f
  405b30:	6013      	str	r3, [r2, #0]
  405b32:	f1ba 0f00 	cmp.w	sl, #0
  405b36:	d10d      	bne.n	405b54 <_dtoa_r+0x8c>
  405b38:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405b3c:	b955      	cbnz	r5, 405b54 <_dtoa_r+0x8c>
  405b3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b40:	488d      	ldr	r0, [pc, #564]	; (405d78 <_dtoa_r+0x2b0>)
  405b42:	2b00      	cmp	r3, #0
  405b44:	d0ee      	beq.n	405b24 <_dtoa_r+0x5c>
  405b46:	f100 0308 	add.w	r3, r0, #8
  405b4a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405b4c:	6013      	str	r3, [r2, #0]
  405b4e:	b01b      	add	sp, #108	; 0x6c
  405b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b56:	4889      	ldr	r0, [pc, #548]	; (405d7c <_dtoa_r+0x2b4>)
  405b58:	2b00      	cmp	r3, #0
  405b5a:	d0e3      	beq.n	405b24 <_dtoa_r+0x5c>
  405b5c:	1cc3      	adds	r3, r0, #3
  405b5e:	e7f4      	b.n	405b4a <_dtoa_r+0x82>
  405b60:	2301      	movs	r3, #1
  405b62:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405b66:	6033      	str	r3, [r6, #0]
  405b68:	46ab      	mov	fp, r5
  405b6a:	e7c5      	b.n	405af8 <_dtoa_r+0x30>
  405b6c:	aa18      	add	r2, sp, #96	; 0x60
  405b6e:	ab19      	add	r3, sp, #100	; 0x64
  405b70:	9201      	str	r2, [sp, #4]
  405b72:	9300      	str	r3, [sp, #0]
  405b74:	4652      	mov	r2, sl
  405b76:	465b      	mov	r3, fp
  405b78:	4620      	mov	r0, r4
  405b7a:	f001 fed3 	bl	407924 <__d2b>
  405b7e:	0d2b      	lsrs	r3, r5, #20
  405b80:	4681      	mov	r9, r0
  405b82:	d071      	beq.n	405c68 <_dtoa_r+0x1a0>
  405b84:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405b88:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405b8c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405b8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405b92:	4650      	mov	r0, sl
  405b94:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405b98:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405b9c:	2200      	movs	r2, #0
  405b9e:	4b78      	ldr	r3, [pc, #480]	; (405d80 <_dtoa_r+0x2b8>)
  405ba0:	f7fd f9d8 	bl	402f54 <__aeabi_dsub>
  405ba4:	a36c      	add	r3, pc, #432	; (adr r3, 405d58 <_dtoa_r+0x290>)
  405ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
  405baa:	f7fd fb87 	bl	4032bc <__aeabi_dmul>
  405bae:	a36c      	add	r3, pc, #432	; (adr r3, 405d60 <_dtoa_r+0x298>)
  405bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
  405bb4:	f7fd f9d0 	bl	402f58 <__adddf3>
  405bb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405bbc:	4630      	mov	r0, r6
  405bbe:	f7fd fb17 	bl	4031f0 <__aeabi_i2d>
  405bc2:	a369      	add	r3, pc, #420	; (adr r3, 405d68 <_dtoa_r+0x2a0>)
  405bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405bc8:	f7fd fb78 	bl	4032bc <__aeabi_dmul>
  405bcc:	4602      	mov	r2, r0
  405bce:	460b      	mov	r3, r1
  405bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405bd4:	f7fd f9c0 	bl	402f58 <__adddf3>
  405bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405bdc:	f002 fc76 	bl	4084cc <__aeabi_d2iz>
  405be0:	2200      	movs	r2, #0
  405be2:	9002      	str	r0, [sp, #8]
  405be4:	2300      	movs	r3, #0
  405be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405bea:	f002 fc31 	bl	408450 <__aeabi_dcmplt>
  405bee:	2800      	cmp	r0, #0
  405bf0:	f040 8173 	bne.w	405eda <_dtoa_r+0x412>
  405bf4:	9d02      	ldr	r5, [sp, #8]
  405bf6:	2d16      	cmp	r5, #22
  405bf8:	f200 815d 	bhi.w	405eb6 <_dtoa_r+0x3ee>
  405bfc:	4b61      	ldr	r3, [pc, #388]	; (405d84 <_dtoa_r+0x2bc>)
  405bfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405c02:	e9d3 0100 	ldrd	r0, r1, [r3]
  405c06:	4652      	mov	r2, sl
  405c08:	465b      	mov	r3, fp
  405c0a:	f002 fc3f 	bl	40848c <__aeabi_dcmpgt>
  405c0e:	2800      	cmp	r0, #0
  405c10:	f000 81c5 	beq.w	405f9e <_dtoa_r+0x4d6>
  405c14:	1e6b      	subs	r3, r5, #1
  405c16:	9302      	str	r3, [sp, #8]
  405c18:	2300      	movs	r3, #0
  405c1a:	930e      	str	r3, [sp, #56]	; 0x38
  405c1c:	1bbf      	subs	r7, r7, r6
  405c1e:	1e7b      	subs	r3, r7, #1
  405c20:	9306      	str	r3, [sp, #24]
  405c22:	f100 8154 	bmi.w	405ece <_dtoa_r+0x406>
  405c26:	2300      	movs	r3, #0
  405c28:	9308      	str	r3, [sp, #32]
  405c2a:	9b02      	ldr	r3, [sp, #8]
  405c2c:	2b00      	cmp	r3, #0
  405c2e:	f2c0 8145 	blt.w	405ebc <_dtoa_r+0x3f4>
  405c32:	9a06      	ldr	r2, [sp, #24]
  405c34:	930d      	str	r3, [sp, #52]	; 0x34
  405c36:	4611      	mov	r1, r2
  405c38:	4419      	add	r1, r3
  405c3a:	2300      	movs	r3, #0
  405c3c:	9106      	str	r1, [sp, #24]
  405c3e:	930c      	str	r3, [sp, #48]	; 0x30
  405c40:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c42:	2b09      	cmp	r3, #9
  405c44:	d82a      	bhi.n	405c9c <_dtoa_r+0x1d4>
  405c46:	2b05      	cmp	r3, #5
  405c48:	f340 865b 	ble.w	406902 <_dtoa_r+0xe3a>
  405c4c:	3b04      	subs	r3, #4
  405c4e:	9324      	str	r3, [sp, #144]	; 0x90
  405c50:	2500      	movs	r5, #0
  405c52:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c54:	3b02      	subs	r3, #2
  405c56:	2b03      	cmp	r3, #3
  405c58:	f200 8642 	bhi.w	4068e0 <_dtoa_r+0xe18>
  405c5c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405c60:	02c903d4 	.word	0x02c903d4
  405c64:	046103df 	.word	0x046103df
  405c68:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405c6a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405c6c:	443e      	add	r6, r7
  405c6e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405c72:	2b20      	cmp	r3, #32
  405c74:	f340 818e 	ble.w	405f94 <_dtoa_r+0x4cc>
  405c78:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405c7c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405c80:	409d      	lsls	r5, r3
  405c82:	fa2a f000 	lsr.w	r0, sl, r0
  405c86:	4328      	orrs	r0, r5
  405c88:	f7fd faa2 	bl	4031d0 <__aeabi_ui2d>
  405c8c:	2301      	movs	r3, #1
  405c8e:	3e01      	subs	r6, #1
  405c90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405c94:	9314      	str	r3, [sp, #80]	; 0x50
  405c96:	e781      	b.n	405b9c <_dtoa_r+0xd4>
  405c98:	483b      	ldr	r0, [pc, #236]	; (405d88 <_dtoa_r+0x2c0>)
  405c9a:	e743      	b.n	405b24 <_dtoa_r+0x5c>
  405c9c:	2100      	movs	r1, #0
  405c9e:	6461      	str	r1, [r4, #68]	; 0x44
  405ca0:	4620      	mov	r0, r4
  405ca2:	9125      	str	r1, [sp, #148]	; 0x94
  405ca4:	f001 fba0 	bl	4073e8 <_Balloc>
  405ca8:	f04f 33ff 	mov.w	r3, #4294967295
  405cac:	930a      	str	r3, [sp, #40]	; 0x28
  405cae:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405cb0:	930f      	str	r3, [sp, #60]	; 0x3c
  405cb2:	2301      	movs	r3, #1
  405cb4:	9004      	str	r0, [sp, #16]
  405cb6:	6420      	str	r0, [r4, #64]	; 0x40
  405cb8:	9224      	str	r2, [sp, #144]	; 0x90
  405cba:	930b      	str	r3, [sp, #44]	; 0x2c
  405cbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405cbe:	2b00      	cmp	r3, #0
  405cc0:	f2c0 80d9 	blt.w	405e76 <_dtoa_r+0x3ae>
  405cc4:	9a02      	ldr	r2, [sp, #8]
  405cc6:	2a0e      	cmp	r2, #14
  405cc8:	f300 80d5 	bgt.w	405e76 <_dtoa_r+0x3ae>
  405ccc:	4b2d      	ldr	r3, [pc, #180]	; (405d84 <_dtoa_r+0x2bc>)
  405cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405cda:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405cdc:	2b00      	cmp	r3, #0
  405cde:	f2c0 83ba 	blt.w	406456 <_dtoa_r+0x98e>
  405ce2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405ce6:	4650      	mov	r0, sl
  405ce8:	462a      	mov	r2, r5
  405cea:	4633      	mov	r3, r6
  405cec:	4659      	mov	r1, fp
  405cee:	f7fd fc0f 	bl	403510 <__aeabi_ddiv>
  405cf2:	f002 fbeb 	bl	4084cc <__aeabi_d2iz>
  405cf6:	4680      	mov	r8, r0
  405cf8:	f7fd fa7a 	bl	4031f0 <__aeabi_i2d>
  405cfc:	462a      	mov	r2, r5
  405cfe:	4633      	mov	r3, r6
  405d00:	f7fd fadc 	bl	4032bc <__aeabi_dmul>
  405d04:	460b      	mov	r3, r1
  405d06:	4602      	mov	r2, r0
  405d08:	4659      	mov	r1, fp
  405d0a:	4650      	mov	r0, sl
  405d0c:	f7fd f922 	bl	402f54 <__aeabi_dsub>
  405d10:	9d04      	ldr	r5, [sp, #16]
  405d12:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405d16:	702b      	strb	r3, [r5, #0]
  405d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d1a:	2b01      	cmp	r3, #1
  405d1c:	4606      	mov	r6, r0
  405d1e:	460f      	mov	r7, r1
  405d20:	f105 0501 	add.w	r5, r5, #1
  405d24:	d068      	beq.n	405df8 <_dtoa_r+0x330>
  405d26:	2200      	movs	r2, #0
  405d28:	4b18      	ldr	r3, [pc, #96]	; (405d8c <_dtoa_r+0x2c4>)
  405d2a:	f7fd fac7 	bl	4032bc <__aeabi_dmul>
  405d2e:	2200      	movs	r2, #0
  405d30:	2300      	movs	r3, #0
  405d32:	4606      	mov	r6, r0
  405d34:	460f      	mov	r7, r1
  405d36:	f002 fb81 	bl	40843c <__aeabi_dcmpeq>
  405d3a:	2800      	cmp	r0, #0
  405d3c:	f040 8088 	bne.w	405e50 <_dtoa_r+0x388>
  405d40:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405d44:	f04f 0a00 	mov.w	sl, #0
  405d48:	f8df b040 	ldr.w	fp, [pc, #64]	; 405d8c <_dtoa_r+0x2c4>
  405d4c:	940c      	str	r4, [sp, #48]	; 0x30
  405d4e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405d52:	e028      	b.n	405da6 <_dtoa_r+0x2de>
  405d54:	f3af 8000 	nop.w
  405d58:	636f4361 	.word	0x636f4361
  405d5c:	3fd287a7 	.word	0x3fd287a7
  405d60:	8b60c8b3 	.word	0x8b60c8b3
  405d64:	3fc68a28 	.word	0x3fc68a28
  405d68:	509f79fb 	.word	0x509f79fb
  405d6c:	3fd34413 	.word	0x3fd34413
  405d70:	7ff00000 	.word	0x7ff00000
  405d74:	00408931 	.word	0x00408931
  405d78:	00408954 	.word	0x00408954
  405d7c:	00408960 	.word	0x00408960
  405d80:	3ff80000 	.word	0x3ff80000
  405d84:	00408990 	.word	0x00408990
  405d88:	00408930 	.word	0x00408930
  405d8c:	40240000 	.word	0x40240000
  405d90:	f7fd fa94 	bl	4032bc <__aeabi_dmul>
  405d94:	2200      	movs	r2, #0
  405d96:	2300      	movs	r3, #0
  405d98:	4606      	mov	r6, r0
  405d9a:	460f      	mov	r7, r1
  405d9c:	f002 fb4e 	bl	40843c <__aeabi_dcmpeq>
  405da0:	2800      	cmp	r0, #0
  405da2:	f040 83c1 	bne.w	406528 <_dtoa_r+0xa60>
  405da6:	4642      	mov	r2, r8
  405da8:	464b      	mov	r3, r9
  405daa:	4630      	mov	r0, r6
  405dac:	4639      	mov	r1, r7
  405dae:	f7fd fbaf 	bl	403510 <__aeabi_ddiv>
  405db2:	f002 fb8b 	bl	4084cc <__aeabi_d2iz>
  405db6:	4604      	mov	r4, r0
  405db8:	f7fd fa1a 	bl	4031f0 <__aeabi_i2d>
  405dbc:	4642      	mov	r2, r8
  405dbe:	464b      	mov	r3, r9
  405dc0:	f7fd fa7c 	bl	4032bc <__aeabi_dmul>
  405dc4:	4602      	mov	r2, r0
  405dc6:	460b      	mov	r3, r1
  405dc8:	4630      	mov	r0, r6
  405dca:	4639      	mov	r1, r7
  405dcc:	f7fd f8c2 	bl	402f54 <__aeabi_dsub>
  405dd0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405dd4:	9e04      	ldr	r6, [sp, #16]
  405dd6:	f805 eb01 	strb.w	lr, [r5], #1
  405dda:	eba5 0e06 	sub.w	lr, r5, r6
  405dde:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405de0:	45b6      	cmp	lr, r6
  405de2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405de6:	4652      	mov	r2, sl
  405de8:	465b      	mov	r3, fp
  405dea:	d1d1      	bne.n	405d90 <_dtoa_r+0x2c8>
  405dec:	46a0      	mov	r8, r4
  405dee:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405df2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405df4:	4606      	mov	r6, r0
  405df6:	460f      	mov	r7, r1
  405df8:	4632      	mov	r2, r6
  405dfa:	463b      	mov	r3, r7
  405dfc:	4630      	mov	r0, r6
  405dfe:	4639      	mov	r1, r7
  405e00:	f7fd f8aa 	bl	402f58 <__adddf3>
  405e04:	4606      	mov	r6, r0
  405e06:	460f      	mov	r7, r1
  405e08:	4602      	mov	r2, r0
  405e0a:	460b      	mov	r3, r1
  405e0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e10:	f002 fb1e 	bl	408450 <__aeabi_dcmplt>
  405e14:	b948      	cbnz	r0, 405e2a <_dtoa_r+0x362>
  405e16:	4632      	mov	r2, r6
  405e18:	463b      	mov	r3, r7
  405e1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e1e:	f002 fb0d 	bl	40843c <__aeabi_dcmpeq>
  405e22:	b1a8      	cbz	r0, 405e50 <_dtoa_r+0x388>
  405e24:	f018 0f01 	tst.w	r8, #1
  405e28:	d012      	beq.n	405e50 <_dtoa_r+0x388>
  405e2a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e2e:	9a04      	ldr	r2, [sp, #16]
  405e30:	1e6b      	subs	r3, r5, #1
  405e32:	e004      	b.n	405e3e <_dtoa_r+0x376>
  405e34:	429a      	cmp	r2, r3
  405e36:	f000 8401 	beq.w	40663c <_dtoa_r+0xb74>
  405e3a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405e3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405e42:	f103 0501 	add.w	r5, r3, #1
  405e46:	d0f5      	beq.n	405e34 <_dtoa_r+0x36c>
  405e48:	f108 0801 	add.w	r8, r8, #1
  405e4c:	f883 8000 	strb.w	r8, [r3]
  405e50:	4649      	mov	r1, r9
  405e52:	4620      	mov	r0, r4
  405e54:	f001 faee 	bl	407434 <_Bfree>
  405e58:	2200      	movs	r2, #0
  405e5a:	9b02      	ldr	r3, [sp, #8]
  405e5c:	702a      	strb	r2, [r5, #0]
  405e5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e60:	3301      	adds	r3, #1
  405e62:	6013      	str	r3, [r2, #0]
  405e64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e66:	2b00      	cmp	r3, #0
  405e68:	f000 839e 	beq.w	4065a8 <_dtoa_r+0xae0>
  405e6c:	9804      	ldr	r0, [sp, #16]
  405e6e:	601d      	str	r5, [r3, #0]
  405e70:	b01b      	add	sp, #108	; 0x6c
  405e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e78:	2a00      	cmp	r2, #0
  405e7a:	d03e      	beq.n	405efa <_dtoa_r+0x432>
  405e7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405e7e:	2a01      	cmp	r2, #1
  405e80:	f340 8311 	ble.w	4064a6 <_dtoa_r+0x9de>
  405e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405e88:	1e5f      	subs	r7, r3, #1
  405e8a:	42ba      	cmp	r2, r7
  405e8c:	f2c0 838f 	blt.w	4065ae <_dtoa_r+0xae6>
  405e90:	1bd7      	subs	r7, r2, r7
  405e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e94:	2b00      	cmp	r3, #0
  405e96:	f2c0 848b 	blt.w	4067b0 <_dtoa_r+0xce8>
  405e9a:	9d08      	ldr	r5, [sp, #32]
  405e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e9e:	9a08      	ldr	r2, [sp, #32]
  405ea0:	441a      	add	r2, r3
  405ea2:	9208      	str	r2, [sp, #32]
  405ea4:	9a06      	ldr	r2, [sp, #24]
  405ea6:	2101      	movs	r1, #1
  405ea8:	441a      	add	r2, r3
  405eaa:	4620      	mov	r0, r4
  405eac:	9206      	str	r2, [sp, #24]
  405eae:	f001 fb5b 	bl	407568 <__i2b>
  405eb2:	4606      	mov	r6, r0
  405eb4:	e024      	b.n	405f00 <_dtoa_r+0x438>
  405eb6:	2301      	movs	r3, #1
  405eb8:	930e      	str	r3, [sp, #56]	; 0x38
  405eba:	e6af      	b.n	405c1c <_dtoa_r+0x154>
  405ebc:	9a08      	ldr	r2, [sp, #32]
  405ebe:	9b02      	ldr	r3, [sp, #8]
  405ec0:	1ad2      	subs	r2, r2, r3
  405ec2:	425b      	negs	r3, r3
  405ec4:	930c      	str	r3, [sp, #48]	; 0x30
  405ec6:	2300      	movs	r3, #0
  405ec8:	9208      	str	r2, [sp, #32]
  405eca:	930d      	str	r3, [sp, #52]	; 0x34
  405ecc:	e6b8      	b.n	405c40 <_dtoa_r+0x178>
  405ece:	f1c7 0301 	rsb	r3, r7, #1
  405ed2:	9308      	str	r3, [sp, #32]
  405ed4:	2300      	movs	r3, #0
  405ed6:	9306      	str	r3, [sp, #24]
  405ed8:	e6a7      	b.n	405c2a <_dtoa_r+0x162>
  405eda:	9d02      	ldr	r5, [sp, #8]
  405edc:	4628      	mov	r0, r5
  405ede:	f7fd f987 	bl	4031f0 <__aeabi_i2d>
  405ee2:	4602      	mov	r2, r0
  405ee4:	460b      	mov	r3, r1
  405ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405eea:	f002 faa7 	bl	40843c <__aeabi_dcmpeq>
  405eee:	2800      	cmp	r0, #0
  405ef0:	f47f ae80 	bne.w	405bf4 <_dtoa_r+0x12c>
  405ef4:	1e6b      	subs	r3, r5, #1
  405ef6:	9302      	str	r3, [sp, #8]
  405ef8:	e67c      	b.n	405bf4 <_dtoa_r+0x12c>
  405efa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405efc:	9d08      	ldr	r5, [sp, #32]
  405efe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405f00:	2d00      	cmp	r5, #0
  405f02:	dd0c      	ble.n	405f1e <_dtoa_r+0x456>
  405f04:	9906      	ldr	r1, [sp, #24]
  405f06:	2900      	cmp	r1, #0
  405f08:	460b      	mov	r3, r1
  405f0a:	dd08      	ble.n	405f1e <_dtoa_r+0x456>
  405f0c:	42a9      	cmp	r1, r5
  405f0e:	9a08      	ldr	r2, [sp, #32]
  405f10:	bfa8      	it	ge
  405f12:	462b      	movge	r3, r5
  405f14:	1ad2      	subs	r2, r2, r3
  405f16:	1aed      	subs	r5, r5, r3
  405f18:	1acb      	subs	r3, r1, r3
  405f1a:	9208      	str	r2, [sp, #32]
  405f1c:	9306      	str	r3, [sp, #24]
  405f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f20:	b1d3      	cbz	r3, 405f58 <_dtoa_r+0x490>
  405f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405f24:	2b00      	cmp	r3, #0
  405f26:	f000 82b7 	beq.w	406498 <_dtoa_r+0x9d0>
  405f2a:	2f00      	cmp	r7, #0
  405f2c:	dd10      	ble.n	405f50 <_dtoa_r+0x488>
  405f2e:	4631      	mov	r1, r6
  405f30:	463a      	mov	r2, r7
  405f32:	4620      	mov	r0, r4
  405f34:	f001 fbb4 	bl	4076a0 <__pow5mult>
  405f38:	464a      	mov	r2, r9
  405f3a:	4601      	mov	r1, r0
  405f3c:	4606      	mov	r6, r0
  405f3e:	4620      	mov	r0, r4
  405f40:	f001 fb1c 	bl	40757c <__multiply>
  405f44:	4649      	mov	r1, r9
  405f46:	4680      	mov	r8, r0
  405f48:	4620      	mov	r0, r4
  405f4a:	f001 fa73 	bl	407434 <_Bfree>
  405f4e:	46c1      	mov	r9, r8
  405f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f52:	1bda      	subs	r2, r3, r7
  405f54:	f040 82a1 	bne.w	40649a <_dtoa_r+0x9d2>
  405f58:	2101      	movs	r1, #1
  405f5a:	4620      	mov	r0, r4
  405f5c:	f001 fb04 	bl	407568 <__i2b>
  405f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f62:	2b00      	cmp	r3, #0
  405f64:	4680      	mov	r8, r0
  405f66:	dd1c      	ble.n	405fa2 <_dtoa_r+0x4da>
  405f68:	4601      	mov	r1, r0
  405f6a:	461a      	mov	r2, r3
  405f6c:	4620      	mov	r0, r4
  405f6e:	f001 fb97 	bl	4076a0 <__pow5mult>
  405f72:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f74:	2b01      	cmp	r3, #1
  405f76:	4680      	mov	r8, r0
  405f78:	f340 8254 	ble.w	406424 <_dtoa_r+0x95c>
  405f7c:	2300      	movs	r3, #0
  405f7e:	930c      	str	r3, [sp, #48]	; 0x30
  405f80:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405f84:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405f88:	6918      	ldr	r0, [r3, #16]
  405f8a:	f001 fa9d 	bl	4074c8 <__hi0bits>
  405f8e:	f1c0 0020 	rsb	r0, r0, #32
  405f92:	e010      	b.n	405fb6 <_dtoa_r+0x4ee>
  405f94:	f1c3 0520 	rsb	r5, r3, #32
  405f98:	fa0a f005 	lsl.w	r0, sl, r5
  405f9c:	e674      	b.n	405c88 <_dtoa_r+0x1c0>
  405f9e:	900e      	str	r0, [sp, #56]	; 0x38
  405fa0:	e63c      	b.n	405c1c <_dtoa_r+0x154>
  405fa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fa4:	2b01      	cmp	r3, #1
  405fa6:	f340 8287 	ble.w	4064b8 <_dtoa_r+0x9f0>
  405faa:	2300      	movs	r3, #0
  405fac:	930c      	str	r3, [sp, #48]	; 0x30
  405fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405fb0:	2001      	movs	r0, #1
  405fb2:	2b00      	cmp	r3, #0
  405fb4:	d1e4      	bne.n	405f80 <_dtoa_r+0x4b8>
  405fb6:	9a06      	ldr	r2, [sp, #24]
  405fb8:	4410      	add	r0, r2
  405fba:	f010 001f 	ands.w	r0, r0, #31
  405fbe:	f000 80a1 	beq.w	406104 <_dtoa_r+0x63c>
  405fc2:	f1c0 0320 	rsb	r3, r0, #32
  405fc6:	2b04      	cmp	r3, #4
  405fc8:	f340 849e 	ble.w	406908 <_dtoa_r+0xe40>
  405fcc:	9b08      	ldr	r3, [sp, #32]
  405fce:	f1c0 001c 	rsb	r0, r0, #28
  405fd2:	4403      	add	r3, r0
  405fd4:	9308      	str	r3, [sp, #32]
  405fd6:	4613      	mov	r3, r2
  405fd8:	4403      	add	r3, r0
  405fda:	4405      	add	r5, r0
  405fdc:	9306      	str	r3, [sp, #24]
  405fde:	9b08      	ldr	r3, [sp, #32]
  405fe0:	2b00      	cmp	r3, #0
  405fe2:	dd05      	ble.n	405ff0 <_dtoa_r+0x528>
  405fe4:	4649      	mov	r1, r9
  405fe6:	461a      	mov	r2, r3
  405fe8:	4620      	mov	r0, r4
  405fea:	f001 fba9 	bl	407740 <__lshift>
  405fee:	4681      	mov	r9, r0
  405ff0:	9b06      	ldr	r3, [sp, #24]
  405ff2:	2b00      	cmp	r3, #0
  405ff4:	dd05      	ble.n	406002 <_dtoa_r+0x53a>
  405ff6:	4641      	mov	r1, r8
  405ff8:	461a      	mov	r2, r3
  405ffa:	4620      	mov	r0, r4
  405ffc:	f001 fba0 	bl	407740 <__lshift>
  406000:	4680      	mov	r8, r0
  406002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406004:	2b00      	cmp	r3, #0
  406006:	f040 8086 	bne.w	406116 <_dtoa_r+0x64e>
  40600a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40600c:	2b00      	cmp	r3, #0
  40600e:	f340 8266 	ble.w	4064de <_dtoa_r+0xa16>
  406012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406014:	2b00      	cmp	r3, #0
  406016:	f000 8098 	beq.w	40614a <_dtoa_r+0x682>
  40601a:	2d00      	cmp	r5, #0
  40601c:	dd05      	ble.n	40602a <_dtoa_r+0x562>
  40601e:	4631      	mov	r1, r6
  406020:	462a      	mov	r2, r5
  406022:	4620      	mov	r0, r4
  406024:	f001 fb8c 	bl	407740 <__lshift>
  406028:	4606      	mov	r6, r0
  40602a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40602c:	2b00      	cmp	r3, #0
  40602e:	f040 8337 	bne.w	4066a0 <_dtoa_r+0xbd8>
  406032:	9606      	str	r6, [sp, #24]
  406034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406036:	9a04      	ldr	r2, [sp, #16]
  406038:	f8dd b018 	ldr.w	fp, [sp, #24]
  40603c:	3b01      	subs	r3, #1
  40603e:	18d3      	adds	r3, r2, r3
  406040:	930b      	str	r3, [sp, #44]	; 0x2c
  406042:	f00a 0301 	and.w	r3, sl, #1
  406046:	930c      	str	r3, [sp, #48]	; 0x30
  406048:	4617      	mov	r7, r2
  40604a:	46c2      	mov	sl, r8
  40604c:	4651      	mov	r1, sl
  40604e:	4648      	mov	r0, r9
  406050:	f7ff fca6 	bl	4059a0 <quorem>
  406054:	4631      	mov	r1, r6
  406056:	4605      	mov	r5, r0
  406058:	4648      	mov	r0, r9
  40605a:	f001 fbc3 	bl	4077e4 <__mcmp>
  40605e:	465a      	mov	r2, fp
  406060:	900a      	str	r0, [sp, #40]	; 0x28
  406062:	4651      	mov	r1, sl
  406064:	4620      	mov	r0, r4
  406066:	f001 fbd9 	bl	40781c <__mdiff>
  40606a:	68c2      	ldr	r2, [r0, #12]
  40606c:	4680      	mov	r8, r0
  40606e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406072:	2a00      	cmp	r2, #0
  406074:	f040 822b 	bne.w	4064ce <_dtoa_r+0xa06>
  406078:	4601      	mov	r1, r0
  40607a:	4648      	mov	r0, r9
  40607c:	9308      	str	r3, [sp, #32]
  40607e:	f001 fbb1 	bl	4077e4 <__mcmp>
  406082:	4641      	mov	r1, r8
  406084:	9006      	str	r0, [sp, #24]
  406086:	4620      	mov	r0, r4
  406088:	f001 f9d4 	bl	407434 <_Bfree>
  40608c:	9a06      	ldr	r2, [sp, #24]
  40608e:	9b08      	ldr	r3, [sp, #32]
  406090:	b932      	cbnz	r2, 4060a0 <_dtoa_r+0x5d8>
  406092:	9924      	ldr	r1, [sp, #144]	; 0x90
  406094:	b921      	cbnz	r1, 4060a0 <_dtoa_r+0x5d8>
  406096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406098:	2a00      	cmp	r2, #0
  40609a:	f000 83ef 	beq.w	40687c <_dtoa_r+0xdb4>
  40609e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4060a0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4060a2:	2900      	cmp	r1, #0
  4060a4:	f2c0 829f 	blt.w	4065e6 <_dtoa_r+0xb1e>
  4060a8:	d105      	bne.n	4060b6 <_dtoa_r+0x5ee>
  4060aa:	9924      	ldr	r1, [sp, #144]	; 0x90
  4060ac:	b919      	cbnz	r1, 4060b6 <_dtoa_r+0x5ee>
  4060ae:	990c      	ldr	r1, [sp, #48]	; 0x30
  4060b0:	2900      	cmp	r1, #0
  4060b2:	f000 8298 	beq.w	4065e6 <_dtoa_r+0xb1e>
  4060b6:	2a00      	cmp	r2, #0
  4060b8:	f300 8306 	bgt.w	4066c8 <_dtoa_r+0xc00>
  4060bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4060be:	703b      	strb	r3, [r7, #0]
  4060c0:	f107 0801 	add.w	r8, r7, #1
  4060c4:	4297      	cmp	r7, r2
  4060c6:	4645      	mov	r5, r8
  4060c8:	f000 830c 	beq.w	4066e4 <_dtoa_r+0xc1c>
  4060cc:	4649      	mov	r1, r9
  4060ce:	2300      	movs	r3, #0
  4060d0:	220a      	movs	r2, #10
  4060d2:	4620      	mov	r0, r4
  4060d4:	f001 f9b8 	bl	407448 <__multadd>
  4060d8:	455e      	cmp	r6, fp
  4060da:	4681      	mov	r9, r0
  4060dc:	4631      	mov	r1, r6
  4060de:	f04f 0300 	mov.w	r3, #0
  4060e2:	f04f 020a 	mov.w	r2, #10
  4060e6:	4620      	mov	r0, r4
  4060e8:	f000 81eb 	beq.w	4064c2 <_dtoa_r+0x9fa>
  4060ec:	f001 f9ac 	bl	407448 <__multadd>
  4060f0:	4659      	mov	r1, fp
  4060f2:	4606      	mov	r6, r0
  4060f4:	2300      	movs	r3, #0
  4060f6:	220a      	movs	r2, #10
  4060f8:	4620      	mov	r0, r4
  4060fa:	f001 f9a5 	bl	407448 <__multadd>
  4060fe:	4647      	mov	r7, r8
  406100:	4683      	mov	fp, r0
  406102:	e7a3      	b.n	40604c <_dtoa_r+0x584>
  406104:	201c      	movs	r0, #28
  406106:	9b08      	ldr	r3, [sp, #32]
  406108:	4403      	add	r3, r0
  40610a:	9308      	str	r3, [sp, #32]
  40610c:	9b06      	ldr	r3, [sp, #24]
  40610e:	4403      	add	r3, r0
  406110:	4405      	add	r5, r0
  406112:	9306      	str	r3, [sp, #24]
  406114:	e763      	b.n	405fde <_dtoa_r+0x516>
  406116:	4641      	mov	r1, r8
  406118:	4648      	mov	r0, r9
  40611a:	f001 fb63 	bl	4077e4 <__mcmp>
  40611e:	2800      	cmp	r0, #0
  406120:	f6bf af73 	bge.w	40600a <_dtoa_r+0x542>
  406124:	9f02      	ldr	r7, [sp, #8]
  406126:	4649      	mov	r1, r9
  406128:	2300      	movs	r3, #0
  40612a:	220a      	movs	r2, #10
  40612c:	4620      	mov	r0, r4
  40612e:	3f01      	subs	r7, #1
  406130:	9702      	str	r7, [sp, #8]
  406132:	f001 f989 	bl	407448 <__multadd>
  406136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406138:	4681      	mov	r9, r0
  40613a:	2b00      	cmp	r3, #0
  40613c:	f040 83b6 	bne.w	4068ac <_dtoa_r+0xde4>
  406140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406142:	2b00      	cmp	r3, #0
  406144:	f340 83bf 	ble.w	4068c6 <_dtoa_r+0xdfe>
  406148:	930a      	str	r3, [sp, #40]	; 0x28
  40614a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40614e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406150:	465d      	mov	r5, fp
  406152:	e002      	b.n	40615a <_dtoa_r+0x692>
  406154:	f001 f978 	bl	407448 <__multadd>
  406158:	4681      	mov	r9, r0
  40615a:	4641      	mov	r1, r8
  40615c:	4648      	mov	r0, r9
  40615e:	f7ff fc1f 	bl	4059a0 <quorem>
  406162:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406166:	f805 ab01 	strb.w	sl, [r5], #1
  40616a:	eba5 030b 	sub.w	r3, r5, fp
  40616e:	42bb      	cmp	r3, r7
  406170:	f04f 020a 	mov.w	r2, #10
  406174:	f04f 0300 	mov.w	r3, #0
  406178:	4649      	mov	r1, r9
  40617a:	4620      	mov	r0, r4
  40617c:	dbea      	blt.n	406154 <_dtoa_r+0x68c>
  40617e:	9b04      	ldr	r3, [sp, #16]
  406180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406182:	2a01      	cmp	r2, #1
  406184:	bfac      	ite	ge
  406186:	189b      	addge	r3, r3, r2
  406188:	3301      	addlt	r3, #1
  40618a:	461d      	mov	r5, r3
  40618c:	f04f 0b00 	mov.w	fp, #0
  406190:	4649      	mov	r1, r9
  406192:	2201      	movs	r2, #1
  406194:	4620      	mov	r0, r4
  406196:	f001 fad3 	bl	407740 <__lshift>
  40619a:	4641      	mov	r1, r8
  40619c:	4681      	mov	r9, r0
  40619e:	f001 fb21 	bl	4077e4 <__mcmp>
  4061a2:	2800      	cmp	r0, #0
  4061a4:	f340 823d 	ble.w	406622 <_dtoa_r+0xb5a>
  4061a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4061ac:	9904      	ldr	r1, [sp, #16]
  4061ae:	1e6b      	subs	r3, r5, #1
  4061b0:	e004      	b.n	4061bc <_dtoa_r+0x6f4>
  4061b2:	428b      	cmp	r3, r1
  4061b4:	f000 81ae 	beq.w	406514 <_dtoa_r+0xa4c>
  4061b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4061bc:	2a39      	cmp	r2, #57	; 0x39
  4061be:	f103 0501 	add.w	r5, r3, #1
  4061c2:	d0f6      	beq.n	4061b2 <_dtoa_r+0x6ea>
  4061c4:	3201      	adds	r2, #1
  4061c6:	701a      	strb	r2, [r3, #0]
  4061c8:	4641      	mov	r1, r8
  4061ca:	4620      	mov	r0, r4
  4061cc:	f001 f932 	bl	407434 <_Bfree>
  4061d0:	2e00      	cmp	r6, #0
  4061d2:	f43f ae3d 	beq.w	405e50 <_dtoa_r+0x388>
  4061d6:	f1bb 0f00 	cmp.w	fp, #0
  4061da:	d005      	beq.n	4061e8 <_dtoa_r+0x720>
  4061dc:	45b3      	cmp	fp, r6
  4061de:	d003      	beq.n	4061e8 <_dtoa_r+0x720>
  4061e0:	4659      	mov	r1, fp
  4061e2:	4620      	mov	r0, r4
  4061e4:	f001 f926 	bl	407434 <_Bfree>
  4061e8:	4631      	mov	r1, r6
  4061ea:	4620      	mov	r0, r4
  4061ec:	f001 f922 	bl	407434 <_Bfree>
  4061f0:	e62e      	b.n	405e50 <_dtoa_r+0x388>
  4061f2:	2300      	movs	r3, #0
  4061f4:	930b      	str	r3, [sp, #44]	; 0x2c
  4061f6:	9b02      	ldr	r3, [sp, #8]
  4061f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4061fa:	4413      	add	r3, r2
  4061fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4061fe:	3301      	adds	r3, #1
  406200:	2b01      	cmp	r3, #1
  406202:	461f      	mov	r7, r3
  406204:	461e      	mov	r6, r3
  406206:	930a      	str	r3, [sp, #40]	; 0x28
  406208:	bfb8      	it	lt
  40620a:	2701      	movlt	r7, #1
  40620c:	2100      	movs	r1, #0
  40620e:	2f17      	cmp	r7, #23
  406210:	6461      	str	r1, [r4, #68]	; 0x44
  406212:	d90a      	bls.n	40622a <_dtoa_r+0x762>
  406214:	2201      	movs	r2, #1
  406216:	2304      	movs	r3, #4
  406218:	005b      	lsls	r3, r3, #1
  40621a:	f103 0014 	add.w	r0, r3, #20
  40621e:	4287      	cmp	r7, r0
  406220:	4611      	mov	r1, r2
  406222:	f102 0201 	add.w	r2, r2, #1
  406226:	d2f7      	bcs.n	406218 <_dtoa_r+0x750>
  406228:	6461      	str	r1, [r4, #68]	; 0x44
  40622a:	4620      	mov	r0, r4
  40622c:	f001 f8dc 	bl	4073e8 <_Balloc>
  406230:	2e0e      	cmp	r6, #14
  406232:	9004      	str	r0, [sp, #16]
  406234:	6420      	str	r0, [r4, #64]	; 0x40
  406236:	f63f ad41 	bhi.w	405cbc <_dtoa_r+0x1f4>
  40623a:	2d00      	cmp	r5, #0
  40623c:	f43f ad3e 	beq.w	405cbc <_dtoa_r+0x1f4>
  406240:	9902      	ldr	r1, [sp, #8]
  406242:	2900      	cmp	r1, #0
  406244:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406248:	f340 8202 	ble.w	406650 <_dtoa_r+0xb88>
  40624c:	4bb8      	ldr	r3, [pc, #736]	; (406530 <_dtoa_r+0xa68>)
  40624e:	f001 020f 	and.w	r2, r1, #15
  406252:	110d      	asrs	r5, r1, #4
  406254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406258:	06e9      	lsls	r1, r5, #27
  40625a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40625e:	f140 81ae 	bpl.w	4065be <_dtoa_r+0xaf6>
  406262:	4bb4      	ldr	r3, [pc, #720]	; (406534 <_dtoa_r+0xa6c>)
  406264:	4650      	mov	r0, sl
  406266:	4659      	mov	r1, fp
  406268:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40626c:	f7fd f950 	bl	403510 <__aeabi_ddiv>
  406270:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406274:	f005 050f 	and.w	r5, r5, #15
  406278:	f04f 0a03 	mov.w	sl, #3
  40627c:	b18d      	cbz	r5, 4062a2 <_dtoa_r+0x7da>
  40627e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 406534 <_dtoa_r+0xa6c>
  406282:	07ea      	lsls	r2, r5, #31
  406284:	d509      	bpl.n	40629a <_dtoa_r+0x7d2>
  406286:	4630      	mov	r0, r6
  406288:	4639      	mov	r1, r7
  40628a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40628e:	f7fd f815 	bl	4032bc <__aeabi_dmul>
  406292:	f10a 0a01 	add.w	sl, sl, #1
  406296:	4606      	mov	r6, r0
  406298:	460f      	mov	r7, r1
  40629a:	106d      	asrs	r5, r5, #1
  40629c:	f108 0808 	add.w	r8, r8, #8
  4062a0:	d1ef      	bne.n	406282 <_dtoa_r+0x7ba>
  4062a2:	463b      	mov	r3, r7
  4062a4:	4632      	mov	r2, r6
  4062a6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4062aa:	f7fd f931 	bl	403510 <__aeabi_ddiv>
  4062ae:	4607      	mov	r7, r0
  4062b0:	4688      	mov	r8, r1
  4062b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4062b4:	b143      	cbz	r3, 4062c8 <_dtoa_r+0x800>
  4062b6:	2200      	movs	r2, #0
  4062b8:	4b9f      	ldr	r3, [pc, #636]	; (406538 <_dtoa_r+0xa70>)
  4062ba:	4638      	mov	r0, r7
  4062bc:	4641      	mov	r1, r8
  4062be:	f002 f8c7 	bl	408450 <__aeabi_dcmplt>
  4062c2:	2800      	cmp	r0, #0
  4062c4:	f040 8286 	bne.w	4067d4 <_dtoa_r+0xd0c>
  4062c8:	4650      	mov	r0, sl
  4062ca:	f7fc ff91 	bl	4031f0 <__aeabi_i2d>
  4062ce:	463a      	mov	r2, r7
  4062d0:	4643      	mov	r3, r8
  4062d2:	f7fc fff3 	bl	4032bc <__aeabi_dmul>
  4062d6:	4b99      	ldr	r3, [pc, #612]	; (40653c <_dtoa_r+0xa74>)
  4062d8:	2200      	movs	r2, #0
  4062da:	f7fc fe3d 	bl	402f58 <__adddf3>
  4062de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062e0:	4605      	mov	r5, r0
  4062e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4062e6:	2b00      	cmp	r3, #0
  4062e8:	f000 813e 	beq.w	406568 <_dtoa_r+0xaa0>
  4062ec:	9b02      	ldr	r3, [sp, #8]
  4062ee:	9315      	str	r3, [sp, #84]	; 0x54
  4062f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062f2:	9312      	str	r3, [sp, #72]	; 0x48
  4062f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4062f6:	2b00      	cmp	r3, #0
  4062f8:	f000 81fa 	beq.w	4066f0 <_dtoa_r+0xc28>
  4062fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4062fe:	4b8c      	ldr	r3, [pc, #560]	; (406530 <_dtoa_r+0xa68>)
  406300:	498f      	ldr	r1, [pc, #572]	; (406540 <_dtoa_r+0xa78>)
  406302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406306:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40630a:	2000      	movs	r0, #0
  40630c:	f7fd f900 	bl	403510 <__aeabi_ddiv>
  406310:	462a      	mov	r2, r5
  406312:	4633      	mov	r3, r6
  406314:	f7fc fe1e 	bl	402f54 <__aeabi_dsub>
  406318:	4682      	mov	sl, r0
  40631a:	468b      	mov	fp, r1
  40631c:	4638      	mov	r0, r7
  40631e:	4641      	mov	r1, r8
  406320:	f002 f8d4 	bl	4084cc <__aeabi_d2iz>
  406324:	4605      	mov	r5, r0
  406326:	f7fc ff63 	bl	4031f0 <__aeabi_i2d>
  40632a:	4602      	mov	r2, r0
  40632c:	460b      	mov	r3, r1
  40632e:	4638      	mov	r0, r7
  406330:	4641      	mov	r1, r8
  406332:	f7fc fe0f 	bl	402f54 <__aeabi_dsub>
  406336:	3530      	adds	r5, #48	; 0x30
  406338:	fa5f f885 	uxtb.w	r8, r5
  40633c:	9d04      	ldr	r5, [sp, #16]
  40633e:	4606      	mov	r6, r0
  406340:	460f      	mov	r7, r1
  406342:	f885 8000 	strb.w	r8, [r5]
  406346:	4602      	mov	r2, r0
  406348:	460b      	mov	r3, r1
  40634a:	4650      	mov	r0, sl
  40634c:	4659      	mov	r1, fp
  40634e:	3501      	adds	r5, #1
  406350:	f002 f89c 	bl	40848c <__aeabi_dcmpgt>
  406354:	2800      	cmp	r0, #0
  406356:	d154      	bne.n	406402 <_dtoa_r+0x93a>
  406358:	4632      	mov	r2, r6
  40635a:	463b      	mov	r3, r7
  40635c:	2000      	movs	r0, #0
  40635e:	4976      	ldr	r1, [pc, #472]	; (406538 <_dtoa_r+0xa70>)
  406360:	f7fc fdf8 	bl	402f54 <__aeabi_dsub>
  406364:	4602      	mov	r2, r0
  406366:	460b      	mov	r3, r1
  406368:	4650      	mov	r0, sl
  40636a:	4659      	mov	r1, fp
  40636c:	f002 f88e 	bl	40848c <__aeabi_dcmpgt>
  406370:	2800      	cmp	r0, #0
  406372:	f040 8270 	bne.w	406856 <_dtoa_r+0xd8e>
  406376:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406378:	2a01      	cmp	r2, #1
  40637a:	f000 8111 	beq.w	4065a0 <_dtoa_r+0xad8>
  40637e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406380:	9a04      	ldr	r2, [sp, #16]
  406382:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406386:	4413      	add	r3, r2
  406388:	4699      	mov	r9, r3
  40638a:	e00d      	b.n	4063a8 <_dtoa_r+0x8e0>
  40638c:	2000      	movs	r0, #0
  40638e:	496a      	ldr	r1, [pc, #424]	; (406538 <_dtoa_r+0xa70>)
  406390:	f7fc fde0 	bl	402f54 <__aeabi_dsub>
  406394:	4652      	mov	r2, sl
  406396:	465b      	mov	r3, fp
  406398:	f002 f85a 	bl	408450 <__aeabi_dcmplt>
  40639c:	2800      	cmp	r0, #0
  40639e:	f040 8258 	bne.w	406852 <_dtoa_r+0xd8a>
  4063a2:	454d      	cmp	r5, r9
  4063a4:	f000 80fa 	beq.w	40659c <_dtoa_r+0xad4>
  4063a8:	4650      	mov	r0, sl
  4063aa:	4659      	mov	r1, fp
  4063ac:	2200      	movs	r2, #0
  4063ae:	4b65      	ldr	r3, [pc, #404]	; (406544 <_dtoa_r+0xa7c>)
  4063b0:	f7fc ff84 	bl	4032bc <__aeabi_dmul>
  4063b4:	2200      	movs	r2, #0
  4063b6:	4b63      	ldr	r3, [pc, #396]	; (406544 <_dtoa_r+0xa7c>)
  4063b8:	4682      	mov	sl, r0
  4063ba:	468b      	mov	fp, r1
  4063bc:	4630      	mov	r0, r6
  4063be:	4639      	mov	r1, r7
  4063c0:	f7fc ff7c 	bl	4032bc <__aeabi_dmul>
  4063c4:	460f      	mov	r7, r1
  4063c6:	4606      	mov	r6, r0
  4063c8:	f002 f880 	bl	4084cc <__aeabi_d2iz>
  4063cc:	4680      	mov	r8, r0
  4063ce:	f7fc ff0f 	bl	4031f0 <__aeabi_i2d>
  4063d2:	4602      	mov	r2, r0
  4063d4:	460b      	mov	r3, r1
  4063d6:	4630      	mov	r0, r6
  4063d8:	4639      	mov	r1, r7
  4063da:	f7fc fdbb 	bl	402f54 <__aeabi_dsub>
  4063de:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4063e2:	fa5f f888 	uxtb.w	r8, r8
  4063e6:	4652      	mov	r2, sl
  4063e8:	465b      	mov	r3, fp
  4063ea:	f805 8b01 	strb.w	r8, [r5], #1
  4063ee:	4606      	mov	r6, r0
  4063f0:	460f      	mov	r7, r1
  4063f2:	f002 f82d 	bl	408450 <__aeabi_dcmplt>
  4063f6:	4632      	mov	r2, r6
  4063f8:	463b      	mov	r3, r7
  4063fa:	2800      	cmp	r0, #0
  4063fc:	d0c6      	beq.n	40638c <_dtoa_r+0x8c4>
  4063fe:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406402:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406404:	9302      	str	r3, [sp, #8]
  406406:	e523      	b.n	405e50 <_dtoa_r+0x388>
  406408:	2300      	movs	r3, #0
  40640a:	930b      	str	r3, [sp, #44]	; 0x2c
  40640c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40640e:	2b00      	cmp	r3, #0
  406410:	f340 80dc 	ble.w	4065cc <_dtoa_r+0xb04>
  406414:	461f      	mov	r7, r3
  406416:	461e      	mov	r6, r3
  406418:	930f      	str	r3, [sp, #60]	; 0x3c
  40641a:	930a      	str	r3, [sp, #40]	; 0x28
  40641c:	e6f6      	b.n	40620c <_dtoa_r+0x744>
  40641e:	2301      	movs	r3, #1
  406420:	930b      	str	r3, [sp, #44]	; 0x2c
  406422:	e7f3      	b.n	40640c <_dtoa_r+0x944>
  406424:	f1ba 0f00 	cmp.w	sl, #0
  406428:	f47f ada8 	bne.w	405f7c <_dtoa_r+0x4b4>
  40642c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406430:	2b00      	cmp	r3, #0
  406432:	f47f adba 	bne.w	405faa <_dtoa_r+0x4e2>
  406436:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40643a:	0d3f      	lsrs	r7, r7, #20
  40643c:	053f      	lsls	r7, r7, #20
  40643e:	2f00      	cmp	r7, #0
  406440:	f000 820d 	beq.w	40685e <_dtoa_r+0xd96>
  406444:	9b08      	ldr	r3, [sp, #32]
  406446:	3301      	adds	r3, #1
  406448:	9308      	str	r3, [sp, #32]
  40644a:	9b06      	ldr	r3, [sp, #24]
  40644c:	3301      	adds	r3, #1
  40644e:	9306      	str	r3, [sp, #24]
  406450:	2301      	movs	r3, #1
  406452:	930c      	str	r3, [sp, #48]	; 0x30
  406454:	e5ab      	b.n	405fae <_dtoa_r+0x4e6>
  406456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406458:	2b00      	cmp	r3, #0
  40645a:	f73f ac42 	bgt.w	405ce2 <_dtoa_r+0x21a>
  40645e:	f040 8221 	bne.w	4068a4 <_dtoa_r+0xddc>
  406462:	2200      	movs	r2, #0
  406464:	4b38      	ldr	r3, [pc, #224]	; (406548 <_dtoa_r+0xa80>)
  406466:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40646a:	f7fc ff27 	bl	4032bc <__aeabi_dmul>
  40646e:	4652      	mov	r2, sl
  406470:	465b      	mov	r3, fp
  406472:	f002 f801 	bl	408478 <__aeabi_dcmpge>
  406476:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40647a:	4646      	mov	r6, r8
  40647c:	2800      	cmp	r0, #0
  40647e:	d041      	beq.n	406504 <_dtoa_r+0xa3c>
  406480:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406482:	9d04      	ldr	r5, [sp, #16]
  406484:	43db      	mvns	r3, r3
  406486:	9302      	str	r3, [sp, #8]
  406488:	4641      	mov	r1, r8
  40648a:	4620      	mov	r0, r4
  40648c:	f000 ffd2 	bl	407434 <_Bfree>
  406490:	2e00      	cmp	r6, #0
  406492:	f43f acdd 	beq.w	405e50 <_dtoa_r+0x388>
  406496:	e6a7      	b.n	4061e8 <_dtoa_r+0x720>
  406498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40649a:	4649      	mov	r1, r9
  40649c:	4620      	mov	r0, r4
  40649e:	f001 f8ff 	bl	4076a0 <__pow5mult>
  4064a2:	4681      	mov	r9, r0
  4064a4:	e558      	b.n	405f58 <_dtoa_r+0x490>
  4064a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4064a8:	2a00      	cmp	r2, #0
  4064aa:	f000 8187 	beq.w	4067bc <_dtoa_r+0xcf4>
  4064ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4064b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4064b4:	9d08      	ldr	r5, [sp, #32]
  4064b6:	e4f2      	b.n	405e9e <_dtoa_r+0x3d6>
  4064b8:	f1ba 0f00 	cmp.w	sl, #0
  4064bc:	f47f ad75 	bne.w	405faa <_dtoa_r+0x4e2>
  4064c0:	e7b4      	b.n	40642c <_dtoa_r+0x964>
  4064c2:	f000 ffc1 	bl	407448 <__multadd>
  4064c6:	4647      	mov	r7, r8
  4064c8:	4606      	mov	r6, r0
  4064ca:	4683      	mov	fp, r0
  4064cc:	e5be      	b.n	40604c <_dtoa_r+0x584>
  4064ce:	4601      	mov	r1, r0
  4064d0:	4620      	mov	r0, r4
  4064d2:	9306      	str	r3, [sp, #24]
  4064d4:	f000 ffae 	bl	407434 <_Bfree>
  4064d8:	2201      	movs	r2, #1
  4064da:	9b06      	ldr	r3, [sp, #24]
  4064dc:	e5e0      	b.n	4060a0 <_dtoa_r+0x5d8>
  4064de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4064e0:	2b02      	cmp	r3, #2
  4064e2:	f77f ad96 	ble.w	406012 <_dtoa_r+0x54a>
  4064e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4064e8:	2b00      	cmp	r3, #0
  4064ea:	d1c9      	bne.n	406480 <_dtoa_r+0x9b8>
  4064ec:	4641      	mov	r1, r8
  4064ee:	2205      	movs	r2, #5
  4064f0:	4620      	mov	r0, r4
  4064f2:	f000 ffa9 	bl	407448 <__multadd>
  4064f6:	4601      	mov	r1, r0
  4064f8:	4680      	mov	r8, r0
  4064fa:	4648      	mov	r0, r9
  4064fc:	f001 f972 	bl	4077e4 <__mcmp>
  406500:	2800      	cmp	r0, #0
  406502:	ddbd      	ble.n	406480 <_dtoa_r+0x9b8>
  406504:	9a02      	ldr	r2, [sp, #8]
  406506:	9904      	ldr	r1, [sp, #16]
  406508:	2331      	movs	r3, #49	; 0x31
  40650a:	3201      	adds	r2, #1
  40650c:	9202      	str	r2, [sp, #8]
  40650e:	700b      	strb	r3, [r1, #0]
  406510:	1c4d      	adds	r5, r1, #1
  406512:	e7b9      	b.n	406488 <_dtoa_r+0x9c0>
  406514:	9a02      	ldr	r2, [sp, #8]
  406516:	3201      	adds	r2, #1
  406518:	9202      	str	r2, [sp, #8]
  40651a:	9a04      	ldr	r2, [sp, #16]
  40651c:	2331      	movs	r3, #49	; 0x31
  40651e:	7013      	strb	r3, [r2, #0]
  406520:	e652      	b.n	4061c8 <_dtoa_r+0x700>
  406522:	2301      	movs	r3, #1
  406524:	930b      	str	r3, [sp, #44]	; 0x2c
  406526:	e666      	b.n	4061f6 <_dtoa_r+0x72e>
  406528:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40652c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40652e:	e48f      	b.n	405e50 <_dtoa_r+0x388>
  406530:	00408990 	.word	0x00408990
  406534:	00408968 	.word	0x00408968
  406538:	3ff00000 	.word	0x3ff00000
  40653c:	401c0000 	.word	0x401c0000
  406540:	3fe00000 	.word	0x3fe00000
  406544:	40240000 	.word	0x40240000
  406548:	40140000 	.word	0x40140000
  40654c:	4650      	mov	r0, sl
  40654e:	f7fc fe4f 	bl	4031f0 <__aeabi_i2d>
  406552:	463a      	mov	r2, r7
  406554:	4643      	mov	r3, r8
  406556:	f7fc feb1 	bl	4032bc <__aeabi_dmul>
  40655a:	2200      	movs	r2, #0
  40655c:	4bc1      	ldr	r3, [pc, #772]	; (406864 <_dtoa_r+0xd9c>)
  40655e:	f7fc fcfb 	bl	402f58 <__adddf3>
  406562:	4605      	mov	r5, r0
  406564:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406568:	4641      	mov	r1, r8
  40656a:	2200      	movs	r2, #0
  40656c:	4bbe      	ldr	r3, [pc, #760]	; (406868 <_dtoa_r+0xda0>)
  40656e:	4638      	mov	r0, r7
  406570:	f7fc fcf0 	bl	402f54 <__aeabi_dsub>
  406574:	462a      	mov	r2, r5
  406576:	4633      	mov	r3, r6
  406578:	4682      	mov	sl, r0
  40657a:	468b      	mov	fp, r1
  40657c:	f001 ff86 	bl	40848c <__aeabi_dcmpgt>
  406580:	4680      	mov	r8, r0
  406582:	2800      	cmp	r0, #0
  406584:	f040 8110 	bne.w	4067a8 <_dtoa_r+0xce0>
  406588:	462a      	mov	r2, r5
  40658a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40658e:	4650      	mov	r0, sl
  406590:	4659      	mov	r1, fp
  406592:	f001 ff5d 	bl	408450 <__aeabi_dcmplt>
  406596:	b118      	cbz	r0, 4065a0 <_dtoa_r+0xad8>
  406598:	4646      	mov	r6, r8
  40659a:	e771      	b.n	406480 <_dtoa_r+0x9b8>
  40659c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4065a0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4065a4:	f7ff bb8a 	b.w	405cbc <_dtoa_r+0x1f4>
  4065a8:	9804      	ldr	r0, [sp, #16]
  4065aa:	f7ff babb 	b.w	405b24 <_dtoa_r+0x5c>
  4065ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4065b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4065b2:	970c      	str	r7, [sp, #48]	; 0x30
  4065b4:	1afb      	subs	r3, r7, r3
  4065b6:	441a      	add	r2, r3
  4065b8:	920d      	str	r2, [sp, #52]	; 0x34
  4065ba:	2700      	movs	r7, #0
  4065bc:	e469      	b.n	405e92 <_dtoa_r+0x3ca>
  4065be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4065c2:	f04f 0a02 	mov.w	sl, #2
  4065c6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4065ca:	e657      	b.n	40627c <_dtoa_r+0x7b4>
  4065cc:	2100      	movs	r1, #0
  4065ce:	2301      	movs	r3, #1
  4065d0:	6461      	str	r1, [r4, #68]	; 0x44
  4065d2:	4620      	mov	r0, r4
  4065d4:	9325      	str	r3, [sp, #148]	; 0x94
  4065d6:	f000 ff07 	bl	4073e8 <_Balloc>
  4065da:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4065dc:	9004      	str	r0, [sp, #16]
  4065de:	6420      	str	r0, [r4, #64]	; 0x40
  4065e0:	930a      	str	r3, [sp, #40]	; 0x28
  4065e2:	930f      	str	r3, [sp, #60]	; 0x3c
  4065e4:	e629      	b.n	40623a <_dtoa_r+0x772>
  4065e6:	2a00      	cmp	r2, #0
  4065e8:	46d0      	mov	r8, sl
  4065ea:	f8cd b018 	str.w	fp, [sp, #24]
  4065ee:	469a      	mov	sl, r3
  4065f0:	dd11      	ble.n	406616 <_dtoa_r+0xb4e>
  4065f2:	4649      	mov	r1, r9
  4065f4:	2201      	movs	r2, #1
  4065f6:	4620      	mov	r0, r4
  4065f8:	f001 f8a2 	bl	407740 <__lshift>
  4065fc:	4641      	mov	r1, r8
  4065fe:	4681      	mov	r9, r0
  406600:	f001 f8f0 	bl	4077e4 <__mcmp>
  406604:	2800      	cmp	r0, #0
  406606:	f340 8146 	ble.w	406896 <_dtoa_r+0xdce>
  40660a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40660e:	f000 8106 	beq.w	40681e <_dtoa_r+0xd56>
  406612:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406616:	46b3      	mov	fp, r6
  406618:	f887 a000 	strb.w	sl, [r7]
  40661c:	1c7d      	adds	r5, r7, #1
  40661e:	9e06      	ldr	r6, [sp, #24]
  406620:	e5d2      	b.n	4061c8 <_dtoa_r+0x700>
  406622:	d104      	bne.n	40662e <_dtoa_r+0xb66>
  406624:	f01a 0f01 	tst.w	sl, #1
  406628:	d001      	beq.n	40662e <_dtoa_r+0xb66>
  40662a:	e5bd      	b.n	4061a8 <_dtoa_r+0x6e0>
  40662c:	4615      	mov	r5, r2
  40662e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406632:	2b30      	cmp	r3, #48	; 0x30
  406634:	f105 32ff 	add.w	r2, r5, #4294967295
  406638:	d0f8      	beq.n	40662c <_dtoa_r+0xb64>
  40663a:	e5c5      	b.n	4061c8 <_dtoa_r+0x700>
  40663c:	9904      	ldr	r1, [sp, #16]
  40663e:	2230      	movs	r2, #48	; 0x30
  406640:	700a      	strb	r2, [r1, #0]
  406642:	9a02      	ldr	r2, [sp, #8]
  406644:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406648:	3201      	adds	r2, #1
  40664a:	9202      	str	r2, [sp, #8]
  40664c:	f7ff bbfc 	b.w	405e48 <_dtoa_r+0x380>
  406650:	f000 80bb 	beq.w	4067ca <_dtoa_r+0xd02>
  406654:	9b02      	ldr	r3, [sp, #8]
  406656:	425d      	negs	r5, r3
  406658:	4b84      	ldr	r3, [pc, #528]	; (40686c <_dtoa_r+0xda4>)
  40665a:	f005 020f 	and.w	r2, r5, #15
  40665e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406662:	e9d3 2300 	ldrd	r2, r3, [r3]
  406666:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40666a:	f7fc fe27 	bl	4032bc <__aeabi_dmul>
  40666e:	112d      	asrs	r5, r5, #4
  406670:	4607      	mov	r7, r0
  406672:	4688      	mov	r8, r1
  406674:	f000 812c 	beq.w	4068d0 <_dtoa_r+0xe08>
  406678:	4e7d      	ldr	r6, [pc, #500]	; (406870 <_dtoa_r+0xda8>)
  40667a:	f04f 0a02 	mov.w	sl, #2
  40667e:	07eb      	lsls	r3, r5, #31
  406680:	d509      	bpl.n	406696 <_dtoa_r+0xbce>
  406682:	4638      	mov	r0, r7
  406684:	4641      	mov	r1, r8
  406686:	e9d6 2300 	ldrd	r2, r3, [r6]
  40668a:	f7fc fe17 	bl	4032bc <__aeabi_dmul>
  40668e:	f10a 0a01 	add.w	sl, sl, #1
  406692:	4607      	mov	r7, r0
  406694:	4688      	mov	r8, r1
  406696:	106d      	asrs	r5, r5, #1
  406698:	f106 0608 	add.w	r6, r6, #8
  40669c:	d1ef      	bne.n	40667e <_dtoa_r+0xbb6>
  40669e:	e608      	b.n	4062b2 <_dtoa_r+0x7ea>
  4066a0:	6871      	ldr	r1, [r6, #4]
  4066a2:	4620      	mov	r0, r4
  4066a4:	f000 fea0 	bl	4073e8 <_Balloc>
  4066a8:	6933      	ldr	r3, [r6, #16]
  4066aa:	3302      	adds	r3, #2
  4066ac:	009a      	lsls	r2, r3, #2
  4066ae:	4605      	mov	r5, r0
  4066b0:	f106 010c 	add.w	r1, r6, #12
  4066b4:	300c      	adds	r0, #12
  4066b6:	f7fd fb4b 	bl	403d50 <memcpy>
  4066ba:	4629      	mov	r1, r5
  4066bc:	2201      	movs	r2, #1
  4066be:	4620      	mov	r0, r4
  4066c0:	f001 f83e 	bl	407740 <__lshift>
  4066c4:	9006      	str	r0, [sp, #24]
  4066c6:	e4b5      	b.n	406034 <_dtoa_r+0x56c>
  4066c8:	2b39      	cmp	r3, #57	; 0x39
  4066ca:	f8cd b018 	str.w	fp, [sp, #24]
  4066ce:	46d0      	mov	r8, sl
  4066d0:	f000 80a5 	beq.w	40681e <_dtoa_r+0xd56>
  4066d4:	f103 0a01 	add.w	sl, r3, #1
  4066d8:	46b3      	mov	fp, r6
  4066da:	f887 a000 	strb.w	sl, [r7]
  4066de:	1c7d      	adds	r5, r7, #1
  4066e0:	9e06      	ldr	r6, [sp, #24]
  4066e2:	e571      	b.n	4061c8 <_dtoa_r+0x700>
  4066e4:	465a      	mov	r2, fp
  4066e6:	46d0      	mov	r8, sl
  4066e8:	46b3      	mov	fp, r6
  4066ea:	469a      	mov	sl, r3
  4066ec:	4616      	mov	r6, r2
  4066ee:	e54f      	b.n	406190 <_dtoa_r+0x6c8>
  4066f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066f2:	495e      	ldr	r1, [pc, #376]	; (40686c <_dtoa_r+0xda4>)
  4066f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4066f8:	462a      	mov	r2, r5
  4066fa:	4633      	mov	r3, r6
  4066fc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406700:	f7fc fddc 	bl	4032bc <__aeabi_dmul>
  406704:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406708:	4638      	mov	r0, r7
  40670a:	4641      	mov	r1, r8
  40670c:	f001 fede 	bl	4084cc <__aeabi_d2iz>
  406710:	4605      	mov	r5, r0
  406712:	f7fc fd6d 	bl	4031f0 <__aeabi_i2d>
  406716:	460b      	mov	r3, r1
  406718:	4602      	mov	r2, r0
  40671a:	4641      	mov	r1, r8
  40671c:	4638      	mov	r0, r7
  40671e:	f7fc fc19 	bl	402f54 <__aeabi_dsub>
  406722:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406724:	460f      	mov	r7, r1
  406726:	9904      	ldr	r1, [sp, #16]
  406728:	3530      	adds	r5, #48	; 0x30
  40672a:	2b01      	cmp	r3, #1
  40672c:	700d      	strb	r5, [r1, #0]
  40672e:	4606      	mov	r6, r0
  406730:	f101 0501 	add.w	r5, r1, #1
  406734:	d026      	beq.n	406784 <_dtoa_r+0xcbc>
  406736:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406738:	9a04      	ldr	r2, [sp, #16]
  40673a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406878 <_dtoa_r+0xdb0>
  40673e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406742:	4413      	add	r3, r2
  406744:	f04f 0a00 	mov.w	sl, #0
  406748:	4699      	mov	r9, r3
  40674a:	4652      	mov	r2, sl
  40674c:	465b      	mov	r3, fp
  40674e:	4630      	mov	r0, r6
  406750:	4639      	mov	r1, r7
  406752:	f7fc fdb3 	bl	4032bc <__aeabi_dmul>
  406756:	460f      	mov	r7, r1
  406758:	4606      	mov	r6, r0
  40675a:	f001 feb7 	bl	4084cc <__aeabi_d2iz>
  40675e:	4680      	mov	r8, r0
  406760:	f7fc fd46 	bl	4031f0 <__aeabi_i2d>
  406764:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406768:	4602      	mov	r2, r0
  40676a:	460b      	mov	r3, r1
  40676c:	4630      	mov	r0, r6
  40676e:	4639      	mov	r1, r7
  406770:	f7fc fbf0 	bl	402f54 <__aeabi_dsub>
  406774:	f805 8b01 	strb.w	r8, [r5], #1
  406778:	454d      	cmp	r5, r9
  40677a:	4606      	mov	r6, r0
  40677c:	460f      	mov	r7, r1
  40677e:	d1e4      	bne.n	40674a <_dtoa_r+0xc82>
  406780:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406784:	4b3b      	ldr	r3, [pc, #236]	; (406874 <_dtoa_r+0xdac>)
  406786:	2200      	movs	r2, #0
  406788:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40678c:	f7fc fbe4 	bl	402f58 <__adddf3>
  406790:	4632      	mov	r2, r6
  406792:	463b      	mov	r3, r7
  406794:	f001 fe5c 	bl	408450 <__aeabi_dcmplt>
  406798:	2800      	cmp	r0, #0
  40679a:	d046      	beq.n	40682a <_dtoa_r+0xd62>
  40679c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40679e:	9302      	str	r3, [sp, #8]
  4067a0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4067a4:	f7ff bb43 	b.w	405e2e <_dtoa_r+0x366>
  4067a8:	f04f 0800 	mov.w	r8, #0
  4067ac:	4646      	mov	r6, r8
  4067ae:	e6a9      	b.n	406504 <_dtoa_r+0xa3c>
  4067b0:	9b08      	ldr	r3, [sp, #32]
  4067b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4067b4:	1a9d      	subs	r5, r3, r2
  4067b6:	2300      	movs	r3, #0
  4067b8:	f7ff bb71 	b.w	405e9e <_dtoa_r+0x3d6>
  4067bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4067be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4067c0:	9d08      	ldr	r5, [sp, #32]
  4067c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4067c6:	f7ff bb6a 	b.w	405e9e <_dtoa_r+0x3d6>
  4067ca:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4067ce:	f04f 0a02 	mov.w	sl, #2
  4067d2:	e56e      	b.n	4062b2 <_dtoa_r+0x7ea>
  4067d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4067d6:	2b00      	cmp	r3, #0
  4067d8:	f43f aeb8 	beq.w	40654c <_dtoa_r+0xa84>
  4067dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067de:	2b00      	cmp	r3, #0
  4067e0:	f77f aede 	ble.w	4065a0 <_dtoa_r+0xad8>
  4067e4:	2200      	movs	r2, #0
  4067e6:	4b24      	ldr	r3, [pc, #144]	; (406878 <_dtoa_r+0xdb0>)
  4067e8:	4638      	mov	r0, r7
  4067ea:	4641      	mov	r1, r8
  4067ec:	f7fc fd66 	bl	4032bc <__aeabi_dmul>
  4067f0:	4607      	mov	r7, r0
  4067f2:	4688      	mov	r8, r1
  4067f4:	f10a 0001 	add.w	r0, sl, #1
  4067f8:	f7fc fcfa 	bl	4031f0 <__aeabi_i2d>
  4067fc:	463a      	mov	r2, r7
  4067fe:	4643      	mov	r3, r8
  406800:	f7fc fd5c 	bl	4032bc <__aeabi_dmul>
  406804:	2200      	movs	r2, #0
  406806:	4b17      	ldr	r3, [pc, #92]	; (406864 <_dtoa_r+0xd9c>)
  406808:	f7fc fba6 	bl	402f58 <__adddf3>
  40680c:	9a02      	ldr	r2, [sp, #8]
  40680e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406810:	9312      	str	r3, [sp, #72]	; 0x48
  406812:	3a01      	subs	r2, #1
  406814:	4605      	mov	r5, r0
  406816:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40681a:	9215      	str	r2, [sp, #84]	; 0x54
  40681c:	e56a      	b.n	4062f4 <_dtoa_r+0x82c>
  40681e:	2239      	movs	r2, #57	; 0x39
  406820:	46b3      	mov	fp, r6
  406822:	703a      	strb	r2, [r7, #0]
  406824:	9e06      	ldr	r6, [sp, #24]
  406826:	1c7d      	adds	r5, r7, #1
  406828:	e4c0      	b.n	4061ac <_dtoa_r+0x6e4>
  40682a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40682e:	2000      	movs	r0, #0
  406830:	4910      	ldr	r1, [pc, #64]	; (406874 <_dtoa_r+0xdac>)
  406832:	f7fc fb8f 	bl	402f54 <__aeabi_dsub>
  406836:	4632      	mov	r2, r6
  406838:	463b      	mov	r3, r7
  40683a:	f001 fe27 	bl	40848c <__aeabi_dcmpgt>
  40683e:	b908      	cbnz	r0, 406844 <_dtoa_r+0xd7c>
  406840:	e6ae      	b.n	4065a0 <_dtoa_r+0xad8>
  406842:	4615      	mov	r5, r2
  406844:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406848:	2b30      	cmp	r3, #48	; 0x30
  40684a:	f105 32ff 	add.w	r2, r5, #4294967295
  40684e:	d0f8      	beq.n	406842 <_dtoa_r+0xd7a>
  406850:	e5d7      	b.n	406402 <_dtoa_r+0x93a>
  406852:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406856:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406858:	9302      	str	r3, [sp, #8]
  40685a:	f7ff bae8 	b.w	405e2e <_dtoa_r+0x366>
  40685e:	970c      	str	r7, [sp, #48]	; 0x30
  406860:	f7ff bba5 	b.w	405fae <_dtoa_r+0x4e6>
  406864:	401c0000 	.word	0x401c0000
  406868:	40140000 	.word	0x40140000
  40686c:	00408990 	.word	0x00408990
  406870:	00408968 	.word	0x00408968
  406874:	3fe00000 	.word	0x3fe00000
  406878:	40240000 	.word	0x40240000
  40687c:	2b39      	cmp	r3, #57	; 0x39
  40687e:	f8cd b018 	str.w	fp, [sp, #24]
  406882:	46d0      	mov	r8, sl
  406884:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406888:	469a      	mov	sl, r3
  40688a:	d0c8      	beq.n	40681e <_dtoa_r+0xd56>
  40688c:	f1bb 0f00 	cmp.w	fp, #0
  406890:	f73f aebf 	bgt.w	406612 <_dtoa_r+0xb4a>
  406894:	e6bf      	b.n	406616 <_dtoa_r+0xb4e>
  406896:	f47f aebe 	bne.w	406616 <_dtoa_r+0xb4e>
  40689a:	f01a 0f01 	tst.w	sl, #1
  40689e:	f43f aeba 	beq.w	406616 <_dtoa_r+0xb4e>
  4068a2:	e6b2      	b.n	40660a <_dtoa_r+0xb42>
  4068a4:	f04f 0800 	mov.w	r8, #0
  4068a8:	4646      	mov	r6, r8
  4068aa:	e5e9      	b.n	406480 <_dtoa_r+0x9b8>
  4068ac:	4631      	mov	r1, r6
  4068ae:	2300      	movs	r3, #0
  4068b0:	220a      	movs	r2, #10
  4068b2:	4620      	mov	r0, r4
  4068b4:	f000 fdc8 	bl	407448 <__multadd>
  4068b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068ba:	2b00      	cmp	r3, #0
  4068bc:	4606      	mov	r6, r0
  4068be:	dd0a      	ble.n	4068d6 <_dtoa_r+0xe0e>
  4068c0:	930a      	str	r3, [sp, #40]	; 0x28
  4068c2:	f7ff bbaa 	b.w	40601a <_dtoa_r+0x552>
  4068c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068c8:	2b02      	cmp	r3, #2
  4068ca:	dc23      	bgt.n	406914 <_dtoa_r+0xe4c>
  4068cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068ce:	e43b      	b.n	406148 <_dtoa_r+0x680>
  4068d0:	f04f 0a02 	mov.w	sl, #2
  4068d4:	e4ed      	b.n	4062b2 <_dtoa_r+0x7ea>
  4068d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068d8:	2b02      	cmp	r3, #2
  4068da:	dc1b      	bgt.n	406914 <_dtoa_r+0xe4c>
  4068dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068de:	e7ef      	b.n	4068c0 <_dtoa_r+0xdf8>
  4068e0:	2500      	movs	r5, #0
  4068e2:	6465      	str	r5, [r4, #68]	; 0x44
  4068e4:	4629      	mov	r1, r5
  4068e6:	4620      	mov	r0, r4
  4068e8:	f000 fd7e 	bl	4073e8 <_Balloc>
  4068ec:	f04f 33ff 	mov.w	r3, #4294967295
  4068f0:	930a      	str	r3, [sp, #40]	; 0x28
  4068f2:	930f      	str	r3, [sp, #60]	; 0x3c
  4068f4:	2301      	movs	r3, #1
  4068f6:	9004      	str	r0, [sp, #16]
  4068f8:	9525      	str	r5, [sp, #148]	; 0x94
  4068fa:	6420      	str	r0, [r4, #64]	; 0x40
  4068fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4068fe:	f7ff b9dd 	b.w	405cbc <_dtoa_r+0x1f4>
  406902:	2501      	movs	r5, #1
  406904:	f7ff b9a5 	b.w	405c52 <_dtoa_r+0x18a>
  406908:	f43f ab69 	beq.w	405fde <_dtoa_r+0x516>
  40690c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406910:	f7ff bbf9 	b.w	406106 <_dtoa_r+0x63e>
  406914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406916:	930a      	str	r3, [sp, #40]	; 0x28
  406918:	e5e5      	b.n	4064e6 <_dtoa_r+0xa1e>
  40691a:	bf00      	nop

0040691c <__sflush_r>:
  40691c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406920:	b29a      	uxth	r2, r3
  406922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406926:	460d      	mov	r5, r1
  406928:	0711      	lsls	r1, r2, #28
  40692a:	4680      	mov	r8, r0
  40692c:	d43a      	bmi.n	4069a4 <__sflush_r+0x88>
  40692e:	686a      	ldr	r2, [r5, #4]
  406930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406934:	2a00      	cmp	r2, #0
  406936:	81ab      	strh	r3, [r5, #12]
  406938:	dd6f      	ble.n	406a1a <__sflush_r+0xfe>
  40693a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40693c:	2c00      	cmp	r4, #0
  40693e:	d049      	beq.n	4069d4 <__sflush_r+0xb8>
  406940:	2200      	movs	r2, #0
  406942:	b29b      	uxth	r3, r3
  406944:	f8d8 6000 	ldr.w	r6, [r8]
  406948:	f8c8 2000 	str.w	r2, [r8]
  40694c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406950:	d067      	beq.n	406a22 <__sflush_r+0x106>
  406952:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406954:	075f      	lsls	r7, r3, #29
  406956:	d505      	bpl.n	406964 <__sflush_r+0x48>
  406958:	6869      	ldr	r1, [r5, #4]
  40695a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40695c:	1a52      	subs	r2, r2, r1
  40695e:	b10b      	cbz	r3, 406964 <__sflush_r+0x48>
  406960:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406962:	1ad2      	subs	r2, r2, r3
  406964:	2300      	movs	r3, #0
  406966:	69e9      	ldr	r1, [r5, #28]
  406968:	4640      	mov	r0, r8
  40696a:	47a0      	blx	r4
  40696c:	1c44      	adds	r4, r0, #1
  40696e:	d03c      	beq.n	4069ea <__sflush_r+0xce>
  406970:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406974:	692a      	ldr	r2, [r5, #16]
  406976:	602a      	str	r2, [r5, #0]
  406978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40697c:	2200      	movs	r2, #0
  40697e:	81ab      	strh	r3, [r5, #12]
  406980:	04db      	lsls	r3, r3, #19
  406982:	606a      	str	r2, [r5, #4]
  406984:	d447      	bmi.n	406a16 <__sflush_r+0xfa>
  406986:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406988:	f8c8 6000 	str.w	r6, [r8]
  40698c:	b311      	cbz	r1, 4069d4 <__sflush_r+0xb8>
  40698e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406992:	4299      	cmp	r1, r3
  406994:	d002      	beq.n	40699c <__sflush_r+0x80>
  406996:	4640      	mov	r0, r8
  406998:	f000 f95a 	bl	406c50 <_free_r>
  40699c:	2000      	movs	r0, #0
  40699e:	6328      	str	r0, [r5, #48]	; 0x30
  4069a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069a4:	692e      	ldr	r6, [r5, #16]
  4069a6:	b1ae      	cbz	r6, 4069d4 <__sflush_r+0xb8>
  4069a8:	682c      	ldr	r4, [r5, #0]
  4069aa:	602e      	str	r6, [r5, #0]
  4069ac:	0791      	lsls	r1, r2, #30
  4069ae:	bf0c      	ite	eq
  4069b0:	696b      	ldreq	r3, [r5, #20]
  4069b2:	2300      	movne	r3, #0
  4069b4:	1ba4      	subs	r4, r4, r6
  4069b6:	60ab      	str	r3, [r5, #8]
  4069b8:	e00a      	b.n	4069d0 <__sflush_r+0xb4>
  4069ba:	4623      	mov	r3, r4
  4069bc:	4632      	mov	r2, r6
  4069be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4069c0:	69e9      	ldr	r1, [r5, #28]
  4069c2:	4640      	mov	r0, r8
  4069c4:	47b8      	blx	r7
  4069c6:	2800      	cmp	r0, #0
  4069c8:	eba4 0400 	sub.w	r4, r4, r0
  4069cc:	4406      	add	r6, r0
  4069ce:	dd04      	ble.n	4069da <__sflush_r+0xbe>
  4069d0:	2c00      	cmp	r4, #0
  4069d2:	dcf2      	bgt.n	4069ba <__sflush_r+0x9e>
  4069d4:	2000      	movs	r0, #0
  4069d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069da:	89ab      	ldrh	r3, [r5, #12]
  4069dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4069e0:	81ab      	strh	r3, [r5, #12]
  4069e2:	f04f 30ff 	mov.w	r0, #4294967295
  4069e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069ea:	f8d8 4000 	ldr.w	r4, [r8]
  4069ee:	2c1d      	cmp	r4, #29
  4069f0:	d8f3      	bhi.n	4069da <__sflush_r+0xbe>
  4069f2:	4b19      	ldr	r3, [pc, #100]	; (406a58 <__sflush_r+0x13c>)
  4069f4:	40e3      	lsrs	r3, r4
  4069f6:	43db      	mvns	r3, r3
  4069f8:	f013 0301 	ands.w	r3, r3, #1
  4069fc:	d1ed      	bne.n	4069da <__sflush_r+0xbe>
  4069fe:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406a02:	606b      	str	r3, [r5, #4]
  406a04:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406a08:	6929      	ldr	r1, [r5, #16]
  406a0a:	81ab      	strh	r3, [r5, #12]
  406a0c:	04da      	lsls	r2, r3, #19
  406a0e:	6029      	str	r1, [r5, #0]
  406a10:	d5b9      	bpl.n	406986 <__sflush_r+0x6a>
  406a12:	2c00      	cmp	r4, #0
  406a14:	d1b7      	bne.n	406986 <__sflush_r+0x6a>
  406a16:	6528      	str	r0, [r5, #80]	; 0x50
  406a18:	e7b5      	b.n	406986 <__sflush_r+0x6a>
  406a1a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406a1c:	2a00      	cmp	r2, #0
  406a1e:	dc8c      	bgt.n	40693a <__sflush_r+0x1e>
  406a20:	e7d8      	b.n	4069d4 <__sflush_r+0xb8>
  406a22:	2301      	movs	r3, #1
  406a24:	69e9      	ldr	r1, [r5, #28]
  406a26:	4640      	mov	r0, r8
  406a28:	47a0      	blx	r4
  406a2a:	1c43      	adds	r3, r0, #1
  406a2c:	4602      	mov	r2, r0
  406a2e:	d002      	beq.n	406a36 <__sflush_r+0x11a>
  406a30:	89ab      	ldrh	r3, [r5, #12]
  406a32:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406a34:	e78e      	b.n	406954 <__sflush_r+0x38>
  406a36:	f8d8 3000 	ldr.w	r3, [r8]
  406a3a:	2b00      	cmp	r3, #0
  406a3c:	d0f8      	beq.n	406a30 <__sflush_r+0x114>
  406a3e:	2b1d      	cmp	r3, #29
  406a40:	d001      	beq.n	406a46 <__sflush_r+0x12a>
  406a42:	2b16      	cmp	r3, #22
  406a44:	d102      	bne.n	406a4c <__sflush_r+0x130>
  406a46:	f8c8 6000 	str.w	r6, [r8]
  406a4a:	e7c3      	b.n	4069d4 <__sflush_r+0xb8>
  406a4c:	89ab      	ldrh	r3, [r5, #12]
  406a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406a52:	81ab      	strh	r3, [r5, #12]
  406a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a58:	20400001 	.word	0x20400001

00406a5c <_fflush_r>:
  406a5c:	b538      	push	{r3, r4, r5, lr}
  406a5e:	460d      	mov	r5, r1
  406a60:	4604      	mov	r4, r0
  406a62:	b108      	cbz	r0, 406a68 <_fflush_r+0xc>
  406a64:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406a66:	b1bb      	cbz	r3, 406a98 <_fflush_r+0x3c>
  406a68:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406a6c:	b188      	cbz	r0, 406a92 <_fflush_r+0x36>
  406a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406a70:	07db      	lsls	r3, r3, #31
  406a72:	d401      	bmi.n	406a78 <_fflush_r+0x1c>
  406a74:	0581      	lsls	r1, r0, #22
  406a76:	d517      	bpl.n	406aa8 <_fflush_r+0x4c>
  406a78:	4620      	mov	r0, r4
  406a7a:	4629      	mov	r1, r5
  406a7c:	f7ff ff4e 	bl	40691c <__sflush_r>
  406a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406a82:	07da      	lsls	r2, r3, #31
  406a84:	4604      	mov	r4, r0
  406a86:	d402      	bmi.n	406a8e <_fflush_r+0x32>
  406a88:	89ab      	ldrh	r3, [r5, #12]
  406a8a:	059b      	lsls	r3, r3, #22
  406a8c:	d507      	bpl.n	406a9e <_fflush_r+0x42>
  406a8e:	4620      	mov	r0, r4
  406a90:	bd38      	pop	{r3, r4, r5, pc}
  406a92:	4604      	mov	r4, r0
  406a94:	4620      	mov	r0, r4
  406a96:	bd38      	pop	{r3, r4, r5, pc}
  406a98:	f000 f838 	bl	406b0c <__sinit>
  406a9c:	e7e4      	b.n	406a68 <_fflush_r+0xc>
  406a9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406aa0:	f000 fb72 	bl	407188 <__retarget_lock_release_recursive>
  406aa4:	4620      	mov	r0, r4
  406aa6:	bd38      	pop	{r3, r4, r5, pc}
  406aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406aaa:	f000 fb6b 	bl	407184 <__retarget_lock_acquire_recursive>
  406aae:	e7e3      	b.n	406a78 <_fflush_r+0x1c>

00406ab0 <_cleanup_r>:
  406ab0:	4901      	ldr	r1, [pc, #4]	; (406ab8 <_cleanup_r+0x8>)
  406ab2:	f000 bb2b 	b.w	40710c <_fwalk_reent>
  406ab6:	bf00      	nop
  406ab8:	00407fb9 	.word	0x00407fb9

00406abc <std.isra.0>:
  406abc:	b510      	push	{r4, lr}
  406abe:	2300      	movs	r3, #0
  406ac0:	4604      	mov	r4, r0
  406ac2:	8181      	strh	r1, [r0, #12]
  406ac4:	81c2      	strh	r2, [r0, #14]
  406ac6:	6003      	str	r3, [r0, #0]
  406ac8:	6043      	str	r3, [r0, #4]
  406aca:	6083      	str	r3, [r0, #8]
  406acc:	6643      	str	r3, [r0, #100]	; 0x64
  406ace:	6103      	str	r3, [r0, #16]
  406ad0:	6143      	str	r3, [r0, #20]
  406ad2:	6183      	str	r3, [r0, #24]
  406ad4:	4619      	mov	r1, r3
  406ad6:	2208      	movs	r2, #8
  406ad8:	305c      	adds	r0, #92	; 0x5c
  406ada:	f7fd f9d3 	bl	403e84 <memset>
  406ade:	4807      	ldr	r0, [pc, #28]	; (406afc <std.isra.0+0x40>)
  406ae0:	4907      	ldr	r1, [pc, #28]	; (406b00 <std.isra.0+0x44>)
  406ae2:	4a08      	ldr	r2, [pc, #32]	; (406b04 <std.isra.0+0x48>)
  406ae4:	4b08      	ldr	r3, [pc, #32]	; (406b08 <std.isra.0+0x4c>)
  406ae6:	6220      	str	r0, [r4, #32]
  406ae8:	61e4      	str	r4, [r4, #28]
  406aea:	6261      	str	r1, [r4, #36]	; 0x24
  406aec:	62a2      	str	r2, [r4, #40]	; 0x28
  406aee:	62e3      	str	r3, [r4, #44]	; 0x2c
  406af0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406af8:	f000 bb40 	b.w	40717c <__retarget_lock_init_recursive>
  406afc:	00407d29 	.word	0x00407d29
  406b00:	00407d4d 	.word	0x00407d4d
  406b04:	00407d89 	.word	0x00407d89
  406b08:	00407da9 	.word	0x00407da9

00406b0c <__sinit>:
  406b0c:	b510      	push	{r4, lr}
  406b0e:	4604      	mov	r4, r0
  406b10:	4812      	ldr	r0, [pc, #72]	; (406b5c <__sinit+0x50>)
  406b12:	f000 fb37 	bl	407184 <__retarget_lock_acquire_recursive>
  406b16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406b18:	b9d2      	cbnz	r2, 406b50 <__sinit+0x44>
  406b1a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406b1e:	4810      	ldr	r0, [pc, #64]	; (406b60 <__sinit+0x54>)
  406b20:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406b24:	2103      	movs	r1, #3
  406b26:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406b2a:	63e0      	str	r0, [r4, #60]	; 0x3c
  406b2c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406b30:	6860      	ldr	r0, [r4, #4]
  406b32:	2104      	movs	r1, #4
  406b34:	f7ff ffc2 	bl	406abc <std.isra.0>
  406b38:	2201      	movs	r2, #1
  406b3a:	2109      	movs	r1, #9
  406b3c:	68a0      	ldr	r0, [r4, #8]
  406b3e:	f7ff ffbd 	bl	406abc <std.isra.0>
  406b42:	2202      	movs	r2, #2
  406b44:	2112      	movs	r1, #18
  406b46:	68e0      	ldr	r0, [r4, #12]
  406b48:	f7ff ffb8 	bl	406abc <std.isra.0>
  406b4c:	2301      	movs	r3, #1
  406b4e:	63a3      	str	r3, [r4, #56]	; 0x38
  406b50:	4802      	ldr	r0, [pc, #8]	; (406b5c <__sinit+0x50>)
  406b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406b56:	f000 bb17 	b.w	407188 <__retarget_lock_release_recursive>
  406b5a:	bf00      	nop
  406b5c:	20400ca8 	.word	0x20400ca8
  406b60:	00406ab1 	.word	0x00406ab1

00406b64 <__sfp_lock_acquire>:
  406b64:	4801      	ldr	r0, [pc, #4]	; (406b6c <__sfp_lock_acquire+0x8>)
  406b66:	f000 bb0d 	b.w	407184 <__retarget_lock_acquire_recursive>
  406b6a:	bf00      	nop
  406b6c:	20400cbc 	.word	0x20400cbc

00406b70 <__sfp_lock_release>:
  406b70:	4801      	ldr	r0, [pc, #4]	; (406b78 <__sfp_lock_release+0x8>)
  406b72:	f000 bb09 	b.w	407188 <__retarget_lock_release_recursive>
  406b76:	bf00      	nop
  406b78:	20400cbc 	.word	0x20400cbc

00406b7c <__libc_fini_array>:
  406b7c:	b538      	push	{r3, r4, r5, lr}
  406b7e:	4c0a      	ldr	r4, [pc, #40]	; (406ba8 <__libc_fini_array+0x2c>)
  406b80:	4d0a      	ldr	r5, [pc, #40]	; (406bac <__libc_fini_array+0x30>)
  406b82:	1b64      	subs	r4, r4, r5
  406b84:	10a4      	asrs	r4, r4, #2
  406b86:	d00a      	beq.n	406b9e <__libc_fini_array+0x22>
  406b88:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406b8c:	3b01      	subs	r3, #1
  406b8e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406b92:	3c01      	subs	r4, #1
  406b94:	f855 3904 	ldr.w	r3, [r5], #-4
  406b98:	4798      	blx	r3
  406b9a:	2c00      	cmp	r4, #0
  406b9c:	d1f9      	bne.n	406b92 <__libc_fini_array+0x16>
  406b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406ba2:	f001 bff3 	b.w	408b8c <_fini>
  406ba6:	bf00      	nop
  406ba8:	00408b9c 	.word	0x00408b9c
  406bac:	00408b98 	.word	0x00408b98

00406bb0 <_malloc_trim_r>:
  406bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406bb2:	4f24      	ldr	r7, [pc, #144]	; (406c44 <_malloc_trim_r+0x94>)
  406bb4:	460c      	mov	r4, r1
  406bb6:	4606      	mov	r6, r0
  406bb8:	f7fd f9b2 	bl	403f20 <__malloc_lock>
  406bbc:	68bb      	ldr	r3, [r7, #8]
  406bbe:	685d      	ldr	r5, [r3, #4]
  406bc0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406bc4:	310f      	adds	r1, #15
  406bc6:	f025 0503 	bic.w	r5, r5, #3
  406bca:	4429      	add	r1, r5
  406bcc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406bd0:	f021 010f 	bic.w	r1, r1, #15
  406bd4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406bd8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406bdc:	db07      	blt.n	406bee <_malloc_trim_r+0x3e>
  406bde:	2100      	movs	r1, #0
  406be0:	4630      	mov	r0, r6
  406be2:	f7fd fa13 	bl	40400c <_sbrk_r>
  406be6:	68bb      	ldr	r3, [r7, #8]
  406be8:	442b      	add	r3, r5
  406bea:	4298      	cmp	r0, r3
  406bec:	d004      	beq.n	406bf8 <_malloc_trim_r+0x48>
  406bee:	4630      	mov	r0, r6
  406bf0:	f7fd f99c 	bl	403f2c <__malloc_unlock>
  406bf4:	2000      	movs	r0, #0
  406bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406bf8:	4261      	negs	r1, r4
  406bfa:	4630      	mov	r0, r6
  406bfc:	f7fd fa06 	bl	40400c <_sbrk_r>
  406c00:	3001      	adds	r0, #1
  406c02:	d00d      	beq.n	406c20 <_malloc_trim_r+0x70>
  406c04:	4b10      	ldr	r3, [pc, #64]	; (406c48 <_malloc_trim_r+0x98>)
  406c06:	68ba      	ldr	r2, [r7, #8]
  406c08:	6819      	ldr	r1, [r3, #0]
  406c0a:	1b2d      	subs	r5, r5, r4
  406c0c:	f045 0501 	orr.w	r5, r5, #1
  406c10:	4630      	mov	r0, r6
  406c12:	1b09      	subs	r1, r1, r4
  406c14:	6055      	str	r5, [r2, #4]
  406c16:	6019      	str	r1, [r3, #0]
  406c18:	f7fd f988 	bl	403f2c <__malloc_unlock>
  406c1c:	2001      	movs	r0, #1
  406c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c20:	2100      	movs	r1, #0
  406c22:	4630      	mov	r0, r6
  406c24:	f7fd f9f2 	bl	40400c <_sbrk_r>
  406c28:	68ba      	ldr	r2, [r7, #8]
  406c2a:	1a83      	subs	r3, r0, r2
  406c2c:	2b0f      	cmp	r3, #15
  406c2e:	ddde      	ble.n	406bee <_malloc_trim_r+0x3e>
  406c30:	4c06      	ldr	r4, [pc, #24]	; (406c4c <_malloc_trim_r+0x9c>)
  406c32:	4905      	ldr	r1, [pc, #20]	; (406c48 <_malloc_trim_r+0x98>)
  406c34:	6824      	ldr	r4, [r4, #0]
  406c36:	f043 0301 	orr.w	r3, r3, #1
  406c3a:	1b00      	subs	r0, r0, r4
  406c3c:	6053      	str	r3, [r2, #4]
  406c3e:	6008      	str	r0, [r1, #0]
  406c40:	e7d5      	b.n	406bee <_malloc_trim_r+0x3e>
  406c42:	bf00      	nop
  406c44:	20400438 	.word	0x20400438
  406c48:	20400b8c 	.word	0x20400b8c
  406c4c:	20400840 	.word	0x20400840

00406c50 <_free_r>:
  406c50:	2900      	cmp	r1, #0
  406c52:	d044      	beq.n	406cde <_free_r+0x8e>
  406c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c58:	460d      	mov	r5, r1
  406c5a:	4680      	mov	r8, r0
  406c5c:	f7fd f960 	bl	403f20 <__malloc_lock>
  406c60:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406c64:	4969      	ldr	r1, [pc, #420]	; (406e0c <_free_r+0x1bc>)
  406c66:	f027 0301 	bic.w	r3, r7, #1
  406c6a:	f1a5 0408 	sub.w	r4, r5, #8
  406c6e:	18e2      	adds	r2, r4, r3
  406c70:	688e      	ldr	r6, [r1, #8]
  406c72:	6850      	ldr	r0, [r2, #4]
  406c74:	42b2      	cmp	r2, r6
  406c76:	f020 0003 	bic.w	r0, r0, #3
  406c7a:	d05e      	beq.n	406d3a <_free_r+0xea>
  406c7c:	07fe      	lsls	r6, r7, #31
  406c7e:	6050      	str	r0, [r2, #4]
  406c80:	d40b      	bmi.n	406c9a <_free_r+0x4a>
  406c82:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406c86:	1be4      	subs	r4, r4, r7
  406c88:	f101 0e08 	add.w	lr, r1, #8
  406c8c:	68a5      	ldr	r5, [r4, #8]
  406c8e:	4575      	cmp	r5, lr
  406c90:	443b      	add	r3, r7
  406c92:	d06d      	beq.n	406d70 <_free_r+0x120>
  406c94:	68e7      	ldr	r7, [r4, #12]
  406c96:	60ef      	str	r7, [r5, #12]
  406c98:	60bd      	str	r5, [r7, #8]
  406c9a:	1815      	adds	r5, r2, r0
  406c9c:	686d      	ldr	r5, [r5, #4]
  406c9e:	07ed      	lsls	r5, r5, #31
  406ca0:	d53e      	bpl.n	406d20 <_free_r+0xd0>
  406ca2:	f043 0201 	orr.w	r2, r3, #1
  406ca6:	6062      	str	r2, [r4, #4]
  406ca8:	50e3      	str	r3, [r4, r3]
  406caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406cae:	d217      	bcs.n	406ce0 <_free_r+0x90>
  406cb0:	08db      	lsrs	r3, r3, #3
  406cb2:	1c58      	adds	r0, r3, #1
  406cb4:	109a      	asrs	r2, r3, #2
  406cb6:	684d      	ldr	r5, [r1, #4]
  406cb8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406cbc:	60a7      	str	r7, [r4, #8]
  406cbe:	2301      	movs	r3, #1
  406cc0:	4093      	lsls	r3, r2
  406cc2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406cc6:	432b      	orrs	r3, r5
  406cc8:	3a08      	subs	r2, #8
  406cca:	60e2      	str	r2, [r4, #12]
  406ccc:	604b      	str	r3, [r1, #4]
  406cce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406cd2:	60fc      	str	r4, [r7, #12]
  406cd4:	4640      	mov	r0, r8
  406cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406cda:	f7fd b927 	b.w	403f2c <__malloc_unlock>
  406cde:	4770      	bx	lr
  406ce0:	0a5a      	lsrs	r2, r3, #9
  406ce2:	2a04      	cmp	r2, #4
  406ce4:	d852      	bhi.n	406d8c <_free_r+0x13c>
  406ce6:	099a      	lsrs	r2, r3, #6
  406ce8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406cec:	00ff      	lsls	r7, r7, #3
  406cee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406cf2:	19c8      	adds	r0, r1, r7
  406cf4:	59ca      	ldr	r2, [r1, r7]
  406cf6:	3808      	subs	r0, #8
  406cf8:	4290      	cmp	r0, r2
  406cfa:	d04f      	beq.n	406d9c <_free_r+0x14c>
  406cfc:	6851      	ldr	r1, [r2, #4]
  406cfe:	f021 0103 	bic.w	r1, r1, #3
  406d02:	428b      	cmp	r3, r1
  406d04:	d232      	bcs.n	406d6c <_free_r+0x11c>
  406d06:	6892      	ldr	r2, [r2, #8]
  406d08:	4290      	cmp	r0, r2
  406d0a:	d1f7      	bne.n	406cfc <_free_r+0xac>
  406d0c:	68c3      	ldr	r3, [r0, #12]
  406d0e:	60a0      	str	r0, [r4, #8]
  406d10:	60e3      	str	r3, [r4, #12]
  406d12:	609c      	str	r4, [r3, #8]
  406d14:	60c4      	str	r4, [r0, #12]
  406d16:	4640      	mov	r0, r8
  406d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406d1c:	f7fd b906 	b.w	403f2c <__malloc_unlock>
  406d20:	6895      	ldr	r5, [r2, #8]
  406d22:	4f3b      	ldr	r7, [pc, #236]	; (406e10 <_free_r+0x1c0>)
  406d24:	42bd      	cmp	r5, r7
  406d26:	4403      	add	r3, r0
  406d28:	d040      	beq.n	406dac <_free_r+0x15c>
  406d2a:	68d0      	ldr	r0, [r2, #12]
  406d2c:	60e8      	str	r0, [r5, #12]
  406d2e:	f043 0201 	orr.w	r2, r3, #1
  406d32:	6085      	str	r5, [r0, #8]
  406d34:	6062      	str	r2, [r4, #4]
  406d36:	50e3      	str	r3, [r4, r3]
  406d38:	e7b7      	b.n	406caa <_free_r+0x5a>
  406d3a:	07ff      	lsls	r7, r7, #31
  406d3c:	4403      	add	r3, r0
  406d3e:	d407      	bmi.n	406d50 <_free_r+0x100>
  406d40:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406d44:	1aa4      	subs	r4, r4, r2
  406d46:	4413      	add	r3, r2
  406d48:	68a0      	ldr	r0, [r4, #8]
  406d4a:	68e2      	ldr	r2, [r4, #12]
  406d4c:	60c2      	str	r2, [r0, #12]
  406d4e:	6090      	str	r0, [r2, #8]
  406d50:	4a30      	ldr	r2, [pc, #192]	; (406e14 <_free_r+0x1c4>)
  406d52:	6812      	ldr	r2, [r2, #0]
  406d54:	f043 0001 	orr.w	r0, r3, #1
  406d58:	4293      	cmp	r3, r2
  406d5a:	6060      	str	r0, [r4, #4]
  406d5c:	608c      	str	r4, [r1, #8]
  406d5e:	d3b9      	bcc.n	406cd4 <_free_r+0x84>
  406d60:	4b2d      	ldr	r3, [pc, #180]	; (406e18 <_free_r+0x1c8>)
  406d62:	4640      	mov	r0, r8
  406d64:	6819      	ldr	r1, [r3, #0]
  406d66:	f7ff ff23 	bl	406bb0 <_malloc_trim_r>
  406d6a:	e7b3      	b.n	406cd4 <_free_r+0x84>
  406d6c:	4610      	mov	r0, r2
  406d6e:	e7cd      	b.n	406d0c <_free_r+0xbc>
  406d70:	1811      	adds	r1, r2, r0
  406d72:	6849      	ldr	r1, [r1, #4]
  406d74:	07c9      	lsls	r1, r1, #31
  406d76:	d444      	bmi.n	406e02 <_free_r+0x1b2>
  406d78:	6891      	ldr	r1, [r2, #8]
  406d7a:	68d2      	ldr	r2, [r2, #12]
  406d7c:	60ca      	str	r2, [r1, #12]
  406d7e:	4403      	add	r3, r0
  406d80:	f043 0001 	orr.w	r0, r3, #1
  406d84:	6091      	str	r1, [r2, #8]
  406d86:	6060      	str	r0, [r4, #4]
  406d88:	50e3      	str	r3, [r4, r3]
  406d8a:	e7a3      	b.n	406cd4 <_free_r+0x84>
  406d8c:	2a14      	cmp	r2, #20
  406d8e:	d816      	bhi.n	406dbe <_free_r+0x16e>
  406d90:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406d94:	00ff      	lsls	r7, r7, #3
  406d96:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406d9a:	e7aa      	b.n	406cf2 <_free_r+0xa2>
  406d9c:	10aa      	asrs	r2, r5, #2
  406d9e:	2301      	movs	r3, #1
  406da0:	684d      	ldr	r5, [r1, #4]
  406da2:	4093      	lsls	r3, r2
  406da4:	432b      	orrs	r3, r5
  406da6:	604b      	str	r3, [r1, #4]
  406da8:	4603      	mov	r3, r0
  406daa:	e7b0      	b.n	406d0e <_free_r+0xbe>
  406dac:	f043 0201 	orr.w	r2, r3, #1
  406db0:	614c      	str	r4, [r1, #20]
  406db2:	610c      	str	r4, [r1, #16]
  406db4:	60e5      	str	r5, [r4, #12]
  406db6:	60a5      	str	r5, [r4, #8]
  406db8:	6062      	str	r2, [r4, #4]
  406dba:	50e3      	str	r3, [r4, r3]
  406dbc:	e78a      	b.n	406cd4 <_free_r+0x84>
  406dbe:	2a54      	cmp	r2, #84	; 0x54
  406dc0:	d806      	bhi.n	406dd0 <_free_r+0x180>
  406dc2:	0b1a      	lsrs	r2, r3, #12
  406dc4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406dc8:	00ff      	lsls	r7, r7, #3
  406dca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406dce:	e790      	b.n	406cf2 <_free_r+0xa2>
  406dd0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406dd4:	d806      	bhi.n	406de4 <_free_r+0x194>
  406dd6:	0bda      	lsrs	r2, r3, #15
  406dd8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406ddc:	00ff      	lsls	r7, r7, #3
  406dde:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406de2:	e786      	b.n	406cf2 <_free_r+0xa2>
  406de4:	f240 5054 	movw	r0, #1364	; 0x554
  406de8:	4282      	cmp	r2, r0
  406dea:	d806      	bhi.n	406dfa <_free_r+0x1aa>
  406dec:	0c9a      	lsrs	r2, r3, #18
  406dee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406df2:	00ff      	lsls	r7, r7, #3
  406df4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406df8:	e77b      	b.n	406cf2 <_free_r+0xa2>
  406dfa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406dfe:	257e      	movs	r5, #126	; 0x7e
  406e00:	e777      	b.n	406cf2 <_free_r+0xa2>
  406e02:	f043 0101 	orr.w	r1, r3, #1
  406e06:	6061      	str	r1, [r4, #4]
  406e08:	6013      	str	r3, [r2, #0]
  406e0a:	e763      	b.n	406cd4 <_free_r+0x84>
  406e0c:	20400438 	.word	0x20400438
  406e10:	20400440 	.word	0x20400440
  406e14:	20400844 	.word	0x20400844
  406e18:	20400bbc 	.word	0x20400bbc

00406e1c <__sfvwrite_r>:
  406e1c:	6893      	ldr	r3, [r2, #8]
  406e1e:	2b00      	cmp	r3, #0
  406e20:	d073      	beq.n	406f0a <__sfvwrite_r+0xee>
  406e22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e26:	898b      	ldrh	r3, [r1, #12]
  406e28:	b083      	sub	sp, #12
  406e2a:	460c      	mov	r4, r1
  406e2c:	0719      	lsls	r1, r3, #28
  406e2e:	9000      	str	r0, [sp, #0]
  406e30:	4616      	mov	r6, r2
  406e32:	d526      	bpl.n	406e82 <__sfvwrite_r+0x66>
  406e34:	6922      	ldr	r2, [r4, #16]
  406e36:	b322      	cbz	r2, 406e82 <__sfvwrite_r+0x66>
  406e38:	f013 0002 	ands.w	r0, r3, #2
  406e3c:	6835      	ldr	r5, [r6, #0]
  406e3e:	d02c      	beq.n	406e9a <__sfvwrite_r+0x7e>
  406e40:	f04f 0900 	mov.w	r9, #0
  406e44:	4fb0      	ldr	r7, [pc, #704]	; (407108 <__sfvwrite_r+0x2ec>)
  406e46:	46c8      	mov	r8, r9
  406e48:	46b2      	mov	sl, r6
  406e4a:	45b8      	cmp	r8, r7
  406e4c:	4643      	mov	r3, r8
  406e4e:	464a      	mov	r2, r9
  406e50:	bf28      	it	cs
  406e52:	463b      	movcs	r3, r7
  406e54:	9800      	ldr	r0, [sp, #0]
  406e56:	f1b8 0f00 	cmp.w	r8, #0
  406e5a:	d050      	beq.n	406efe <__sfvwrite_r+0xe2>
  406e5c:	69e1      	ldr	r1, [r4, #28]
  406e5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406e60:	47b0      	blx	r6
  406e62:	2800      	cmp	r0, #0
  406e64:	dd58      	ble.n	406f18 <__sfvwrite_r+0xfc>
  406e66:	f8da 3008 	ldr.w	r3, [sl, #8]
  406e6a:	1a1b      	subs	r3, r3, r0
  406e6c:	4481      	add	r9, r0
  406e6e:	eba8 0800 	sub.w	r8, r8, r0
  406e72:	f8ca 3008 	str.w	r3, [sl, #8]
  406e76:	2b00      	cmp	r3, #0
  406e78:	d1e7      	bne.n	406e4a <__sfvwrite_r+0x2e>
  406e7a:	2000      	movs	r0, #0
  406e7c:	b003      	add	sp, #12
  406e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e82:	4621      	mov	r1, r4
  406e84:	9800      	ldr	r0, [sp, #0]
  406e86:	f7fe fd17 	bl	4058b8 <__swsetup_r>
  406e8a:	2800      	cmp	r0, #0
  406e8c:	f040 8133 	bne.w	4070f6 <__sfvwrite_r+0x2da>
  406e90:	89a3      	ldrh	r3, [r4, #12]
  406e92:	6835      	ldr	r5, [r6, #0]
  406e94:	f013 0002 	ands.w	r0, r3, #2
  406e98:	d1d2      	bne.n	406e40 <__sfvwrite_r+0x24>
  406e9a:	f013 0901 	ands.w	r9, r3, #1
  406e9e:	d145      	bne.n	406f2c <__sfvwrite_r+0x110>
  406ea0:	464f      	mov	r7, r9
  406ea2:	9601      	str	r6, [sp, #4]
  406ea4:	b337      	cbz	r7, 406ef4 <__sfvwrite_r+0xd8>
  406ea6:	059a      	lsls	r2, r3, #22
  406ea8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406eac:	f140 8083 	bpl.w	406fb6 <__sfvwrite_r+0x19a>
  406eb0:	4547      	cmp	r7, r8
  406eb2:	46c3      	mov	fp, r8
  406eb4:	f0c0 80ab 	bcc.w	40700e <__sfvwrite_r+0x1f2>
  406eb8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406ebc:	f040 80ac 	bne.w	407018 <__sfvwrite_r+0x1fc>
  406ec0:	6820      	ldr	r0, [r4, #0]
  406ec2:	46ba      	mov	sl, r7
  406ec4:	465a      	mov	r2, fp
  406ec6:	4649      	mov	r1, r9
  406ec8:	f000 fa2a 	bl	407320 <memmove>
  406ecc:	68a2      	ldr	r2, [r4, #8]
  406ece:	6823      	ldr	r3, [r4, #0]
  406ed0:	eba2 0208 	sub.w	r2, r2, r8
  406ed4:	445b      	add	r3, fp
  406ed6:	60a2      	str	r2, [r4, #8]
  406ed8:	6023      	str	r3, [r4, #0]
  406eda:	9a01      	ldr	r2, [sp, #4]
  406edc:	6893      	ldr	r3, [r2, #8]
  406ede:	eba3 030a 	sub.w	r3, r3, sl
  406ee2:	44d1      	add	r9, sl
  406ee4:	eba7 070a 	sub.w	r7, r7, sl
  406ee8:	6093      	str	r3, [r2, #8]
  406eea:	2b00      	cmp	r3, #0
  406eec:	d0c5      	beq.n	406e7a <__sfvwrite_r+0x5e>
  406eee:	89a3      	ldrh	r3, [r4, #12]
  406ef0:	2f00      	cmp	r7, #0
  406ef2:	d1d8      	bne.n	406ea6 <__sfvwrite_r+0x8a>
  406ef4:	f8d5 9000 	ldr.w	r9, [r5]
  406ef8:	686f      	ldr	r7, [r5, #4]
  406efa:	3508      	adds	r5, #8
  406efc:	e7d2      	b.n	406ea4 <__sfvwrite_r+0x88>
  406efe:	f8d5 9000 	ldr.w	r9, [r5]
  406f02:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406f06:	3508      	adds	r5, #8
  406f08:	e79f      	b.n	406e4a <__sfvwrite_r+0x2e>
  406f0a:	2000      	movs	r0, #0
  406f0c:	4770      	bx	lr
  406f0e:	4621      	mov	r1, r4
  406f10:	9800      	ldr	r0, [sp, #0]
  406f12:	f7ff fda3 	bl	406a5c <_fflush_r>
  406f16:	b370      	cbz	r0, 406f76 <__sfvwrite_r+0x15a>
  406f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f20:	f04f 30ff 	mov.w	r0, #4294967295
  406f24:	81a3      	strh	r3, [r4, #12]
  406f26:	b003      	add	sp, #12
  406f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f2c:	4681      	mov	r9, r0
  406f2e:	4633      	mov	r3, r6
  406f30:	464e      	mov	r6, r9
  406f32:	46a8      	mov	r8, r5
  406f34:	469a      	mov	sl, r3
  406f36:	464d      	mov	r5, r9
  406f38:	b34e      	cbz	r6, 406f8e <__sfvwrite_r+0x172>
  406f3a:	b380      	cbz	r0, 406f9e <__sfvwrite_r+0x182>
  406f3c:	6820      	ldr	r0, [r4, #0]
  406f3e:	6923      	ldr	r3, [r4, #16]
  406f40:	6962      	ldr	r2, [r4, #20]
  406f42:	45b1      	cmp	r9, r6
  406f44:	46cb      	mov	fp, r9
  406f46:	bf28      	it	cs
  406f48:	46b3      	movcs	fp, r6
  406f4a:	4298      	cmp	r0, r3
  406f4c:	465f      	mov	r7, fp
  406f4e:	d904      	bls.n	406f5a <__sfvwrite_r+0x13e>
  406f50:	68a3      	ldr	r3, [r4, #8]
  406f52:	4413      	add	r3, r2
  406f54:	459b      	cmp	fp, r3
  406f56:	f300 80a6 	bgt.w	4070a6 <__sfvwrite_r+0x28a>
  406f5a:	4593      	cmp	fp, r2
  406f5c:	db4b      	blt.n	406ff6 <__sfvwrite_r+0x1da>
  406f5e:	4613      	mov	r3, r2
  406f60:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406f62:	69e1      	ldr	r1, [r4, #28]
  406f64:	9800      	ldr	r0, [sp, #0]
  406f66:	462a      	mov	r2, r5
  406f68:	47b8      	blx	r7
  406f6a:	1e07      	subs	r7, r0, #0
  406f6c:	ddd4      	ble.n	406f18 <__sfvwrite_r+0xfc>
  406f6e:	ebb9 0907 	subs.w	r9, r9, r7
  406f72:	d0cc      	beq.n	406f0e <__sfvwrite_r+0xf2>
  406f74:	2001      	movs	r0, #1
  406f76:	f8da 3008 	ldr.w	r3, [sl, #8]
  406f7a:	1bdb      	subs	r3, r3, r7
  406f7c:	443d      	add	r5, r7
  406f7e:	1bf6      	subs	r6, r6, r7
  406f80:	f8ca 3008 	str.w	r3, [sl, #8]
  406f84:	2b00      	cmp	r3, #0
  406f86:	f43f af78 	beq.w	406e7a <__sfvwrite_r+0x5e>
  406f8a:	2e00      	cmp	r6, #0
  406f8c:	d1d5      	bne.n	406f3a <__sfvwrite_r+0x11e>
  406f8e:	f108 0308 	add.w	r3, r8, #8
  406f92:	e913 0060 	ldmdb	r3, {r5, r6}
  406f96:	4698      	mov	r8, r3
  406f98:	3308      	adds	r3, #8
  406f9a:	2e00      	cmp	r6, #0
  406f9c:	d0f9      	beq.n	406f92 <__sfvwrite_r+0x176>
  406f9e:	4632      	mov	r2, r6
  406fa0:	210a      	movs	r1, #10
  406fa2:	4628      	mov	r0, r5
  406fa4:	f000 f96c 	bl	407280 <memchr>
  406fa8:	2800      	cmp	r0, #0
  406faa:	f000 80a1 	beq.w	4070f0 <__sfvwrite_r+0x2d4>
  406fae:	3001      	adds	r0, #1
  406fb0:	eba0 0905 	sub.w	r9, r0, r5
  406fb4:	e7c2      	b.n	406f3c <__sfvwrite_r+0x120>
  406fb6:	6820      	ldr	r0, [r4, #0]
  406fb8:	6923      	ldr	r3, [r4, #16]
  406fba:	4298      	cmp	r0, r3
  406fbc:	d802      	bhi.n	406fc4 <__sfvwrite_r+0x1a8>
  406fbe:	6963      	ldr	r3, [r4, #20]
  406fc0:	429f      	cmp	r7, r3
  406fc2:	d25d      	bcs.n	407080 <__sfvwrite_r+0x264>
  406fc4:	45b8      	cmp	r8, r7
  406fc6:	bf28      	it	cs
  406fc8:	46b8      	movcs	r8, r7
  406fca:	4642      	mov	r2, r8
  406fcc:	4649      	mov	r1, r9
  406fce:	f000 f9a7 	bl	407320 <memmove>
  406fd2:	68a3      	ldr	r3, [r4, #8]
  406fd4:	6822      	ldr	r2, [r4, #0]
  406fd6:	eba3 0308 	sub.w	r3, r3, r8
  406fda:	4442      	add	r2, r8
  406fdc:	60a3      	str	r3, [r4, #8]
  406fde:	6022      	str	r2, [r4, #0]
  406fe0:	b10b      	cbz	r3, 406fe6 <__sfvwrite_r+0x1ca>
  406fe2:	46c2      	mov	sl, r8
  406fe4:	e779      	b.n	406eda <__sfvwrite_r+0xbe>
  406fe6:	4621      	mov	r1, r4
  406fe8:	9800      	ldr	r0, [sp, #0]
  406fea:	f7ff fd37 	bl	406a5c <_fflush_r>
  406fee:	2800      	cmp	r0, #0
  406ff0:	d192      	bne.n	406f18 <__sfvwrite_r+0xfc>
  406ff2:	46c2      	mov	sl, r8
  406ff4:	e771      	b.n	406eda <__sfvwrite_r+0xbe>
  406ff6:	465a      	mov	r2, fp
  406ff8:	4629      	mov	r1, r5
  406ffa:	f000 f991 	bl	407320 <memmove>
  406ffe:	68a2      	ldr	r2, [r4, #8]
  407000:	6823      	ldr	r3, [r4, #0]
  407002:	eba2 020b 	sub.w	r2, r2, fp
  407006:	445b      	add	r3, fp
  407008:	60a2      	str	r2, [r4, #8]
  40700a:	6023      	str	r3, [r4, #0]
  40700c:	e7af      	b.n	406f6e <__sfvwrite_r+0x152>
  40700e:	6820      	ldr	r0, [r4, #0]
  407010:	46b8      	mov	r8, r7
  407012:	46ba      	mov	sl, r7
  407014:	46bb      	mov	fp, r7
  407016:	e755      	b.n	406ec4 <__sfvwrite_r+0xa8>
  407018:	6962      	ldr	r2, [r4, #20]
  40701a:	6820      	ldr	r0, [r4, #0]
  40701c:	6921      	ldr	r1, [r4, #16]
  40701e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407022:	eba0 0a01 	sub.w	sl, r0, r1
  407026:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40702a:	f10a 0001 	add.w	r0, sl, #1
  40702e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407032:	4438      	add	r0, r7
  407034:	4540      	cmp	r0, r8
  407036:	4642      	mov	r2, r8
  407038:	bf84      	itt	hi
  40703a:	4680      	movhi	r8, r0
  40703c:	4642      	movhi	r2, r8
  40703e:	055b      	lsls	r3, r3, #21
  407040:	d544      	bpl.n	4070cc <__sfvwrite_r+0x2b0>
  407042:	4611      	mov	r1, r2
  407044:	9800      	ldr	r0, [sp, #0]
  407046:	f7fc fbd3 	bl	4037f0 <_malloc_r>
  40704a:	4683      	mov	fp, r0
  40704c:	2800      	cmp	r0, #0
  40704e:	d055      	beq.n	4070fc <__sfvwrite_r+0x2e0>
  407050:	4652      	mov	r2, sl
  407052:	6921      	ldr	r1, [r4, #16]
  407054:	f7fc fe7c 	bl	403d50 <memcpy>
  407058:	89a3      	ldrh	r3, [r4, #12]
  40705a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407062:	81a3      	strh	r3, [r4, #12]
  407064:	eb0b 000a 	add.w	r0, fp, sl
  407068:	eba8 030a 	sub.w	r3, r8, sl
  40706c:	f8c4 b010 	str.w	fp, [r4, #16]
  407070:	f8c4 8014 	str.w	r8, [r4, #20]
  407074:	6020      	str	r0, [r4, #0]
  407076:	60a3      	str	r3, [r4, #8]
  407078:	46b8      	mov	r8, r7
  40707a:	46ba      	mov	sl, r7
  40707c:	46bb      	mov	fp, r7
  40707e:	e721      	b.n	406ec4 <__sfvwrite_r+0xa8>
  407080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407084:	42b9      	cmp	r1, r7
  407086:	bf28      	it	cs
  407088:	4639      	movcs	r1, r7
  40708a:	464a      	mov	r2, r9
  40708c:	fb91 f1f3 	sdiv	r1, r1, r3
  407090:	9800      	ldr	r0, [sp, #0]
  407092:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407094:	fb03 f301 	mul.w	r3, r3, r1
  407098:	69e1      	ldr	r1, [r4, #28]
  40709a:	47b0      	blx	r6
  40709c:	f1b0 0a00 	subs.w	sl, r0, #0
  4070a0:	f73f af1b 	bgt.w	406eda <__sfvwrite_r+0xbe>
  4070a4:	e738      	b.n	406f18 <__sfvwrite_r+0xfc>
  4070a6:	461a      	mov	r2, r3
  4070a8:	4629      	mov	r1, r5
  4070aa:	9301      	str	r3, [sp, #4]
  4070ac:	f000 f938 	bl	407320 <memmove>
  4070b0:	6822      	ldr	r2, [r4, #0]
  4070b2:	9b01      	ldr	r3, [sp, #4]
  4070b4:	9800      	ldr	r0, [sp, #0]
  4070b6:	441a      	add	r2, r3
  4070b8:	6022      	str	r2, [r4, #0]
  4070ba:	4621      	mov	r1, r4
  4070bc:	f7ff fcce 	bl	406a5c <_fflush_r>
  4070c0:	9b01      	ldr	r3, [sp, #4]
  4070c2:	2800      	cmp	r0, #0
  4070c4:	f47f af28 	bne.w	406f18 <__sfvwrite_r+0xfc>
  4070c8:	461f      	mov	r7, r3
  4070ca:	e750      	b.n	406f6e <__sfvwrite_r+0x152>
  4070cc:	9800      	ldr	r0, [sp, #0]
  4070ce:	f000 fc85 	bl	4079dc <_realloc_r>
  4070d2:	4683      	mov	fp, r0
  4070d4:	2800      	cmp	r0, #0
  4070d6:	d1c5      	bne.n	407064 <__sfvwrite_r+0x248>
  4070d8:	9d00      	ldr	r5, [sp, #0]
  4070da:	6921      	ldr	r1, [r4, #16]
  4070dc:	4628      	mov	r0, r5
  4070de:	f7ff fdb7 	bl	406c50 <_free_r>
  4070e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4070e6:	220c      	movs	r2, #12
  4070e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4070ec:	602a      	str	r2, [r5, #0]
  4070ee:	e715      	b.n	406f1c <__sfvwrite_r+0x100>
  4070f0:	f106 0901 	add.w	r9, r6, #1
  4070f4:	e722      	b.n	406f3c <__sfvwrite_r+0x120>
  4070f6:	f04f 30ff 	mov.w	r0, #4294967295
  4070fa:	e6bf      	b.n	406e7c <__sfvwrite_r+0x60>
  4070fc:	9a00      	ldr	r2, [sp, #0]
  4070fe:	230c      	movs	r3, #12
  407100:	6013      	str	r3, [r2, #0]
  407102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407106:	e709      	b.n	406f1c <__sfvwrite_r+0x100>
  407108:	7ffffc00 	.word	0x7ffffc00

0040710c <_fwalk_reent>:
  40710c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407110:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407114:	d01f      	beq.n	407156 <_fwalk_reent+0x4a>
  407116:	4688      	mov	r8, r1
  407118:	4606      	mov	r6, r0
  40711a:	f04f 0900 	mov.w	r9, #0
  40711e:	687d      	ldr	r5, [r7, #4]
  407120:	68bc      	ldr	r4, [r7, #8]
  407122:	3d01      	subs	r5, #1
  407124:	d411      	bmi.n	40714a <_fwalk_reent+0x3e>
  407126:	89a3      	ldrh	r3, [r4, #12]
  407128:	2b01      	cmp	r3, #1
  40712a:	f105 35ff 	add.w	r5, r5, #4294967295
  40712e:	d908      	bls.n	407142 <_fwalk_reent+0x36>
  407130:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407134:	3301      	adds	r3, #1
  407136:	4621      	mov	r1, r4
  407138:	4630      	mov	r0, r6
  40713a:	d002      	beq.n	407142 <_fwalk_reent+0x36>
  40713c:	47c0      	blx	r8
  40713e:	ea49 0900 	orr.w	r9, r9, r0
  407142:	1c6b      	adds	r3, r5, #1
  407144:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407148:	d1ed      	bne.n	407126 <_fwalk_reent+0x1a>
  40714a:	683f      	ldr	r7, [r7, #0]
  40714c:	2f00      	cmp	r7, #0
  40714e:	d1e6      	bne.n	40711e <_fwalk_reent+0x12>
  407150:	4648      	mov	r0, r9
  407152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407156:	46b9      	mov	r9, r7
  407158:	4648      	mov	r0, r9
  40715a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40715e:	bf00      	nop

00407160 <_localeconv_r>:
  407160:	4a04      	ldr	r2, [pc, #16]	; (407174 <_localeconv_r+0x14>)
  407162:	4b05      	ldr	r3, [pc, #20]	; (407178 <_localeconv_r+0x18>)
  407164:	6812      	ldr	r2, [r2, #0]
  407166:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407168:	2800      	cmp	r0, #0
  40716a:	bf08      	it	eq
  40716c:	4618      	moveq	r0, r3
  40716e:	30f0      	adds	r0, #240	; 0xf0
  407170:	4770      	bx	lr
  407172:	bf00      	nop
  407174:	2040000c 	.word	0x2040000c
  407178:	2040084c 	.word	0x2040084c

0040717c <__retarget_lock_init_recursive>:
  40717c:	4770      	bx	lr
  40717e:	bf00      	nop

00407180 <__retarget_lock_close_recursive>:
  407180:	4770      	bx	lr
  407182:	bf00      	nop

00407184 <__retarget_lock_acquire_recursive>:
  407184:	4770      	bx	lr
  407186:	bf00      	nop

00407188 <__retarget_lock_release_recursive>:
  407188:	4770      	bx	lr
  40718a:	bf00      	nop

0040718c <__swhatbuf_r>:
  40718c:	b570      	push	{r4, r5, r6, lr}
  40718e:	460c      	mov	r4, r1
  407190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407194:	2900      	cmp	r1, #0
  407196:	b090      	sub	sp, #64	; 0x40
  407198:	4615      	mov	r5, r2
  40719a:	461e      	mov	r6, r3
  40719c:	db14      	blt.n	4071c8 <__swhatbuf_r+0x3c>
  40719e:	aa01      	add	r2, sp, #4
  4071a0:	f000 fff0 	bl	408184 <_fstat_r>
  4071a4:	2800      	cmp	r0, #0
  4071a6:	db0f      	blt.n	4071c8 <__swhatbuf_r+0x3c>
  4071a8:	9a02      	ldr	r2, [sp, #8]
  4071aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4071ae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4071b2:	fab2 f282 	clz	r2, r2
  4071b6:	0952      	lsrs	r2, r2, #5
  4071b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4071bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4071c0:	6032      	str	r2, [r6, #0]
  4071c2:	602b      	str	r3, [r5, #0]
  4071c4:	b010      	add	sp, #64	; 0x40
  4071c6:	bd70      	pop	{r4, r5, r6, pc}
  4071c8:	89a2      	ldrh	r2, [r4, #12]
  4071ca:	2300      	movs	r3, #0
  4071cc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4071d0:	6033      	str	r3, [r6, #0]
  4071d2:	d004      	beq.n	4071de <__swhatbuf_r+0x52>
  4071d4:	2240      	movs	r2, #64	; 0x40
  4071d6:	4618      	mov	r0, r3
  4071d8:	602a      	str	r2, [r5, #0]
  4071da:	b010      	add	sp, #64	; 0x40
  4071dc:	bd70      	pop	{r4, r5, r6, pc}
  4071de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4071e2:	602b      	str	r3, [r5, #0]
  4071e4:	b010      	add	sp, #64	; 0x40
  4071e6:	bd70      	pop	{r4, r5, r6, pc}

004071e8 <__smakebuf_r>:
  4071e8:	898a      	ldrh	r2, [r1, #12]
  4071ea:	0792      	lsls	r2, r2, #30
  4071ec:	460b      	mov	r3, r1
  4071ee:	d506      	bpl.n	4071fe <__smakebuf_r+0x16>
  4071f0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4071f4:	2101      	movs	r1, #1
  4071f6:	601a      	str	r2, [r3, #0]
  4071f8:	611a      	str	r2, [r3, #16]
  4071fa:	6159      	str	r1, [r3, #20]
  4071fc:	4770      	bx	lr
  4071fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  407200:	b083      	sub	sp, #12
  407202:	ab01      	add	r3, sp, #4
  407204:	466a      	mov	r2, sp
  407206:	460c      	mov	r4, r1
  407208:	4606      	mov	r6, r0
  40720a:	f7ff ffbf 	bl	40718c <__swhatbuf_r>
  40720e:	9900      	ldr	r1, [sp, #0]
  407210:	4605      	mov	r5, r0
  407212:	4630      	mov	r0, r6
  407214:	f7fc faec 	bl	4037f0 <_malloc_r>
  407218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40721c:	b1d8      	cbz	r0, 407256 <__smakebuf_r+0x6e>
  40721e:	9a01      	ldr	r2, [sp, #4]
  407220:	4f15      	ldr	r7, [pc, #84]	; (407278 <__smakebuf_r+0x90>)
  407222:	9900      	ldr	r1, [sp, #0]
  407224:	63f7      	str	r7, [r6, #60]	; 0x3c
  407226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40722a:	81a3      	strh	r3, [r4, #12]
  40722c:	6020      	str	r0, [r4, #0]
  40722e:	6120      	str	r0, [r4, #16]
  407230:	6161      	str	r1, [r4, #20]
  407232:	b91a      	cbnz	r2, 40723c <__smakebuf_r+0x54>
  407234:	432b      	orrs	r3, r5
  407236:	81a3      	strh	r3, [r4, #12]
  407238:	b003      	add	sp, #12
  40723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40723c:	4630      	mov	r0, r6
  40723e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407242:	f000 ffb3 	bl	4081ac <_isatty_r>
  407246:	b1a0      	cbz	r0, 407272 <__smakebuf_r+0x8a>
  407248:	89a3      	ldrh	r3, [r4, #12]
  40724a:	f023 0303 	bic.w	r3, r3, #3
  40724e:	f043 0301 	orr.w	r3, r3, #1
  407252:	b21b      	sxth	r3, r3
  407254:	e7ee      	b.n	407234 <__smakebuf_r+0x4c>
  407256:	059a      	lsls	r2, r3, #22
  407258:	d4ee      	bmi.n	407238 <__smakebuf_r+0x50>
  40725a:	f023 0303 	bic.w	r3, r3, #3
  40725e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407262:	f043 0302 	orr.w	r3, r3, #2
  407266:	2101      	movs	r1, #1
  407268:	81a3      	strh	r3, [r4, #12]
  40726a:	6022      	str	r2, [r4, #0]
  40726c:	6122      	str	r2, [r4, #16]
  40726e:	6161      	str	r1, [r4, #20]
  407270:	e7e2      	b.n	407238 <__smakebuf_r+0x50>
  407272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407276:	e7dd      	b.n	407234 <__smakebuf_r+0x4c>
  407278:	00406ab1 	.word	0x00406ab1
  40727c:	00000000 	.word	0x00000000

00407280 <memchr>:
  407280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407284:	2a10      	cmp	r2, #16
  407286:	db2b      	blt.n	4072e0 <memchr+0x60>
  407288:	f010 0f07 	tst.w	r0, #7
  40728c:	d008      	beq.n	4072a0 <memchr+0x20>
  40728e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407292:	3a01      	subs	r2, #1
  407294:	428b      	cmp	r3, r1
  407296:	d02d      	beq.n	4072f4 <memchr+0x74>
  407298:	f010 0f07 	tst.w	r0, #7
  40729c:	b342      	cbz	r2, 4072f0 <memchr+0x70>
  40729e:	d1f6      	bne.n	40728e <memchr+0xe>
  4072a0:	b4f0      	push	{r4, r5, r6, r7}
  4072a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4072a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4072aa:	f022 0407 	bic.w	r4, r2, #7
  4072ae:	f07f 0700 	mvns.w	r7, #0
  4072b2:	2300      	movs	r3, #0
  4072b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4072b8:	3c08      	subs	r4, #8
  4072ba:	ea85 0501 	eor.w	r5, r5, r1
  4072be:	ea86 0601 	eor.w	r6, r6, r1
  4072c2:	fa85 f547 	uadd8	r5, r5, r7
  4072c6:	faa3 f587 	sel	r5, r3, r7
  4072ca:	fa86 f647 	uadd8	r6, r6, r7
  4072ce:	faa5 f687 	sel	r6, r5, r7
  4072d2:	b98e      	cbnz	r6, 4072f8 <memchr+0x78>
  4072d4:	d1ee      	bne.n	4072b4 <memchr+0x34>
  4072d6:	bcf0      	pop	{r4, r5, r6, r7}
  4072d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4072dc:	f002 0207 	and.w	r2, r2, #7
  4072e0:	b132      	cbz	r2, 4072f0 <memchr+0x70>
  4072e2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4072e6:	3a01      	subs	r2, #1
  4072e8:	ea83 0301 	eor.w	r3, r3, r1
  4072ec:	b113      	cbz	r3, 4072f4 <memchr+0x74>
  4072ee:	d1f8      	bne.n	4072e2 <memchr+0x62>
  4072f0:	2000      	movs	r0, #0
  4072f2:	4770      	bx	lr
  4072f4:	3801      	subs	r0, #1
  4072f6:	4770      	bx	lr
  4072f8:	2d00      	cmp	r5, #0
  4072fa:	bf06      	itte	eq
  4072fc:	4635      	moveq	r5, r6
  4072fe:	3803      	subeq	r0, #3
  407300:	3807      	subne	r0, #7
  407302:	f015 0f01 	tst.w	r5, #1
  407306:	d107      	bne.n	407318 <memchr+0x98>
  407308:	3001      	adds	r0, #1
  40730a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40730e:	bf02      	ittt	eq
  407310:	3001      	addeq	r0, #1
  407312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407316:	3001      	addeq	r0, #1
  407318:	bcf0      	pop	{r4, r5, r6, r7}
  40731a:	3801      	subs	r0, #1
  40731c:	4770      	bx	lr
  40731e:	bf00      	nop

00407320 <memmove>:
  407320:	4288      	cmp	r0, r1
  407322:	b5f0      	push	{r4, r5, r6, r7, lr}
  407324:	d90d      	bls.n	407342 <memmove+0x22>
  407326:	188b      	adds	r3, r1, r2
  407328:	4298      	cmp	r0, r3
  40732a:	d20a      	bcs.n	407342 <memmove+0x22>
  40732c:	1884      	adds	r4, r0, r2
  40732e:	2a00      	cmp	r2, #0
  407330:	d051      	beq.n	4073d6 <memmove+0xb6>
  407332:	4622      	mov	r2, r4
  407334:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407338:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40733c:	4299      	cmp	r1, r3
  40733e:	d1f9      	bne.n	407334 <memmove+0x14>
  407340:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407342:	2a0f      	cmp	r2, #15
  407344:	d948      	bls.n	4073d8 <memmove+0xb8>
  407346:	ea41 0300 	orr.w	r3, r1, r0
  40734a:	079b      	lsls	r3, r3, #30
  40734c:	d146      	bne.n	4073dc <memmove+0xbc>
  40734e:	f100 0410 	add.w	r4, r0, #16
  407352:	f101 0310 	add.w	r3, r1, #16
  407356:	4615      	mov	r5, r2
  407358:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40735c:	f844 6c10 	str.w	r6, [r4, #-16]
  407360:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407364:	f844 6c0c 	str.w	r6, [r4, #-12]
  407368:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40736c:	f844 6c08 	str.w	r6, [r4, #-8]
  407370:	3d10      	subs	r5, #16
  407372:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407376:	f844 6c04 	str.w	r6, [r4, #-4]
  40737a:	2d0f      	cmp	r5, #15
  40737c:	f103 0310 	add.w	r3, r3, #16
  407380:	f104 0410 	add.w	r4, r4, #16
  407384:	d8e8      	bhi.n	407358 <memmove+0x38>
  407386:	f1a2 0310 	sub.w	r3, r2, #16
  40738a:	f023 030f 	bic.w	r3, r3, #15
  40738e:	f002 0e0f 	and.w	lr, r2, #15
  407392:	3310      	adds	r3, #16
  407394:	f1be 0f03 	cmp.w	lr, #3
  407398:	4419      	add	r1, r3
  40739a:	4403      	add	r3, r0
  40739c:	d921      	bls.n	4073e2 <memmove+0xc2>
  40739e:	1f1e      	subs	r6, r3, #4
  4073a0:	460d      	mov	r5, r1
  4073a2:	4674      	mov	r4, lr
  4073a4:	3c04      	subs	r4, #4
  4073a6:	f855 7b04 	ldr.w	r7, [r5], #4
  4073aa:	f846 7f04 	str.w	r7, [r6, #4]!
  4073ae:	2c03      	cmp	r4, #3
  4073b0:	d8f8      	bhi.n	4073a4 <memmove+0x84>
  4073b2:	f1ae 0404 	sub.w	r4, lr, #4
  4073b6:	f024 0403 	bic.w	r4, r4, #3
  4073ba:	3404      	adds	r4, #4
  4073bc:	4421      	add	r1, r4
  4073be:	4423      	add	r3, r4
  4073c0:	f002 0203 	and.w	r2, r2, #3
  4073c4:	b162      	cbz	r2, 4073e0 <memmove+0xc0>
  4073c6:	3b01      	subs	r3, #1
  4073c8:	440a      	add	r2, r1
  4073ca:	f811 4b01 	ldrb.w	r4, [r1], #1
  4073ce:	f803 4f01 	strb.w	r4, [r3, #1]!
  4073d2:	428a      	cmp	r2, r1
  4073d4:	d1f9      	bne.n	4073ca <memmove+0xaa>
  4073d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073d8:	4603      	mov	r3, r0
  4073da:	e7f3      	b.n	4073c4 <memmove+0xa4>
  4073dc:	4603      	mov	r3, r0
  4073de:	e7f2      	b.n	4073c6 <memmove+0xa6>
  4073e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073e2:	4672      	mov	r2, lr
  4073e4:	e7ee      	b.n	4073c4 <memmove+0xa4>
  4073e6:	bf00      	nop

004073e8 <_Balloc>:
  4073e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4073ea:	b570      	push	{r4, r5, r6, lr}
  4073ec:	4605      	mov	r5, r0
  4073ee:	460c      	mov	r4, r1
  4073f0:	b14b      	cbz	r3, 407406 <_Balloc+0x1e>
  4073f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4073f6:	b180      	cbz	r0, 40741a <_Balloc+0x32>
  4073f8:	6802      	ldr	r2, [r0, #0]
  4073fa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4073fe:	2300      	movs	r3, #0
  407400:	6103      	str	r3, [r0, #16]
  407402:	60c3      	str	r3, [r0, #12]
  407404:	bd70      	pop	{r4, r5, r6, pc}
  407406:	2221      	movs	r2, #33	; 0x21
  407408:	2104      	movs	r1, #4
  40740a:	f000 fd93 	bl	407f34 <_calloc_r>
  40740e:	64e8      	str	r0, [r5, #76]	; 0x4c
  407410:	4603      	mov	r3, r0
  407412:	2800      	cmp	r0, #0
  407414:	d1ed      	bne.n	4073f2 <_Balloc+0xa>
  407416:	2000      	movs	r0, #0
  407418:	bd70      	pop	{r4, r5, r6, pc}
  40741a:	2101      	movs	r1, #1
  40741c:	fa01 f604 	lsl.w	r6, r1, r4
  407420:	1d72      	adds	r2, r6, #5
  407422:	4628      	mov	r0, r5
  407424:	0092      	lsls	r2, r2, #2
  407426:	f000 fd85 	bl	407f34 <_calloc_r>
  40742a:	2800      	cmp	r0, #0
  40742c:	d0f3      	beq.n	407416 <_Balloc+0x2e>
  40742e:	6044      	str	r4, [r0, #4]
  407430:	6086      	str	r6, [r0, #8]
  407432:	e7e4      	b.n	4073fe <_Balloc+0x16>

00407434 <_Bfree>:
  407434:	b131      	cbz	r1, 407444 <_Bfree+0x10>
  407436:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407438:	684a      	ldr	r2, [r1, #4]
  40743a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40743e:	6008      	str	r0, [r1, #0]
  407440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407444:	4770      	bx	lr
  407446:	bf00      	nop

00407448 <__multadd>:
  407448:	b5f0      	push	{r4, r5, r6, r7, lr}
  40744a:	690c      	ldr	r4, [r1, #16]
  40744c:	b083      	sub	sp, #12
  40744e:	460d      	mov	r5, r1
  407450:	4606      	mov	r6, r0
  407452:	f101 0e14 	add.w	lr, r1, #20
  407456:	2700      	movs	r7, #0
  407458:	f8de 0000 	ldr.w	r0, [lr]
  40745c:	b281      	uxth	r1, r0
  40745e:	fb02 3301 	mla	r3, r2, r1, r3
  407462:	0c01      	lsrs	r1, r0, #16
  407464:	0c18      	lsrs	r0, r3, #16
  407466:	fb02 0101 	mla	r1, r2, r1, r0
  40746a:	b29b      	uxth	r3, r3
  40746c:	3701      	adds	r7, #1
  40746e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407472:	42bc      	cmp	r4, r7
  407474:	f84e 3b04 	str.w	r3, [lr], #4
  407478:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40747c:	dcec      	bgt.n	407458 <__multadd+0x10>
  40747e:	b13b      	cbz	r3, 407490 <__multadd+0x48>
  407480:	68aa      	ldr	r2, [r5, #8]
  407482:	4294      	cmp	r4, r2
  407484:	da07      	bge.n	407496 <__multadd+0x4e>
  407486:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40748a:	3401      	adds	r4, #1
  40748c:	6153      	str	r3, [r2, #20]
  40748e:	612c      	str	r4, [r5, #16]
  407490:	4628      	mov	r0, r5
  407492:	b003      	add	sp, #12
  407494:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407496:	6869      	ldr	r1, [r5, #4]
  407498:	9301      	str	r3, [sp, #4]
  40749a:	3101      	adds	r1, #1
  40749c:	4630      	mov	r0, r6
  40749e:	f7ff ffa3 	bl	4073e8 <_Balloc>
  4074a2:	692a      	ldr	r2, [r5, #16]
  4074a4:	3202      	adds	r2, #2
  4074a6:	f105 010c 	add.w	r1, r5, #12
  4074aa:	4607      	mov	r7, r0
  4074ac:	0092      	lsls	r2, r2, #2
  4074ae:	300c      	adds	r0, #12
  4074b0:	f7fc fc4e 	bl	403d50 <memcpy>
  4074b4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4074b6:	6869      	ldr	r1, [r5, #4]
  4074b8:	9b01      	ldr	r3, [sp, #4]
  4074ba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4074be:	6028      	str	r0, [r5, #0]
  4074c0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4074c4:	463d      	mov	r5, r7
  4074c6:	e7de      	b.n	407486 <__multadd+0x3e>

004074c8 <__hi0bits>:
  4074c8:	0c02      	lsrs	r2, r0, #16
  4074ca:	0412      	lsls	r2, r2, #16
  4074cc:	4603      	mov	r3, r0
  4074ce:	b9b2      	cbnz	r2, 4074fe <__hi0bits+0x36>
  4074d0:	0403      	lsls	r3, r0, #16
  4074d2:	2010      	movs	r0, #16
  4074d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4074d8:	bf04      	itt	eq
  4074da:	021b      	lsleq	r3, r3, #8
  4074dc:	3008      	addeq	r0, #8
  4074de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4074e2:	bf04      	itt	eq
  4074e4:	011b      	lsleq	r3, r3, #4
  4074e6:	3004      	addeq	r0, #4
  4074e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4074ec:	bf04      	itt	eq
  4074ee:	009b      	lsleq	r3, r3, #2
  4074f0:	3002      	addeq	r0, #2
  4074f2:	2b00      	cmp	r3, #0
  4074f4:	db02      	blt.n	4074fc <__hi0bits+0x34>
  4074f6:	005b      	lsls	r3, r3, #1
  4074f8:	d403      	bmi.n	407502 <__hi0bits+0x3a>
  4074fa:	2020      	movs	r0, #32
  4074fc:	4770      	bx	lr
  4074fe:	2000      	movs	r0, #0
  407500:	e7e8      	b.n	4074d4 <__hi0bits+0xc>
  407502:	3001      	adds	r0, #1
  407504:	4770      	bx	lr
  407506:	bf00      	nop

00407508 <__lo0bits>:
  407508:	6803      	ldr	r3, [r0, #0]
  40750a:	f013 0207 	ands.w	r2, r3, #7
  40750e:	4601      	mov	r1, r0
  407510:	d007      	beq.n	407522 <__lo0bits+0x1a>
  407512:	07da      	lsls	r2, r3, #31
  407514:	d421      	bmi.n	40755a <__lo0bits+0x52>
  407516:	0798      	lsls	r0, r3, #30
  407518:	d421      	bmi.n	40755e <__lo0bits+0x56>
  40751a:	089b      	lsrs	r3, r3, #2
  40751c:	600b      	str	r3, [r1, #0]
  40751e:	2002      	movs	r0, #2
  407520:	4770      	bx	lr
  407522:	b298      	uxth	r0, r3
  407524:	b198      	cbz	r0, 40754e <__lo0bits+0x46>
  407526:	4610      	mov	r0, r2
  407528:	f013 0fff 	tst.w	r3, #255	; 0xff
  40752c:	bf04      	itt	eq
  40752e:	0a1b      	lsreq	r3, r3, #8
  407530:	3008      	addeq	r0, #8
  407532:	071a      	lsls	r2, r3, #28
  407534:	bf04      	itt	eq
  407536:	091b      	lsreq	r3, r3, #4
  407538:	3004      	addeq	r0, #4
  40753a:	079a      	lsls	r2, r3, #30
  40753c:	bf04      	itt	eq
  40753e:	089b      	lsreq	r3, r3, #2
  407540:	3002      	addeq	r0, #2
  407542:	07da      	lsls	r2, r3, #31
  407544:	d407      	bmi.n	407556 <__lo0bits+0x4e>
  407546:	085b      	lsrs	r3, r3, #1
  407548:	d104      	bne.n	407554 <__lo0bits+0x4c>
  40754a:	2020      	movs	r0, #32
  40754c:	4770      	bx	lr
  40754e:	0c1b      	lsrs	r3, r3, #16
  407550:	2010      	movs	r0, #16
  407552:	e7e9      	b.n	407528 <__lo0bits+0x20>
  407554:	3001      	adds	r0, #1
  407556:	600b      	str	r3, [r1, #0]
  407558:	4770      	bx	lr
  40755a:	2000      	movs	r0, #0
  40755c:	4770      	bx	lr
  40755e:	085b      	lsrs	r3, r3, #1
  407560:	600b      	str	r3, [r1, #0]
  407562:	2001      	movs	r0, #1
  407564:	4770      	bx	lr
  407566:	bf00      	nop

00407568 <__i2b>:
  407568:	b510      	push	{r4, lr}
  40756a:	460c      	mov	r4, r1
  40756c:	2101      	movs	r1, #1
  40756e:	f7ff ff3b 	bl	4073e8 <_Balloc>
  407572:	2201      	movs	r2, #1
  407574:	6144      	str	r4, [r0, #20]
  407576:	6102      	str	r2, [r0, #16]
  407578:	bd10      	pop	{r4, pc}
  40757a:	bf00      	nop

0040757c <__multiply>:
  40757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407580:	690c      	ldr	r4, [r1, #16]
  407582:	6915      	ldr	r5, [r2, #16]
  407584:	42ac      	cmp	r4, r5
  407586:	b083      	sub	sp, #12
  407588:	468b      	mov	fp, r1
  40758a:	4616      	mov	r6, r2
  40758c:	da04      	bge.n	407598 <__multiply+0x1c>
  40758e:	4622      	mov	r2, r4
  407590:	46b3      	mov	fp, r6
  407592:	462c      	mov	r4, r5
  407594:	460e      	mov	r6, r1
  407596:	4615      	mov	r5, r2
  407598:	f8db 3008 	ldr.w	r3, [fp, #8]
  40759c:	f8db 1004 	ldr.w	r1, [fp, #4]
  4075a0:	eb04 0805 	add.w	r8, r4, r5
  4075a4:	4598      	cmp	r8, r3
  4075a6:	bfc8      	it	gt
  4075a8:	3101      	addgt	r1, #1
  4075aa:	f7ff ff1d 	bl	4073e8 <_Balloc>
  4075ae:	f100 0914 	add.w	r9, r0, #20
  4075b2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4075b6:	45d1      	cmp	r9, sl
  4075b8:	9000      	str	r0, [sp, #0]
  4075ba:	d205      	bcs.n	4075c8 <__multiply+0x4c>
  4075bc:	464b      	mov	r3, r9
  4075be:	2100      	movs	r1, #0
  4075c0:	f843 1b04 	str.w	r1, [r3], #4
  4075c4:	459a      	cmp	sl, r3
  4075c6:	d8fb      	bhi.n	4075c0 <__multiply+0x44>
  4075c8:	f106 0c14 	add.w	ip, r6, #20
  4075cc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4075d0:	f10b 0b14 	add.w	fp, fp, #20
  4075d4:	459c      	cmp	ip, r3
  4075d6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4075da:	d24c      	bcs.n	407676 <__multiply+0xfa>
  4075dc:	f8cd a004 	str.w	sl, [sp, #4]
  4075e0:	469a      	mov	sl, r3
  4075e2:	f8dc 5000 	ldr.w	r5, [ip]
  4075e6:	b2af      	uxth	r7, r5
  4075e8:	b1ef      	cbz	r7, 407626 <__multiply+0xaa>
  4075ea:	2100      	movs	r1, #0
  4075ec:	464d      	mov	r5, r9
  4075ee:	465e      	mov	r6, fp
  4075f0:	460c      	mov	r4, r1
  4075f2:	f856 2b04 	ldr.w	r2, [r6], #4
  4075f6:	6828      	ldr	r0, [r5, #0]
  4075f8:	b293      	uxth	r3, r2
  4075fa:	b281      	uxth	r1, r0
  4075fc:	fb07 1303 	mla	r3, r7, r3, r1
  407600:	0c12      	lsrs	r2, r2, #16
  407602:	0c01      	lsrs	r1, r0, #16
  407604:	4423      	add	r3, r4
  407606:	fb07 1102 	mla	r1, r7, r2, r1
  40760a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40760e:	b29b      	uxth	r3, r3
  407610:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407614:	45b6      	cmp	lr, r6
  407616:	f845 3b04 	str.w	r3, [r5], #4
  40761a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40761e:	d8e8      	bhi.n	4075f2 <__multiply+0x76>
  407620:	602c      	str	r4, [r5, #0]
  407622:	f8dc 5000 	ldr.w	r5, [ip]
  407626:	0c2d      	lsrs	r5, r5, #16
  407628:	d01d      	beq.n	407666 <__multiply+0xea>
  40762a:	f8d9 3000 	ldr.w	r3, [r9]
  40762e:	4648      	mov	r0, r9
  407630:	461c      	mov	r4, r3
  407632:	4659      	mov	r1, fp
  407634:	2200      	movs	r2, #0
  407636:	880e      	ldrh	r6, [r1, #0]
  407638:	0c24      	lsrs	r4, r4, #16
  40763a:	fb05 4406 	mla	r4, r5, r6, r4
  40763e:	4422      	add	r2, r4
  407640:	b29b      	uxth	r3, r3
  407642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407646:	f840 3b04 	str.w	r3, [r0], #4
  40764a:	f851 3b04 	ldr.w	r3, [r1], #4
  40764e:	6804      	ldr	r4, [r0, #0]
  407650:	0c1b      	lsrs	r3, r3, #16
  407652:	b2a6      	uxth	r6, r4
  407654:	fb05 6303 	mla	r3, r5, r3, r6
  407658:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40765c:	458e      	cmp	lr, r1
  40765e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407662:	d8e8      	bhi.n	407636 <__multiply+0xba>
  407664:	6003      	str	r3, [r0, #0]
  407666:	f10c 0c04 	add.w	ip, ip, #4
  40766a:	45e2      	cmp	sl, ip
  40766c:	f109 0904 	add.w	r9, r9, #4
  407670:	d8b7      	bhi.n	4075e2 <__multiply+0x66>
  407672:	f8dd a004 	ldr.w	sl, [sp, #4]
  407676:	f1b8 0f00 	cmp.w	r8, #0
  40767a:	dd0b      	ble.n	407694 <__multiply+0x118>
  40767c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407680:	f1aa 0a04 	sub.w	sl, sl, #4
  407684:	b11b      	cbz	r3, 40768e <__multiply+0x112>
  407686:	e005      	b.n	407694 <__multiply+0x118>
  407688:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40768c:	b913      	cbnz	r3, 407694 <__multiply+0x118>
  40768e:	f1b8 0801 	subs.w	r8, r8, #1
  407692:	d1f9      	bne.n	407688 <__multiply+0x10c>
  407694:	9800      	ldr	r0, [sp, #0]
  407696:	f8c0 8010 	str.w	r8, [r0, #16]
  40769a:	b003      	add	sp, #12
  40769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004076a0 <__pow5mult>:
  4076a0:	f012 0303 	ands.w	r3, r2, #3
  4076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4076a8:	4614      	mov	r4, r2
  4076aa:	4607      	mov	r7, r0
  4076ac:	d12e      	bne.n	40770c <__pow5mult+0x6c>
  4076ae:	460d      	mov	r5, r1
  4076b0:	10a4      	asrs	r4, r4, #2
  4076b2:	d01c      	beq.n	4076ee <__pow5mult+0x4e>
  4076b4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4076b6:	b396      	cbz	r6, 40771e <__pow5mult+0x7e>
  4076b8:	07e3      	lsls	r3, r4, #31
  4076ba:	f04f 0800 	mov.w	r8, #0
  4076be:	d406      	bmi.n	4076ce <__pow5mult+0x2e>
  4076c0:	1064      	asrs	r4, r4, #1
  4076c2:	d014      	beq.n	4076ee <__pow5mult+0x4e>
  4076c4:	6830      	ldr	r0, [r6, #0]
  4076c6:	b1a8      	cbz	r0, 4076f4 <__pow5mult+0x54>
  4076c8:	4606      	mov	r6, r0
  4076ca:	07e3      	lsls	r3, r4, #31
  4076cc:	d5f8      	bpl.n	4076c0 <__pow5mult+0x20>
  4076ce:	4632      	mov	r2, r6
  4076d0:	4629      	mov	r1, r5
  4076d2:	4638      	mov	r0, r7
  4076d4:	f7ff ff52 	bl	40757c <__multiply>
  4076d8:	b1b5      	cbz	r5, 407708 <__pow5mult+0x68>
  4076da:	686a      	ldr	r2, [r5, #4]
  4076dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4076de:	1064      	asrs	r4, r4, #1
  4076e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4076e4:	6029      	str	r1, [r5, #0]
  4076e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4076ea:	4605      	mov	r5, r0
  4076ec:	d1ea      	bne.n	4076c4 <__pow5mult+0x24>
  4076ee:	4628      	mov	r0, r5
  4076f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4076f4:	4632      	mov	r2, r6
  4076f6:	4631      	mov	r1, r6
  4076f8:	4638      	mov	r0, r7
  4076fa:	f7ff ff3f 	bl	40757c <__multiply>
  4076fe:	6030      	str	r0, [r6, #0]
  407700:	f8c0 8000 	str.w	r8, [r0]
  407704:	4606      	mov	r6, r0
  407706:	e7e0      	b.n	4076ca <__pow5mult+0x2a>
  407708:	4605      	mov	r5, r0
  40770a:	e7d9      	b.n	4076c0 <__pow5mult+0x20>
  40770c:	1e5a      	subs	r2, r3, #1
  40770e:	4d0b      	ldr	r5, [pc, #44]	; (40773c <__pow5mult+0x9c>)
  407710:	2300      	movs	r3, #0
  407712:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407716:	f7ff fe97 	bl	407448 <__multadd>
  40771a:	4605      	mov	r5, r0
  40771c:	e7c8      	b.n	4076b0 <__pow5mult+0x10>
  40771e:	2101      	movs	r1, #1
  407720:	4638      	mov	r0, r7
  407722:	f7ff fe61 	bl	4073e8 <_Balloc>
  407726:	f240 2171 	movw	r1, #625	; 0x271
  40772a:	2201      	movs	r2, #1
  40772c:	2300      	movs	r3, #0
  40772e:	6141      	str	r1, [r0, #20]
  407730:	6102      	str	r2, [r0, #16]
  407732:	4606      	mov	r6, r0
  407734:	64b8      	str	r0, [r7, #72]	; 0x48
  407736:	6003      	str	r3, [r0, #0]
  407738:	e7be      	b.n	4076b8 <__pow5mult+0x18>
  40773a:	bf00      	nop
  40773c:	00408a58 	.word	0x00408a58

00407740 <__lshift>:
  407740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407744:	4691      	mov	r9, r2
  407746:	690a      	ldr	r2, [r1, #16]
  407748:	688b      	ldr	r3, [r1, #8]
  40774a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40774e:	eb04 0802 	add.w	r8, r4, r2
  407752:	f108 0501 	add.w	r5, r8, #1
  407756:	429d      	cmp	r5, r3
  407758:	460e      	mov	r6, r1
  40775a:	4607      	mov	r7, r0
  40775c:	6849      	ldr	r1, [r1, #4]
  40775e:	dd04      	ble.n	40776a <__lshift+0x2a>
  407760:	005b      	lsls	r3, r3, #1
  407762:	429d      	cmp	r5, r3
  407764:	f101 0101 	add.w	r1, r1, #1
  407768:	dcfa      	bgt.n	407760 <__lshift+0x20>
  40776a:	4638      	mov	r0, r7
  40776c:	f7ff fe3c 	bl	4073e8 <_Balloc>
  407770:	2c00      	cmp	r4, #0
  407772:	f100 0314 	add.w	r3, r0, #20
  407776:	dd06      	ble.n	407786 <__lshift+0x46>
  407778:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40777c:	2100      	movs	r1, #0
  40777e:	f843 1b04 	str.w	r1, [r3], #4
  407782:	429a      	cmp	r2, r3
  407784:	d1fb      	bne.n	40777e <__lshift+0x3e>
  407786:	6934      	ldr	r4, [r6, #16]
  407788:	f106 0114 	add.w	r1, r6, #20
  40778c:	f019 091f 	ands.w	r9, r9, #31
  407790:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407794:	d01d      	beq.n	4077d2 <__lshift+0x92>
  407796:	f1c9 0c20 	rsb	ip, r9, #32
  40779a:	2200      	movs	r2, #0
  40779c:	680c      	ldr	r4, [r1, #0]
  40779e:	fa04 f409 	lsl.w	r4, r4, r9
  4077a2:	4314      	orrs	r4, r2
  4077a4:	f843 4b04 	str.w	r4, [r3], #4
  4077a8:	f851 2b04 	ldr.w	r2, [r1], #4
  4077ac:	458e      	cmp	lr, r1
  4077ae:	fa22 f20c 	lsr.w	r2, r2, ip
  4077b2:	d8f3      	bhi.n	40779c <__lshift+0x5c>
  4077b4:	601a      	str	r2, [r3, #0]
  4077b6:	b10a      	cbz	r2, 4077bc <__lshift+0x7c>
  4077b8:	f108 0502 	add.w	r5, r8, #2
  4077bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4077be:	6872      	ldr	r2, [r6, #4]
  4077c0:	3d01      	subs	r5, #1
  4077c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4077c6:	6105      	str	r5, [r0, #16]
  4077c8:	6031      	str	r1, [r6, #0]
  4077ca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4077ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4077d2:	3b04      	subs	r3, #4
  4077d4:	f851 2b04 	ldr.w	r2, [r1], #4
  4077d8:	f843 2f04 	str.w	r2, [r3, #4]!
  4077dc:	458e      	cmp	lr, r1
  4077de:	d8f9      	bhi.n	4077d4 <__lshift+0x94>
  4077e0:	e7ec      	b.n	4077bc <__lshift+0x7c>
  4077e2:	bf00      	nop

004077e4 <__mcmp>:
  4077e4:	b430      	push	{r4, r5}
  4077e6:	690b      	ldr	r3, [r1, #16]
  4077e8:	4605      	mov	r5, r0
  4077ea:	6900      	ldr	r0, [r0, #16]
  4077ec:	1ac0      	subs	r0, r0, r3
  4077ee:	d10f      	bne.n	407810 <__mcmp+0x2c>
  4077f0:	009b      	lsls	r3, r3, #2
  4077f2:	3514      	adds	r5, #20
  4077f4:	3114      	adds	r1, #20
  4077f6:	4419      	add	r1, r3
  4077f8:	442b      	add	r3, r5
  4077fa:	e001      	b.n	407800 <__mcmp+0x1c>
  4077fc:	429d      	cmp	r5, r3
  4077fe:	d207      	bcs.n	407810 <__mcmp+0x2c>
  407800:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407804:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407808:	4294      	cmp	r4, r2
  40780a:	d0f7      	beq.n	4077fc <__mcmp+0x18>
  40780c:	d302      	bcc.n	407814 <__mcmp+0x30>
  40780e:	2001      	movs	r0, #1
  407810:	bc30      	pop	{r4, r5}
  407812:	4770      	bx	lr
  407814:	f04f 30ff 	mov.w	r0, #4294967295
  407818:	e7fa      	b.n	407810 <__mcmp+0x2c>
  40781a:	bf00      	nop

0040781c <__mdiff>:
  40781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407820:	690f      	ldr	r7, [r1, #16]
  407822:	460e      	mov	r6, r1
  407824:	6911      	ldr	r1, [r2, #16]
  407826:	1a7f      	subs	r7, r7, r1
  407828:	2f00      	cmp	r7, #0
  40782a:	4690      	mov	r8, r2
  40782c:	d117      	bne.n	40785e <__mdiff+0x42>
  40782e:	0089      	lsls	r1, r1, #2
  407830:	f106 0514 	add.w	r5, r6, #20
  407834:	f102 0e14 	add.w	lr, r2, #20
  407838:	186b      	adds	r3, r5, r1
  40783a:	4471      	add	r1, lr
  40783c:	e001      	b.n	407842 <__mdiff+0x26>
  40783e:	429d      	cmp	r5, r3
  407840:	d25c      	bcs.n	4078fc <__mdiff+0xe0>
  407842:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407846:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40784a:	42a2      	cmp	r2, r4
  40784c:	d0f7      	beq.n	40783e <__mdiff+0x22>
  40784e:	d25e      	bcs.n	40790e <__mdiff+0xf2>
  407850:	4633      	mov	r3, r6
  407852:	462c      	mov	r4, r5
  407854:	4646      	mov	r6, r8
  407856:	4675      	mov	r5, lr
  407858:	4698      	mov	r8, r3
  40785a:	2701      	movs	r7, #1
  40785c:	e005      	b.n	40786a <__mdiff+0x4e>
  40785e:	db58      	blt.n	407912 <__mdiff+0xf6>
  407860:	f106 0514 	add.w	r5, r6, #20
  407864:	f108 0414 	add.w	r4, r8, #20
  407868:	2700      	movs	r7, #0
  40786a:	6871      	ldr	r1, [r6, #4]
  40786c:	f7ff fdbc 	bl	4073e8 <_Balloc>
  407870:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407874:	6936      	ldr	r6, [r6, #16]
  407876:	60c7      	str	r7, [r0, #12]
  407878:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40787c:	46a6      	mov	lr, r4
  40787e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407882:	f100 0414 	add.w	r4, r0, #20
  407886:	2300      	movs	r3, #0
  407888:	f85e 1b04 	ldr.w	r1, [lr], #4
  40788c:	f855 8b04 	ldr.w	r8, [r5], #4
  407890:	b28a      	uxth	r2, r1
  407892:	fa13 f388 	uxtah	r3, r3, r8
  407896:	0c09      	lsrs	r1, r1, #16
  407898:	1a9a      	subs	r2, r3, r2
  40789a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40789e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4078a2:	b292      	uxth	r2, r2
  4078a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4078a8:	45f4      	cmp	ip, lr
  4078aa:	f844 2b04 	str.w	r2, [r4], #4
  4078ae:	ea4f 4323 	mov.w	r3, r3, asr #16
  4078b2:	d8e9      	bhi.n	407888 <__mdiff+0x6c>
  4078b4:	42af      	cmp	r7, r5
  4078b6:	d917      	bls.n	4078e8 <__mdiff+0xcc>
  4078b8:	46a4      	mov	ip, r4
  4078ba:	46ae      	mov	lr, r5
  4078bc:	f85e 2b04 	ldr.w	r2, [lr], #4
  4078c0:	fa13 f382 	uxtah	r3, r3, r2
  4078c4:	1419      	asrs	r1, r3, #16
  4078c6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4078ca:	b29b      	uxth	r3, r3
  4078cc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4078d0:	4577      	cmp	r7, lr
  4078d2:	f84c 2b04 	str.w	r2, [ip], #4
  4078d6:	ea4f 4321 	mov.w	r3, r1, asr #16
  4078da:	d8ef      	bhi.n	4078bc <__mdiff+0xa0>
  4078dc:	43ed      	mvns	r5, r5
  4078de:	442f      	add	r7, r5
  4078e0:	f027 0703 	bic.w	r7, r7, #3
  4078e4:	3704      	adds	r7, #4
  4078e6:	443c      	add	r4, r7
  4078e8:	3c04      	subs	r4, #4
  4078ea:	b922      	cbnz	r2, 4078f6 <__mdiff+0xda>
  4078ec:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4078f0:	3e01      	subs	r6, #1
  4078f2:	2b00      	cmp	r3, #0
  4078f4:	d0fa      	beq.n	4078ec <__mdiff+0xd0>
  4078f6:	6106      	str	r6, [r0, #16]
  4078f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4078fc:	2100      	movs	r1, #0
  4078fe:	f7ff fd73 	bl	4073e8 <_Balloc>
  407902:	2201      	movs	r2, #1
  407904:	2300      	movs	r3, #0
  407906:	6102      	str	r2, [r0, #16]
  407908:	6143      	str	r3, [r0, #20]
  40790a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40790e:	4674      	mov	r4, lr
  407910:	e7ab      	b.n	40786a <__mdiff+0x4e>
  407912:	4633      	mov	r3, r6
  407914:	f106 0414 	add.w	r4, r6, #20
  407918:	f102 0514 	add.w	r5, r2, #20
  40791c:	4616      	mov	r6, r2
  40791e:	2701      	movs	r7, #1
  407920:	4698      	mov	r8, r3
  407922:	e7a2      	b.n	40786a <__mdiff+0x4e>

00407924 <__d2b>:
  407924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407928:	b082      	sub	sp, #8
  40792a:	2101      	movs	r1, #1
  40792c:	461c      	mov	r4, r3
  40792e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407932:	4615      	mov	r5, r2
  407934:	9e08      	ldr	r6, [sp, #32]
  407936:	f7ff fd57 	bl	4073e8 <_Balloc>
  40793a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40793e:	4680      	mov	r8, r0
  407940:	b10f      	cbz	r7, 407946 <__d2b+0x22>
  407942:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407946:	9401      	str	r4, [sp, #4]
  407948:	b31d      	cbz	r5, 407992 <__d2b+0x6e>
  40794a:	a802      	add	r0, sp, #8
  40794c:	f840 5d08 	str.w	r5, [r0, #-8]!
  407950:	f7ff fdda 	bl	407508 <__lo0bits>
  407954:	2800      	cmp	r0, #0
  407956:	d134      	bne.n	4079c2 <__d2b+0x9e>
  407958:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40795c:	f8c8 2014 	str.w	r2, [r8, #20]
  407960:	2b00      	cmp	r3, #0
  407962:	bf0c      	ite	eq
  407964:	2101      	moveq	r1, #1
  407966:	2102      	movne	r1, #2
  407968:	f8c8 3018 	str.w	r3, [r8, #24]
  40796c:	f8c8 1010 	str.w	r1, [r8, #16]
  407970:	b9df      	cbnz	r7, 4079aa <__d2b+0x86>
  407972:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407976:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40797a:	6030      	str	r0, [r6, #0]
  40797c:	6918      	ldr	r0, [r3, #16]
  40797e:	f7ff fda3 	bl	4074c8 <__hi0bits>
  407982:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407984:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407988:	6018      	str	r0, [r3, #0]
  40798a:	4640      	mov	r0, r8
  40798c:	b002      	add	sp, #8
  40798e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407992:	a801      	add	r0, sp, #4
  407994:	f7ff fdb8 	bl	407508 <__lo0bits>
  407998:	9b01      	ldr	r3, [sp, #4]
  40799a:	f8c8 3014 	str.w	r3, [r8, #20]
  40799e:	2101      	movs	r1, #1
  4079a0:	3020      	adds	r0, #32
  4079a2:	f8c8 1010 	str.w	r1, [r8, #16]
  4079a6:	2f00      	cmp	r7, #0
  4079a8:	d0e3      	beq.n	407972 <__d2b+0x4e>
  4079aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4079ac:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4079b0:	4407      	add	r7, r0
  4079b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4079b6:	6037      	str	r7, [r6, #0]
  4079b8:	6018      	str	r0, [r3, #0]
  4079ba:	4640      	mov	r0, r8
  4079bc:	b002      	add	sp, #8
  4079be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079c2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4079c6:	f1c0 0220 	rsb	r2, r0, #32
  4079ca:	fa03 f202 	lsl.w	r2, r3, r2
  4079ce:	430a      	orrs	r2, r1
  4079d0:	40c3      	lsrs	r3, r0
  4079d2:	9301      	str	r3, [sp, #4]
  4079d4:	f8c8 2014 	str.w	r2, [r8, #20]
  4079d8:	e7c2      	b.n	407960 <__d2b+0x3c>
  4079da:	bf00      	nop

004079dc <_realloc_r>:
  4079dc:	2900      	cmp	r1, #0
  4079de:	f000 8095 	beq.w	407b0c <_realloc_r+0x130>
  4079e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4079e6:	460d      	mov	r5, r1
  4079e8:	4616      	mov	r6, r2
  4079ea:	b083      	sub	sp, #12
  4079ec:	4680      	mov	r8, r0
  4079ee:	f106 070b 	add.w	r7, r6, #11
  4079f2:	f7fc fa95 	bl	403f20 <__malloc_lock>
  4079f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4079fa:	2f16      	cmp	r7, #22
  4079fc:	f02e 0403 	bic.w	r4, lr, #3
  407a00:	f1a5 0908 	sub.w	r9, r5, #8
  407a04:	d83c      	bhi.n	407a80 <_realloc_r+0xa4>
  407a06:	2210      	movs	r2, #16
  407a08:	4617      	mov	r7, r2
  407a0a:	42be      	cmp	r6, r7
  407a0c:	d83d      	bhi.n	407a8a <_realloc_r+0xae>
  407a0e:	4294      	cmp	r4, r2
  407a10:	da43      	bge.n	407a9a <_realloc_r+0xbe>
  407a12:	4bc4      	ldr	r3, [pc, #784]	; (407d24 <_realloc_r+0x348>)
  407a14:	6899      	ldr	r1, [r3, #8]
  407a16:	eb09 0004 	add.w	r0, r9, r4
  407a1a:	4288      	cmp	r0, r1
  407a1c:	f000 80b4 	beq.w	407b88 <_realloc_r+0x1ac>
  407a20:	6843      	ldr	r3, [r0, #4]
  407a22:	f023 0101 	bic.w	r1, r3, #1
  407a26:	4401      	add	r1, r0
  407a28:	6849      	ldr	r1, [r1, #4]
  407a2a:	07c9      	lsls	r1, r1, #31
  407a2c:	d54c      	bpl.n	407ac8 <_realloc_r+0xec>
  407a2e:	f01e 0f01 	tst.w	lr, #1
  407a32:	f000 809b 	beq.w	407b6c <_realloc_r+0x190>
  407a36:	4631      	mov	r1, r6
  407a38:	4640      	mov	r0, r8
  407a3a:	f7fb fed9 	bl	4037f0 <_malloc_r>
  407a3e:	4606      	mov	r6, r0
  407a40:	2800      	cmp	r0, #0
  407a42:	d03a      	beq.n	407aba <_realloc_r+0xde>
  407a44:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407a48:	f023 0301 	bic.w	r3, r3, #1
  407a4c:	444b      	add	r3, r9
  407a4e:	f1a0 0208 	sub.w	r2, r0, #8
  407a52:	429a      	cmp	r2, r3
  407a54:	f000 8121 	beq.w	407c9a <_realloc_r+0x2be>
  407a58:	1f22      	subs	r2, r4, #4
  407a5a:	2a24      	cmp	r2, #36	; 0x24
  407a5c:	f200 8107 	bhi.w	407c6e <_realloc_r+0x292>
  407a60:	2a13      	cmp	r2, #19
  407a62:	f200 80db 	bhi.w	407c1c <_realloc_r+0x240>
  407a66:	4603      	mov	r3, r0
  407a68:	462a      	mov	r2, r5
  407a6a:	6811      	ldr	r1, [r2, #0]
  407a6c:	6019      	str	r1, [r3, #0]
  407a6e:	6851      	ldr	r1, [r2, #4]
  407a70:	6059      	str	r1, [r3, #4]
  407a72:	6892      	ldr	r2, [r2, #8]
  407a74:	609a      	str	r2, [r3, #8]
  407a76:	4629      	mov	r1, r5
  407a78:	4640      	mov	r0, r8
  407a7a:	f7ff f8e9 	bl	406c50 <_free_r>
  407a7e:	e01c      	b.n	407aba <_realloc_r+0xde>
  407a80:	f027 0707 	bic.w	r7, r7, #7
  407a84:	2f00      	cmp	r7, #0
  407a86:	463a      	mov	r2, r7
  407a88:	dabf      	bge.n	407a0a <_realloc_r+0x2e>
  407a8a:	2600      	movs	r6, #0
  407a8c:	230c      	movs	r3, #12
  407a8e:	4630      	mov	r0, r6
  407a90:	f8c8 3000 	str.w	r3, [r8]
  407a94:	b003      	add	sp, #12
  407a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a9a:	462e      	mov	r6, r5
  407a9c:	1be3      	subs	r3, r4, r7
  407a9e:	2b0f      	cmp	r3, #15
  407aa0:	d81e      	bhi.n	407ae0 <_realloc_r+0x104>
  407aa2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407aa6:	f003 0301 	and.w	r3, r3, #1
  407aaa:	4323      	orrs	r3, r4
  407aac:	444c      	add	r4, r9
  407aae:	f8c9 3004 	str.w	r3, [r9, #4]
  407ab2:	6863      	ldr	r3, [r4, #4]
  407ab4:	f043 0301 	orr.w	r3, r3, #1
  407ab8:	6063      	str	r3, [r4, #4]
  407aba:	4640      	mov	r0, r8
  407abc:	f7fc fa36 	bl	403f2c <__malloc_unlock>
  407ac0:	4630      	mov	r0, r6
  407ac2:	b003      	add	sp, #12
  407ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ac8:	f023 0303 	bic.w	r3, r3, #3
  407acc:	18e1      	adds	r1, r4, r3
  407ace:	4291      	cmp	r1, r2
  407ad0:	db1f      	blt.n	407b12 <_realloc_r+0x136>
  407ad2:	68c3      	ldr	r3, [r0, #12]
  407ad4:	6882      	ldr	r2, [r0, #8]
  407ad6:	462e      	mov	r6, r5
  407ad8:	60d3      	str	r3, [r2, #12]
  407ada:	460c      	mov	r4, r1
  407adc:	609a      	str	r2, [r3, #8]
  407ade:	e7dd      	b.n	407a9c <_realloc_r+0xc0>
  407ae0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407ae4:	eb09 0107 	add.w	r1, r9, r7
  407ae8:	f002 0201 	and.w	r2, r2, #1
  407aec:	444c      	add	r4, r9
  407aee:	f043 0301 	orr.w	r3, r3, #1
  407af2:	4317      	orrs	r7, r2
  407af4:	f8c9 7004 	str.w	r7, [r9, #4]
  407af8:	604b      	str	r3, [r1, #4]
  407afa:	6863      	ldr	r3, [r4, #4]
  407afc:	f043 0301 	orr.w	r3, r3, #1
  407b00:	3108      	adds	r1, #8
  407b02:	6063      	str	r3, [r4, #4]
  407b04:	4640      	mov	r0, r8
  407b06:	f7ff f8a3 	bl	406c50 <_free_r>
  407b0a:	e7d6      	b.n	407aba <_realloc_r+0xde>
  407b0c:	4611      	mov	r1, r2
  407b0e:	f7fb be6f 	b.w	4037f0 <_malloc_r>
  407b12:	f01e 0f01 	tst.w	lr, #1
  407b16:	d18e      	bne.n	407a36 <_realloc_r+0x5a>
  407b18:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407b1c:	eba9 0a01 	sub.w	sl, r9, r1
  407b20:	f8da 1004 	ldr.w	r1, [sl, #4]
  407b24:	f021 0103 	bic.w	r1, r1, #3
  407b28:	440b      	add	r3, r1
  407b2a:	4423      	add	r3, r4
  407b2c:	4293      	cmp	r3, r2
  407b2e:	db25      	blt.n	407b7c <_realloc_r+0x1a0>
  407b30:	68c2      	ldr	r2, [r0, #12]
  407b32:	6881      	ldr	r1, [r0, #8]
  407b34:	4656      	mov	r6, sl
  407b36:	60ca      	str	r2, [r1, #12]
  407b38:	6091      	str	r1, [r2, #8]
  407b3a:	f8da 100c 	ldr.w	r1, [sl, #12]
  407b3e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407b42:	1f22      	subs	r2, r4, #4
  407b44:	2a24      	cmp	r2, #36	; 0x24
  407b46:	60c1      	str	r1, [r0, #12]
  407b48:	6088      	str	r0, [r1, #8]
  407b4a:	f200 8094 	bhi.w	407c76 <_realloc_r+0x29a>
  407b4e:	2a13      	cmp	r2, #19
  407b50:	d96f      	bls.n	407c32 <_realloc_r+0x256>
  407b52:	6829      	ldr	r1, [r5, #0]
  407b54:	f8ca 1008 	str.w	r1, [sl, #8]
  407b58:	6869      	ldr	r1, [r5, #4]
  407b5a:	f8ca 100c 	str.w	r1, [sl, #12]
  407b5e:	2a1b      	cmp	r2, #27
  407b60:	f200 80a2 	bhi.w	407ca8 <_realloc_r+0x2cc>
  407b64:	3508      	adds	r5, #8
  407b66:	f10a 0210 	add.w	r2, sl, #16
  407b6a:	e063      	b.n	407c34 <_realloc_r+0x258>
  407b6c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407b70:	eba9 0a03 	sub.w	sl, r9, r3
  407b74:	f8da 1004 	ldr.w	r1, [sl, #4]
  407b78:	f021 0103 	bic.w	r1, r1, #3
  407b7c:	1863      	adds	r3, r4, r1
  407b7e:	4293      	cmp	r3, r2
  407b80:	f6ff af59 	blt.w	407a36 <_realloc_r+0x5a>
  407b84:	4656      	mov	r6, sl
  407b86:	e7d8      	b.n	407b3a <_realloc_r+0x15e>
  407b88:	6841      	ldr	r1, [r0, #4]
  407b8a:	f021 0b03 	bic.w	fp, r1, #3
  407b8e:	44a3      	add	fp, r4
  407b90:	f107 0010 	add.w	r0, r7, #16
  407b94:	4583      	cmp	fp, r0
  407b96:	da56      	bge.n	407c46 <_realloc_r+0x26a>
  407b98:	f01e 0f01 	tst.w	lr, #1
  407b9c:	f47f af4b 	bne.w	407a36 <_realloc_r+0x5a>
  407ba0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407ba4:	eba9 0a01 	sub.w	sl, r9, r1
  407ba8:	f8da 1004 	ldr.w	r1, [sl, #4]
  407bac:	f021 0103 	bic.w	r1, r1, #3
  407bb0:	448b      	add	fp, r1
  407bb2:	4558      	cmp	r0, fp
  407bb4:	dce2      	bgt.n	407b7c <_realloc_r+0x1a0>
  407bb6:	4656      	mov	r6, sl
  407bb8:	f8da 100c 	ldr.w	r1, [sl, #12]
  407bbc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407bc0:	1f22      	subs	r2, r4, #4
  407bc2:	2a24      	cmp	r2, #36	; 0x24
  407bc4:	60c1      	str	r1, [r0, #12]
  407bc6:	6088      	str	r0, [r1, #8]
  407bc8:	f200 808f 	bhi.w	407cea <_realloc_r+0x30e>
  407bcc:	2a13      	cmp	r2, #19
  407bce:	f240 808a 	bls.w	407ce6 <_realloc_r+0x30a>
  407bd2:	6829      	ldr	r1, [r5, #0]
  407bd4:	f8ca 1008 	str.w	r1, [sl, #8]
  407bd8:	6869      	ldr	r1, [r5, #4]
  407bda:	f8ca 100c 	str.w	r1, [sl, #12]
  407bde:	2a1b      	cmp	r2, #27
  407be0:	f200 808a 	bhi.w	407cf8 <_realloc_r+0x31c>
  407be4:	3508      	adds	r5, #8
  407be6:	f10a 0210 	add.w	r2, sl, #16
  407bea:	6829      	ldr	r1, [r5, #0]
  407bec:	6011      	str	r1, [r2, #0]
  407bee:	6869      	ldr	r1, [r5, #4]
  407bf0:	6051      	str	r1, [r2, #4]
  407bf2:	68a9      	ldr	r1, [r5, #8]
  407bf4:	6091      	str	r1, [r2, #8]
  407bf6:	eb0a 0107 	add.w	r1, sl, r7
  407bfa:	ebab 0207 	sub.w	r2, fp, r7
  407bfe:	f042 0201 	orr.w	r2, r2, #1
  407c02:	6099      	str	r1, [r3, #8]
  407c04:	604a      	str	r2, [r1, #4]
  407c06:	f8da 3004 	ldr.w	r3, [sl, #4]
  407c0a:	f003 0301 	and.w	r3, r3, #1
  407c0e:	431f      	orrs	r7, r3
  407c10:	4640      	mov	r0, r8
  407c12:	f8ca 7004 	str.w	r7, [sl, #4]
  407c16:	f7fc f989 	bl	403f2c <__malloc_unlock>
  407c1a:	e751      	b.n	407ac0 <_realloc_r+0xe4>
  407c1c:	682b      	ldr	r3, [r5, #0]
  407c1e:	6003      	str	r3, [r0, #0]
  407c20:	686b      	ldr	r3, [r5, #4]
  407c22:	6043      	str	r3, [r0, #4]
  407c24:	2a1b      	cmp	r2, #27
  407c26:	d82d      	bhi.n	407c84 <_realloc_r+0x2a8>
  407c28:	f100 0308 	add.w	r3, r0, #8
  407c2c:	f105 0208 	add.w	r2, r5, #8
  407c30:	e71b      	b.n	407a6a <_realloc_r+0x8e>
  407c32:	4632      	mov	r2, r6
  407c34:	6829      	ldr	r1, [r5, #0]
  407c36:	6011      	str	r1, [r2, #0]
  407c38:	6869      	ldr	r1, [r5, #4]
  407c3a:	6051      	str	r1, [r2, #4]
  407c3c:	68a9      	ldr	r1, [r5, #8]
  407c3e:	6091      	str	r1, [r2, #8]
  407c40:	461c      	mov	r4, r3
  407c42:	46d1      	mov	r9, sl
  407c44:	e72a      	b.n	407a9c <_realloc_r+0xc0>
  407c46:	eb09 0107 	add.w	r1, r9, r7
  407c4a:	ebab 0b07 	sub.w	fp, fp, r7
  407c4e:	f04b 0201 	orr.w	r2, fp, #1
  407c52:	6099      	str	r1, [r3, #8]
  407c54:	604a      	str	r2, [r1, #4]
  407c56:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407c5a:	f003 0301 	and.w	r3, r3, #1
  407c5e:	431f      	orrs	r7, r3
  407c60:	4640      	mov	r0, r8
  407c62:	f845 7c04 	str.w	r7, [r5, #-4]
  407c66:	f7fc f961 	bl	403f2c <__malloc_unlock>
  407c6a:	462e      	mov	r6, r5
  407c6c:	e728      	b.n	407ac0 <_realloc_r+0xe4>
  407c6e:	4629      	mov	r1, r5
  407c70:	f7ff fb56 	bl	407320 <memmove>
  407c74:	e6ff      	b.n	407a76 <_realloc_r+0x9a>
  407c76:	4629      	mov	r1, r5
  407c78:	4630      	mov	r0, r6
  407c7a:	461c      	mov	r4, r3
  407c7c:	46d1      	mov	r9, sl
  407c7e:	f7ff fb4f 	bl	407320 <memmove>
  407c82:	e70b      	b.n	407a9c <_realloc_r+0xc0>
  407c84:	68ab      	ldr	r3, [r5, #8]
  407c86:	6083      	str	r3, [r0, #8]
  407c88:	68eb      	ldr	r3, [r5, #12]
  407c8a:	60c3      	str	r3, [r0, #12]
  407c8c:	2a24      	cmp	r2, #36	; 0x24
  407c8e:	d017      	beq.n	407cc0 <_realloc_r+0x2e4>
  407c90:	f100 0310 	add.w	r3, r0, #16
  407c94:	f105 0210 	add.w	r2, r5, #16
  407c98:	e6e7      	b.n	407a6a <_realloc_r+0x8e>
  407c9a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407c9e:	f023 0303 	bic.w	r3, r3, #3
  407ca2:	441c      	add	r4, r3
  407ca4:	462e      	mov	r6, r5
  407ca6:	e6f9      	b.n	407a9c <_realloc_r+0xc0>
  407ca8:	68a9      	ldr	r1, [r5, #8]
  407caa:	f8ca 1010 	str.w	r1, [sl, #16]
  407cae:	68e9      	ldr	r1, [r5, #12]
  407cb0:	f8ca 1014 	str.w	r1, [sl, #20]
  407cb4:	2a24      	cmp	r2, #36	; 0x24
  407cb6:	d00c      	beq.n	407cd2 <_realloc_r+0x2f6>
  407cb8:	3510      	adds	r5, #16
  407cba:	f10a 0218 	add.w	r2, sl, #24
  407cbe:	e7b9      	b.n	407c34 <_realloc_r+0x258>
  407cc0:	692b      	ldr	r3, [r5, #16]
  407cc2:	6103      	str	r3, [r0, #16]
  407cc4:	696b      	ldr	r3, [r5, #20]
  407cc6:	6143      	str	r3, [r0, #20]
  407cc8:	f105 0218 	add.w	r2, r5, #24
  407ccc:	f100 0318 	add.w	r3, r0, #24
  407cd0:	e6cb      	b.n	407a6a <_realloc_r+0x8e>
  407cd2:	692a      	ldr	r2, [r5, #16]
  407cd4:	f8ca 2018 	str.w	r2, [sl, #24]
  407cd8:	696a      	ldr	r2, [r5, #20]
  407cda:	f8ca 201c 	str.w	r2, [sl, #28]
  407cde:	3518      	adds	r5, #24
  407ce0:	f10a 0220 	add.w	r2, sl, #32
  407ce4:	e7a6      	b.n	407c34 <_realloc_r+0x258>
  407ce6:	4632      	mov	r2, r6
  407ce8:	e77f      	b.n	407bea <_realloc_r+0x20e>
  407cea:	4629      	mov	r1, r5
  407cec:	4630      	mov	r0, r6
  407cee:	9301      	str	r3, [sp, #4]
  407cf0:	f7ff fb16 	bl	407320 <memmove>
  407cf4:	9b01      	ldr	r3, [sp, #4]
  407cf6:	e77e      	b.n	407bf6 <_realloc_r+0x21a>
  407cf8:	68a9      	ldr	r1, [r5, #8]
  407cfa:	f8ca 1010 	str.w	r1, [sl, #16]
  407cfe:	68e9      	ldr	r1, [r5, #12]
  407d00:	f8ca 1014 	str.w	r1, [sl, #20]
  407d04:	2a24      	cmp	r2, #36	; 0x24
  407d06:	d003      	beq.n	407d10 <_realloc_r+0x334>
  407d08:	3510      	adds	r5, #16
  407d0a:	f10a 0218 	add.w	r2, sl, #24
  407d0e:	e76c      	b.n	407bea <_realloc_r+0x20e>
  407d10:	692a      	ldr	r2, [r5, #16]
  407d12:	f8ca 2018 	str.w	r2, [sl, #24]
  407d16:	696a      	ldr	r2, [r5, #20]
  407d18:	f8ca 201c 	str.w	r2, [sl, #28]
  407d1c:	3518      	adds	r5, #24
  407d1e:	f10a 0220 	add.w	r2, sl, #32
  407d22:	e762      	b.n	407bea <_realloc_r+0x20e>
  407d24:	20400438 	.word	0x20400438

00407d28 <__sread>:
  407d28:	b510      	push	{r4, lr}
  407d2a:	460c      	mov	r4, r1
  407d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d30:	f000 fa88 	bl	408244 <_read_r>
  407d34:	2800      	cmp	r0, #0
  407d36:	db03      	blt.n	407d40 <__sread+0x18>
  407d38:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407d3a:	4403      	add	r3, r0
  407d3c:	6523      	str	r3, [r4, #80]	; 0x50
  407d3e:	bd10      	pop	{r4, pc}
  407d40:	89a3      	ldrh	r3, [r4, #12]
  407d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407d46:	81a3      	strh	r3, [r4, #12]
  407d48:	bd10      	pop	{r4, pc}
  407d4a:	bf00      	nop

00407d4c <__swrite>:
  407d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d50:	4616      	mov	r6, r2
  407d52:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407d56:	461f      	mov	r7, r3
  407d58:	05d3      	lsls	r3, r2, #23
  407d5a:	460c      	mov	r4, r1
  407d5c:	4605      	mov	r5, r0
  407d5e:	d507      	bpl.n	407d70 <__swrite+0x24>
  407d60:	2200      	movs	r2, #0
  407d62:	2302      	movs	r3, #2
  407d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d68:	f000 fa40 	bl	4081ec <_lseek_r>
  407d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407d78:	81a2      	strh	r2, [r4, #12]
  407d7a:	463b      	mov	r3, r7
  407d7c:	4632      	mov	r2, r6
  407d7e:	4628      	mov	r0, r5
  407d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407d84:	f000 b85e 	b.w	407e44 <_write_r>

00407d88 <__sseek>:
  407d88:	b510      	push	{r4, lr}
  407d8a:	460c      	mov	r4, r1
  407d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d90:	f000 fa2c 	bl	4081ec <_lseek_r>
  407d94:	89a3      	ldrh	r3, [r4, #12]
  407d96:	1c42      	adds	r2, r0, #1
  407d98:	bf0e      	itee	eq
  407d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407da2:	6520      	strne	r0, [r4, #80]	; 0x50
  407da4:	81a3      	strh	r3, [r4, #12]
  407da6:	bd10      	pop	{r4, pc}

00407da8 <__sclose>:
  407da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407dac:	f000 b8f2 	b.w	407f94 <_close_r>

00407db0 <__sprint_r.part.0>:
  407db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407db4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407db6:	049c      	lsls	r4, r3, #18
  407db8:	4693      	mov	fp, r2
  407dba:	d52f      	bpl.n	407e1c <__sprint_r.part.0+0x6c>
  407dbc:	6893      	ldr	r3, [r2, #8]
  407dbe:	6812      	ldr	r2, [r2, #0]
  407dc0:	b353      	cbz	r3, 407e18 <__sprint_r.part.0+0x68>
  407dc2:	460e      	mov	r6, r1
  407dc4:	4607      	mov	r7, r0
  407dc6:	f102 0908 	add.w	r9, r2, #8
  407dca:	e919 0420 	ldmdb	r9, {r5, sl}
  407dce:	ea5f 089a 	movs.w	r8, sl, lsr #2
  407dd2:	d017      	beq.n	407e04 <__sprint_r.part.0+0x54>
  407dd4:	3d04      	subs	r5, #4
  407dd6:	2400      	movs	r4, #0
  407dd8:	e001      	b.n	407dde <__sprint_r.part.0+0x2e>
  407dda:	45a0      	cmp	r8, r4
  407ddc:	d010      	beq.n	407e00 <__sprint_r.part.0+0x50>
  407dde:	4632      	mov	r2, r6
  407de0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407de4:	4638      	mov	r0, r7
  407de6:	f000 f999 	bl	40811c <_fputwc_r>
  407dea:	1c43      	adds	r3, r0, #1
  407dec:	f104 0401 	add.w	r4, r4, #1
  407df0:	d1f3      	bne.n	407dda <__sprint_r.part.0+0x2a>
  407df2:	2300      	movs	r3, #0
  407df4:	f8cb 3008 	str.w	r3, [fp, #8]
  407df8:	f8cb 3004 	str.w	r3, [fp, #4]
  407dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e00:	f8db 3008 	ldr.w	r3, [fp, #8]
  407e04:	f02a 0a03 	bic.w	sl, sl, #3
  407e08:	eba3 030a 	sub.w	r3, r3, sl
  407e0c:	f8cb 3008 	str.w	r3, [fp, #8]
  407e10:	f109 0908 	add.w	r9, r9, #8
  407e14:	2b00      	cmp	r3, #0
  407e16:	d1d8      	bne.n	407dca <__sprint_r.part.0+0x1a>
  407e18:	2000      	movs	r0, #0
  407e1a:	e7ea      	b.n	407df2 <__sprint_r.part.0+0x42>
  407e1c:	f7fe fffe 	bl	406e1c <__sfvwrite_r>
  407e20:	2300      	movs	r3, #0
  407e22:	f8cb 3008 	str.w	r3, [fp, #8]
  407e26:	f8cb 3004 	str.w	r3, [fp, #4]
  407e2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e2e:	bf00      	nop

00407e30 <__sprint_r>:
  407e30:	6893      	ldr	r3, [r2, #8]
  407e32:	b10b      	cbz	r3, 407e38 <__sprint_r+0x8>
  407e34:	f7ff bfbc 	b.w	407db0 <__sprint_r.part.0>
  407e38:	b410      	push	{r4}
  407e3a:	4618      	mov	r0, r3
  407e3c:	6053      	str	r3, [r2, #4]
  407e3e:	bc10      	pop	{r4}
  407e40:	4770      	bx	lr
  407e42:	bf00      	nop

00407e44 <_write_r>:
  407e44:	b570      	push	{r4, r5, r6, lr}
  407e46:	460d      	mov	r5, r1
  407e48:	4c08      	ldr	r4, [pc, #32]	; (407e6c <_write_r+0x28>)
  407e4a:	4611      	mov	r1, r2
  407e4c:	4606      	mov	r6, r0
  407e4e:	461a      	mov	r2, r3
  407e50:	4628      	mov	r0, r5
  407e52:	2300      	movs	r3, #0
  407e54:	6023      	str	r3, [r4, #0]
  407e56:	f7f8 f9ff 	bl	400258 <_write>
  407e5a:	1c43      	adds	r3, r0, #1
  407e5c:	d000      	beq.n	407e60 <_write_r+0x1c>
  407e5e:	bd70      	pop	{r4, r5, r6, pc}
  407e60:	6823      	ldr	r3, [r4, #0]
  407e62:	2b00      	cmp	r3, #0
  407e64:	d0fb      	beq.n	407e5e <_write_r+0x1a>
  407e66:	6033      	str	r3, [r6, #0]
  407e68:	bd70      	pop	{r4, r5, r6, pc}
  407e6a:	bf00      	nop
  407e6c:	20400cc0 	.word	0x20400cc0

00407e70 <__register_exitproc>:
  407e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407e74:	4d2c      	ldr	r5, [pc, #176]	; (407f28 <__register_exitproc+0xb8>)
  407e76:	4606      	mov	r6, r0
  407e78:	6828      	ldr	r0, [r5, #0]
  407e7a:	4698      	mov	r8, r3
  407e7c:	460f      	mov	r7, r1
  407e7e:	4691      	mov	r9, r2
  407e80:	f7ff f980 	bl	407184 <__retarget_lock_acquire_recursive>
  407e84:	4b29      	ldr	r3, [pc, #164]	; (407f2c <__register_exitproc+0xbc>)
  407e86:	681c      	ldr	r4, [r3, #0]
  407e88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407e8c:	2b00      	cmp	r3, #0
  407e8e:	d03e      	beq.n	407f0e <__register_exitproc+0x9e>
  407e90:	685a      	ldr	r2, [r3, #4]
  407e92:	2a1f      	cmp	r2, #31
  407e94:	dc1c      	bgt.n	407ed0 <__register_exitproc+0x60>
  407e96:	f102 0e01 	add.w	lr, r2, #1
  407e9a:	b176      	cbz	r6, 407eba <__register_exitproc+0x4a>
  407e9c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407ea0:	2401      	movs	r4, #1
  407ea2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  407ea6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407eaa:	4094      	lsls	r4, r2
  407eac:	4320      	orrs	r0, r4
  407eae:	2e02      	cmp	r6, #2
  407eb0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407eb4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407eb8:	d023      	beq.n	407f02 <__register_exitproc+0x92>
  407eba:	3202      	adds	r2, #2
  407ebc:	f8c3 e004 	str.w	lr, [r3, #4]
  407ec0:	6828      	ldr	r0, [r5, #0]
  407ec2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407ec6:	f7ff f95f 	bl	407188 <__retarget_lock_release_recursive>
  407eca:	2000      	movs	r0, #0
  407ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407ed0:	4b17      	ldr	r3, [pc, #92]	; (407f30 <__register_exitproc+0xc0>)
  407ed2:	b30b      	cbz	r3, 407f18 <__register_exitproc+0xa8>
  407ed4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407ed8:	f7fb fc7a 	bl	4037d0 <malloc>
  407edc:	4603      	mov	r3, r0
  407ede:	b1d8      	cbz	r0, 407f18 <__register_exitproc+0xa8>
  407ee0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407ee4:	6002      	str	r2, [r0, #0]
  407ee6:	2100      	movs	r1, #0
  407ee8:	6041      	str	r1, [r0, #4]
  407eea:	460a      	mov	r2, r1
  407eec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407ef0:	f04f 0e01 	mov.w	lr, #1
  407ef4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407ef8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407efc:	2e00      	cmp	r6, #0
  407efe:	d0dc      	beq.n	407eba <__register_exitproc+0x4a>
  407f00:	e7cc      	b.n	407e9c <__register_exitproc+0x2c>
  407f02:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407f06:	430c      	orrs	r4, r1
  407f08:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407f0c:	e7d5      	b.n	407eba <__register_exitproc+0x4a>
  407f0e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407f12:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407f16:	e7bb      	b.n	407e90 <__register_exitproc+0x20>
  407f18:	6828      	ldr	r0, [r5, #0]
  407f1a:	f7ff f935 	bl	407188 <__retarget_lock_release_recursive>
  407f1e:	f04f 30ff 	mov.w	r0, #4294967295
  407f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407f26:	bf00      	nop
  407f28:	20400848 	.word	0x20400848
  407f2c:	004088ec 	.word	0x004088ec
  407f30:	004037d1 	.word	0x004037d1

00407f34 <_calloc_r>:
  407f34:	b510      	push	{r4, lr}
  407f36:	fb02 f101 	mul.w	r1, r2, r1
  407f3a:	f7fb fc59 	bl	4037f0 <_malloc_r>
  407f3e:	4604      	mov	r4, r0
  407f40:	b1d8      	cbz	r0, 407f7a <_calloc_r+0x46>
  407f42:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407f46:	f022 0203 	bic.w	r2, r2, #3
  407f4a:	3a04      	subs	r2, #4
  407f4c:	2a24      	cmp	r2, #36	; 0x24
  407f4e:	d818      	bhi.n	407f82 <_calloc_r+0x4e>
  407f50:	2a13      	cmp	r2, #19
  407f52:	d914      	bls.n	407f7e <_calloc_r+0x4a>
  407f54:	2300      	movs	r3, #0
  407f56:	2a1b      	cmp	r2, #27
  407f58:	6003      	str	r3, [r0, #0]
  407f5a:	6043      	str	r3, [r0, #4]
  407f5c:	d916      	bls.n	407f8c <_calloc_r+0x58>
  407f5e:	2a24      	cmp	r2, #36	; 0x24
  407f60:	6083      	str	r3, [r0, #8]
  407f62:	60c3      	str	r3, [r0, #12]
  407f64:	bf11      	iteee	ne
  407f66:	f100 0210 	addne.w	r2, r0, #16
  407f6a:	6103      	streq	r3, [r0, #16]
  407f6c:	6143      	streq	r3, [r0, #20]
  407f6e:	f100 0218 	addeq.w	r2, r0, #24
  407f72:	2300      	movs	r3, #0
  407f74:	6013      	str	r3, [r2, #0]
  407f76:	6053      	str	r3, [r2, #4]
  407f78:	6093      	str	r3, [r2, #8]
  407f7a:	4620      	mov	r0, r4
  407f7c:	bd10      	pop	{r4, pc}
  407f7e:	4602      	mov	r2, r0
  407f80:	e7f7      	b.n	407f72 <_calloc_r+0x3e>
  407f82:	2100      	movs	r1, #0
  407f84:	f7fb ff7e 	bl	403e84 <memset>
  407f88:	4620      	mov	r0, r4
  407f8a:	bd10      	pop	{r4, pc}
  407f8c:	f100 0208 	add.w	r2, r0, #8
  407f90:	e7ef      	b.n	407f72 <_calloc_r+0x3e>
  407f92:	bf00      	nop

00407f94 <_close_r>:
  407f94:	b538      	push	{r3, r4, r5, lr}
  407f96:	4c07      	ldr	r4, [pc, #28]	; (407fb4 <_close_r+0x20>)
  407f98:	2300      	movs	r3, #0
  407f9a:	4605      	mov	r5, r0
  407f9c:	4608      	mov	r0, r1
  407f9e:	6023      	str	r3, [r4, #0]
  407fa0:	f7f8 feda 	bl	400d58 <_close>
  407fa4:	1c43      	adds	r3, r0, #1
  407fa6:	d000      	beq.n	407faa <_close_r+0x16>
  407fa8:	bd38      	pop	{r3, r4, r5, pc}
  407faa:	6823      	ldr	r3, [r4, #0]
  407fac:	2b00      	cmp	r3, #0
  407fae:	d0fb      	beq.n	407fa8 <_close_r+0x14>
  407fb0:	602b      	str	r3, [r5, #0]
  407fb2:	bd38      	pop	{r3, r4, r5, pc}
  407fb4:	20400cc0 	.word	0x20400cc0

00407fb8 <_fclose_r>:
  407fb8:	b570      	push	{r4, r5, r6, lr}
  407fba:	b159      	cbz	r1, 407fd4 <_fclose_r+0x1c>
  407fbc:	4605      	mov	r5, r0
  407fbe:	460c      	mov	r4, r1
  407fc0:	b110      	cbz	r0, 407fc8 <_fclose_r+0x10>
  407fc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407fc4:	2b00      	cmp	r3, #0
  407fc6:	d03c      	beq.n	408042 <_fclose_r+0x8a>
  407fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407fca:	07d8      	lsls	r0, r3, #31
  407fcc:	d505      	bpl.n	407fda <_fclose_r+0x22>
  407fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407fd2:	b92b      	cbnz	r3, 407fe0 <_fclose_r+0x28>
  407fd4:	2600      	movs	r6, #0
  407fd6:	4630      	mov	r0, r6
  407fd8:	bd70      	pop	{r4, r5, r6, pc}
  407fda:	89a3      	ldrh	r3, [r4, #12]
  407fdc:	0599      	lsls	r1, r3, #22
  407fde:	d53c      	bpl.n	40805a <_fclose_r+0xa2>
  407fe0:	4621      	mov	r1, r4
  407fe2:	4628      	mov	r0, r5
  407fe4:	f7fe fc9a 	bl	40691c <__sflush_r>
  407fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407fea:	4606      	mov	r6, r0
  407fec:	b133      	cbz	r3, 407ffc <_fclose_r+0x44>
  407fee:	69e1      	ldr	r1, [r4, #28]
  407ff0:	4628      	mov	r0, r5
  407ff2:	4798      	blx	r3
  407ff4:	2800      	cmp	r0, #0
  407ff6:	bfb8      	it	lt
  407ff8:	f04f 36ff 	movlt.w	r6, #4294967295
  407ffc:	89a3      	ldrh	r3, [r4, #12]
  407ffe:	061a      	lsls	r2, r3, #24
  408000:	d422      	bmi.n	408048 <_fclose_r+0x90>
  408002:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408004:	b141      	cbz	r1, 408018 <_fclose_r+0x60>
  408006:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40800a:	4299      	cmp	r1, r3
  40800c:	d002      	beq.n	408014 <_fclose_r+0x5c>
  40800e:	4628      	mov	r0, r5
  408010:	f7fe fe1e 	bl	406c50 <_free_r>
  408014:	2300      	movs	r3, #0
  408016:	6323      	str	r3, [r4, #48]	; 0x30
  408018:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40801a:	b121      	cbz	r1, 408026 <_fclose_r+0x6e>
  40801c:	4628      	mov	r0, r5
  40801e:	f7fe fe17 	bl	406c50 <_free_r>
  408022:	2300      	movs	r3, #0
  408024:	6463      	str	r3, [r4, #68]	; 0x44
  408026:	f7fe fd9d 	bl	406b64 <__sfp_lock_acquire>
  40802a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40802c:	2200      	movs	r2, #0
  40802e:	07db      	lsls	r3, r3, #31
  408030:	81a2      	strh	r2, [r4, #12]
  408032:	d50e      	bpl.n	408052 <_fclose_r+0x9a>
  408034:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408036:	f7ff f8a3 	bl	407180 <__retarget_lock_close_recursive>
  40803a:	f7fe fd99 	bl	406b70 <__sfp_lock_release>
  40803e:	4630      	mov	r0, r6
  408040:	bd70      	pop	{r4, r5, r6, pc}
  408042:	f7fe fd63 	bl	406b0c <__sinit>
  408046:	e7bf      	b.n	407fc8 <_fclose_r+0x10>
  408048:	6921      	ldr	r1, [r4, #16]
  40804a:	4628      	mov	r0, r5
  40804c:	f7fe fe00 	bl	406c50 <_free_r>
  408050:	e7d7      	b.n	408002 <_fclose_r+0x4a>
  408052:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408054:	f7ff f898 	bl	407188 <__retarget_lock_release_recursive>
  408058:	e7ec      	b.n	408034 <_fclose_r+0x7c>
  40805a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40805c:	f7ff f892 	bl	407184 <__retarget_lock_acquire_recursive>
  408060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408064:	2b00      	cmp	r3, #0
  408066:	d1bb      	bne.n	407fe0 <_fclose_r+0x28>
  408068:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40806a:	f016 0601 	ands.w	r6, r6, #1
  40806e:	d1b1      	bne.n	407fd4 <_fclose_r+0x1c>
  408070:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408072:	f7ff f889 	bl	407188 <__retarget_lock_release_recursive>
  408076:	4630      	mov	r0, r6
  408078:	bd70      	pop	{r4, r5, r6, pc}
  40807a:	bf00      	nop

0040807c <__fputwc>:
  40807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408080:	b082      	sub	sp, #8
  408082:	4680      	mov	r8, r0
  408084:	4689      	mov	r9, r1
  408086:	4614      	mov	r4, r2
  408088:	f000 f8a2 	bl	4081d0 <__locale_mb_cur_max>
  40808c:	2801      	cmp	r0, #1
  40808e:	d036      	beq.n	4080fe <__fputwc+0x82>
  408090:	464a      	mov	r2, r9
  408092:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408096:	a901      	add	r1, sp, #4
  408098:	4640      	mov	r0, r8
  40809a:	f000 f941 	bl	408320 <_wcrtomb_r>
  40809e:	1c42      	adds	r2, r0, #1
  4080a0:	4606      	mov	r6, r0
  4080a2:	d025      	beq.n	4080f0 <__fputwc+0x74>
  4080a4:	b3a8      	cbz	r0, 408112 <__fputwc+0x96>
  4080a6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4080aa:	2500      	movs	r5, #0
  4080ac:	f10d 0a04 	add.w	sl, sp, #4
  4080b0:	e009      	b.n	4080c6 <__fputwc+0x4a>
  4080b2:	6823      	ldr	r3, [r4, #0]
  4080b4:	1c5a      	adds	r2, r3, #1
  4080b6:	6022      	str	r2, [r4, #0]
  4080b8:	f883 e000 	strb.w	lr, [r3]
  4080bc:	3501      	adds	r5, #1
  4080be:	42b5      	cmp	r5, r6
  4080c0:	d227      	bcs.n	408112 <__fputwc+0x96>
  4080c2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4080c6:	68a3      	ldr	r3, [r4, #8]
  4080c8:	3b01      	subs	r3, #1
  4080ca:	2b00      	cmp	r3, #0
  4080cc:	60a3      	str	r3, [r4, #8]
  4080ce:	daf0      	bge.n	4080b2 <__fputwc+0x36>
  4080d0:	69a7      	ldr	r7, [r4, #24]
  4080d2:	42bb      	cmp	r3, r7
  4080d4:	4671      	mov	r1, lr
  4080d6:	4622      	mov	r2, r4
  4080d8:	4640      	mov	r0, r8
  4080da:	db02      	blt.n	4080e2 <__fputwc+0x66>
  4080dc:	f1be 0f0a 	cmp.w	lr, #10
  4080e0:	d1e7      	bne.n	4080b2 <__fputwc+0x36>
  4080e2:	f000 f8c5 	bl	408270 <__swbuf_r>
  4080e6:	1c43      	adds	r3, r0, #1
  4080e8:	d1e8      	bne.n	4080bc <__fputwc+0x40>
  4080ea:	b002      	add	sp, #8
  4080ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4080f0:	89a3      	ldrh	r3, [r4, #12]
  4080f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4080f6:	81a3      	strh	r3, [r4, #12]
  4080f8:	b002      	add	sp, #8
  4080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4080fe:	f109 33ff 	add.w	r3, r9, #4294967295
  408102:	2bfe      	cmp	r3, #254	; 0xfe
  408104:	d8c4      	bhi.n	408090 <__fputwc+0x14>
  408106:	fa5f fe89 	uxtb.w	lr, r9
  40810a:	4606      	mov	r6, r0
  40810c:	f88d e004 	strb.w	lr, [sp, #4]
  408110:	e7cb      	b.n	4080aa <__fputwc+0x2e>
  408112:	4648      	mov	r0, r9
  408114:	b002      	add	sp, #8
  408116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40811a:	bf00      	nop

0040811c <_fputwc_r>:
  40811c:	b530      	push	{r4, r5, lr}
  40811e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408120:	f013 0f01 	tst.w	r3, #1
  408124:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408128:	4614      	mov	r4, r2
  40812a:	b083      	sub	sp, #12
  40812c:	4605      	mov	r5, r0
  40812e:	b29a      	uxth	r2, r3
  408130:	d101      	bne.n	408136 <_fputwc_r+0x1a>
  408132:	0590      	lsls	r0, r2, #22
  408134:	d51c      	bpl.n	408170 <_fputwc_r+0x54>
  408136:	0490      	lsls	r0, r2, #18
  408138:	d406      	bmi.n	408148 <_fputwc_r+0x2c>
  40813a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40813c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408144:	81a3      	strh	r3, [r4, #12]
  408146:	6662      	str	r2, [r4, #100]	; 0x64
  408148:	4628      	mov	r0, r5
  40814a:	4622      	mov	r2, r4
  40814c:	f7ff ff96 	bl	40807c <__fputwc>
  408150:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408152:	07da      	lsls	r2, r3, #31
  408154:	4605      	mov	r5, r0
  408156:	d402      	bmi.n	40815e <_fputwc_r+0x42>
  408158:	89a3      	ldrh	r3, [r4, #12]
  40815a:	059b      	lsls	r3, r3, #22
  40815c:	d502      	bpl.n	408164 <_fputwc_r+0x48>
  40815e:	4628      	mov	r0, r5
  408160:	b003      	add	sp, #12
  408162:	bd30      	pop	{r4, r5, pc}
  408164:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408166:	f7ff f80f 	bl	407188 <__retarget_lock_release_recursive>
  40816a:	4628      	mov	r0, r5
  40816c:	b003      	add	sp, #12
  40816e:	bd30      	pop	{r4, r5, pc}
  408170:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408172:	9101      	str	r1, [sp, #4]
  408174:	f7ff f806 	bl	407184 <__retarget_lock_acquire_recursive>
  408178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40817c:	9901      	ldr	r1, [sp, #4]
  40817e:	b29a      	uxth	r2, r3
  408180:	e7d9      	b.n	408136 <_fputwc_r+0x1a>
  408182:	bf00      	nop

00408184 <_fstat_r>:
  408184:	b538      	push	{r3, r4, r5, lr}
  408186:	460b      	mov	r3, r1
  408188:	4c07      	ldr	r4, [pc, #28]	; (4081a8 <_fstat_r+0x24>)
  40818a:	4605      	mov	r5, r0
  40818c:	4611      	mov	r1, r2
  40818e:	4618      	mov	r0, r3
  408190:	2300      	movs	r3, #0
  408192:	6023      	str	r3, [r4, #0]
  408194:	f7f8 fde4 	bl	400d60 <_fstat>
  408198:	1c43      	adds	r3, r0, #1
  40819a:	d000      	beq.n	40819e <_fstat_r+0x1a>
  40819c:	bd38      	pop	{r3, r4, r5, pc}
  40819e:	6823      	ldr	r3, [r4, #0]
  4081a0:	2b00      	cmp	r3, #0
  4081a2:	d0fb      	beq.n	40819c <_fstat_r+0x18>
  4081a4:	602b      	str	r3, [r5, #0]
  4081a6:	bd38      	pop	{r3, r4, r5, pc}
  4081a8:	20400cc0 	.word	0x20400cc0

004081ac <_isatty_r>:
  4081ac:	b538      	push	{r3, r4, r5, lr}
  4081ae:	4c07      	ldr	r4, [pc, #28]	; (4081cc <_isatty_r+0x20>)
  4081b0:	2300      	movs	r3, #0
  4081b2:	4605      	mov	r5, r0
  4081b4:	4608      	mov	r0, r1
  4081b6:	6023      	str	r3, [r4, #0]
  4081b8:	f7f8 fdd8 	bl	400d6c <_isatty>
  4081bc:	1c43      	adds	r3, r0, #1
  4081be:	d000      	beq.n	4081c2 <_isatty_r+0x16>
  4081c0:	bd38      	pop	{r3, r4, r5, pc}
  4081c2:	6823      	ldr	r3, [r4, #0]
  4081c4:	2b00      	cmp	r3, #0
  4081c6:	d0fb      	beq.n	4081c0 <_isatty_r+0x14>
  4081c8:	602b      	str	r3, [r5, #0]
  4081ca:	bd38      	pop	{r3, r4, r5, pc}
  4081cc:	20400cc0 	.word	0x20400cc0

004081d0 <__locale_mb_cur_max>:
  4081d0:	4b04      	ldr	r3, [pc, #16]	; (4081e4 <__locale_mb_cur_max+0x14>)
  4081d2:	4a05      	ldr	r2, [pc, #20]	; (4081e8 <__locale_mb_cur_max+0x18>)
  4081d4:	681b      	ldr	r3, [r3, #0]
  4081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4081d8:	2b00      	cmp	r3, #0
  4081da:	bf08      	it	eq
  4081dc:	4613      	moveq	r3, r2
  4081de:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4081e2:	4770      	bx	lr
  4081e4:	2040000c 	.word	0x2040000c
  4081e8:	2040084c 	.word	0x2040084c

004081ec <_lseek_r>:
  4081ec:	b570      	push	{r4, r5, r6, lr}
  4081ee:	460d      	mov	r5, r1
  4081f0:	4c08      	ldr	r4, [pc, #32]	; (408214 <_lseek_r+0x28>)
  4081f2:	4611      	mov	r1, r2
  4081f4:	4606      	mov	r6, r0
  4081f6:	461a      	mov	r2, r3
  4081f8:	4628      	mov	r0, r5
  4081fa:	2300      	movs	r3, #0
  4081fc:	6023      	str	r3, [r4, #0]
  4081fe:	f7f8 fdb7 	bl	400d70 <_lseek>
  408202:	1c43      	adds	r3, r0, #1
  408204:	d000      	beq.n	408208 <_lseek_r+0x1c>
  408206:	bd70      	pop	{r4, r5, r6, pc}
  408208:	6823      	ldr	r3, [r4, #0]
  40820a:	2b00      	cmp	r3, #0
  40820c:	d0fb      	beq.n	408206 <_lseek_r+0x1a>
  40820e:	6033      	str	r3, [r6, #0]
  408210:	bd70      	pop	{r4, r5, r6, pc}
  408212:	bf00      	nop
  408214:	20400cc0 	.word	0x20400cc0

00408218 <__ascii_mbtowc>:
  408218:	b082      	sub	sp, #8
  40821a:	b149      	cbz	r1, 408230 <__ascii_mbtowc+0x18>
  40821c:	b15a      	cbz	r2, 408236 <__ascii_mbtowc+0x1e>
  40821e:	b16b      	cbz	r3, 40823c <__ascii_mbtowc+0x24>
  408220:	7813      	ldrb	r3, [r2, #0]
  408222:	600b      	str	r3, [r1, #0]
  408224:	7812      	ldrb	r2, [r2, #0]
  408226:	1c10      	adds	r0, r2, #0
  408228:	bf18      	it	ne
  40822a:	2001      	movne	r0, #1
  40822c:	b002      	add	sp, #8
  40822e:	4770      	bx	lr
  408230:	a901      	add	r1, sp, #4
  408232:	2a00      	cmp	r2, #0
  408234:	d1f3      	bne.n	40821e <__ascii_mbtowc+0x6>
  408236:	4610      	mov	r0, r2
  408238:	b002      	add	sp, #8
  40823a:	4770      	bx	lr
  40823c:	f06f 0001 	mvn.w	r0, #1
  408240:	e7f4      	b.n	40822c <__ascii_mbtowc+0x14>
  408242:	bf00      	nop

00408244 <_read_r>:
  408244:	b570      	push	{r4, r5, r6, lr}
  408246:	460d      	mov	r5, r1
  408248:	4c08      	ldr	r4, [pc, #32]	; (40826c <_read_r+0x28>)
  40824a:	4611      	mov	r1, r2
  40824c:	4606      	mov	r6, r0
  40824e:	461a      	mov	r2, r3
  408250:	4628      	mov	r0, r5
  408252:	2300      	movs	r3, #0
  408254:	6023      	str	r3, [r4, #0]
  408256:	f7f7 ffe1 	bl	40021c <_read>
  40825a:	1c43      	adds	r3, r0, #1
  40825c:	d000      	beq.n	408260 <_read_r+0x1c>
  40825e:	bd70      	pop	{r4, r5, r6, pc}
  408260:	6823      	ldr	r3, [r4, #0]
  408262:	2b00      	cmp	r3, #0
  408264:	d0fb      	beq.n	40825e <_read_r+0x1a>
  408266:	6033      	str	r3, [r6, #0]
  408268:	bd70      	pop	{r4, r5, r6, pc}
  40826a:	bf00      	nop
  40826c:	20400cc0 	.word	0x20400cc0

00408270 <__swbuf_r>:
  408270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408272:	460d      	mov	r5, r1
  408274:	4614      	mov	r4, r2
  408276:	4606      	mov	r6, r0
  408278:	b110      	cbz	r0, 408280 <__swbuf_r+0x10>
  40827a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40827c:	2b00      	cmp	r3, #0
  40827e:	d04b      	beq.n	408318 <__swbuf_r+0xa8>
  408280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408284:	69a3      	ldr	r3, [r4, #24]
  408286:	60a3      	str	r3, [r4, #8]
  408288:	b291      	uxth	r1, r2
  40828a:	0708      	lsls	r0, r1, #28
  40828c:	d539      	bpl.n	408302 <__swbuf_r+0x92>
  40828e:	6923      	ldr	r3, [r4, #16]
  408290:	2b00      	cmp	r3, #0
  408292:	d036      	beq.n	408302 <__swbuf_r+0x92>
  408294:	b2ed      	uxtb	r5, r5
  408296:	0489      	lsls	r1, r1, #18
  408298:	462f      	mov	r7, r5
  40829a:	d515      	bpl.n	4082c8 <__swbuf_r+0x58>
  40829c:	6822      	ldr	r2, [r4, #0]
  40829e:	6961      	ldr	r1, [r4, #20]
  4082a0:	1ad3      	subs	r3, r2, r3
  4082a2:	428b      	cmp	r3, r1
  4082a4:	da1c      	bge.n	4082e0 <__swbuf_r+0x70>
  4082a6:	3301      	adds	r3, #1
  4082a8:	68a1      	ldr	r1, [r4, #8]
  4082aa:	1c50      	adds	r0, r2, #1
  4082ac:	3901      	subs	r1, #1
  4082ae:	60a1      	str	r1, [r4, #8]
  4082b0:	6020      	str	r0, [r4, #0]
  4082b2:	7015      	strb	r5, [r2, #0]
  4082b4:	6962      	ldr	r2, [r4, #20]
  4082b6:	429a      	cmp	r2, r3
  4082b8:	d01a      	beq.n	4082f0 <__swbuf_r+0x80>
  4082ba:	89a3      	ldrh	r3, [r4, #12]
  4082bc:	07db      	lsls	r3, r3, #31
  4082be:	d501      	bpl.n	4082c4 <__swbuf_r+0x54>
  4082c0:	2d0a      	cmp	r5, #10
  4082c2:	d015      	beq.n	4082f0 <__swbuf_r+0x80>
  4082c4:	4638      	mov	r0, r7
  4082c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4082c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4082ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4082ce:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4082d2:	81a2      	strh	r2, [r4, #12]
  4082d4:	6822      	ldr	r2, [r4, #0]
  4082d6:	6661      	str	r1, [r4, #100]	; 0x64
  4082d8:	6961      	ldr	r1, [r4, #20]
  4082da:	1ad3      	subs	r3, r2, r3
  4082dc:	428b      	cmp	r3, r1
  4082de:	dbe2      	blt.n	4082a6 <__swbuf_r+0x36>
  4082e0:	4621      	mov	r1, r4
  4082e2:	4630      	mov	r0, r6
  4082e4:	f7fe fbba 	bl	406a5c <_fflush_r>
  4082e8:	b940      	cbnz	r0, 4082fc <__swbuf_r+0x8c>
  4082ea:	6822      	ldr	r2, [r4, #0]
  4082ec:	2301      	movs	r3, #1
  4082ee:	e7db      	b.n	4082a8 <__swbuf_r+0x38>
  4082f0:	4621      	mov	r1, r4
  4082f2:	4630      	mov	r0, r6
  4082f4:	f7fe fbb2 	bl	406a5c <_fflush_r>
  4082f8:	2800      	cmp	r0, #0
  4082fa:	d0e3      	beq.n	4082c4 <__swbuf_r+0x54>
  4082fc:	f04f 37ff 	mov.w	r7, #4294967295
  408300:	e7e0      	b.n	4082c4 <__swbuf_r+0x54>
  408302:	4621      	mov	r1, r4
  408304:	4630      	mov	r0, r6
  408306:	f7fd fad7 	bl	4058b8 <__swsetup_r>
  40830a:	2800      	cmp	r0, #0
  40830c:	d1f6      	bne.n	4082fc <__swbuf_r+0x8c>
  40830e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408312:	6923      	ldr	r3, [r4, #16]
  408314:	b291      	uxth	r1, r2
  408316:	e7bd      	b.n	408294 <__swbuf_r+0x24>
  408318:	f7fe fbf8 	bl	406b0c <__sinit>
  40831c:	e7b0      	b.n	408280 <__swbuf_r+0x10>
  40831e:	bf00      	nop

00408320 <_wcrtomb_r>:
  408320:	b5f0      	push	{r4, r5, r6, r7, lr}
  408322:	4606      	mov	r6, r0
  408324:	b085      	sub	sp, #20
  408326:	461f      	mov	r7, r3
  408328:	b189      	cbz	r1, 40834e <_wcrtomb_r+0x2e>
  40832a:	4c10      	ldr	r4, [pc, #64]	; (40836c <_wcrtomb_r+0x4c>)
  40832c:	4d10      	ldr	r5, [pc, #64]	; (408370 <_wcrtomb_r+0x50>)
  40832e:	6824      	ldr	r4, [r4, #0]
  408330:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408332:	2c00      	cmp	r4, #0
  408334:	bf08      	it	eq
  408336:	462c      	moveq	r4, r5
  408338:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40833c:	47a0      	blx	r4
  40833e:	1c43      	adds	r3, r0, #1
  408340:	d103      	bne.n	40834a <_wcrtomb_r+0x2a>
  408342:	2200      	movs	r2, #0
  408344:	238a      	movs	r3, #138	; 0x8a
  408346:	603a      	str	r2, [r7, #0]
  408348:	6033      	str	r3, [r6, #0]
  40834a:	b005      	add	sp, #20
  40834c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40834e:	460c      	mov	r4, r1
  408350:	4906      	ldr	r1, [pc, #24]	; (40836c <_wcrtomb_r+0x4c>)
  408352:	4a07      	ldr	r2, [pc, #28]	; (408370 <_wcrtomb_r+0x50>)
  408354:	6809      	ldr	r1, [r1, #0]
  408356:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408358:	2900      	cmp	r1, #0
  40835a:	bf08      	it	eq
  40835c:	4611      	moveq	r1, r2
  40835e:	4622      	mov	r2, r4
  408360:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408364:	a901      	add	r1, sp, #4
  408366:	47a0      	blx	r4
  408368:	e7e9      	b.n	40833e <_wcrtomb_r+0x1e>
  40836a:	bf00      	nop
  40836c:	2040000c 	.word	0x2040000c
  408370:	2040084c 	.word	0x2040084c

00408374 <__ascii_wctomb>:
  408374:	b121      	cbz	r1, 408380 <__ascii_wctomb+0xc>
  408376:	2aff      	cmp	r2, #255	; 0xff
  408378:	d804      	bhi.n	408384 <__ascii_wctomb+0x10>
  40837a:	700a      	strb	r2, [r1, #0]
  40837c:	2001      	movs	r0, #1
  40837e:	4770      	bx	lr
  408380:	4608      	mov	r0, r1
  408382:	4770      	bx	lr
  408384:	238a      	movs	r3, #138	; 0x8a
  408386:	6003      	str	r3, [r0, #0]
  408388:	f04f 30ff 	mov.w	r0, #4294967295
  40838c:	4770      	bx	lr
  40838e:	bf00      	nop

00408390 <__gedf2>:
  408390:	f04f 3cff 	mov.w	ip, #4294967295
  408394:	e006      	b.n	4083a4 <__cmpdf2+0x4>
  408396:	bf00      	nop

00408398 <__ledf2>:
  408398:	f04f 0c01 	mov.w	ip, #1
  40839c:	e002      	b.n	4083a4 <__cmpdf2+0x4>
  40839e:	bf00      	nop

004083a0 <__cmpdf2>:
  4083a0:	f04f 0c01 	mov.w	ip, #1
  4083a4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4083a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4083ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4083b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4083b4:	bf18      	it	ne
  4083b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4083ba:	d01b      	beq.n	4083f4 <__cmpdf2+0x54>
  4083bc:	b001      	add	sp, #4
  4083be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4083c2:	bf0c      	ite	eq
  4083c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4083c8:	ea91 0f03 	teqne	r1, r3
  4083cc:	bf02      	ittt	eq
  4083ce:	ea90 0f02 	teqeq	r0, r2
  4083d2:	2000      	moveq	r0, #0
  4083d4:	4770      	bxeq	lr
  4083d6:	f110 0f00 	cmn.w	r0, #0
  4083da:	ea91 0f03 	teq	r1, r3
  4083de:	bf58      	it	pl
  4083e0:	4299      	cmppl	r1, r3
  4083e2:	bf08      	it	eq
  4083e4:	4290      	cmpeq	r0, r2
  4083e6:	bf2c      	ite	cs
  4083e8:	17d8      	asrcs	r0, r3, #31
  4083ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4083ee:	f040 0001 	orr.w	r0, r0, #1
  4083f2:	4770      	bx	lr
  4083f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4083f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4083fc:	d102      	bne.n	408404 <__cmpdf2+0x64>
  4083fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408402:	d107      	bne.n	408414 <__cmpdf2+0x74>
  408404:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40840c:	d1d6      	bne.n	4083bc <__cmpdf2+0x1c>
  40840e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408412:	d0d3      	beq.n	4083bc <__cmpdf2+0x1c>
  408414:	f85d 0b04 	ldr.w	r0, [sp], #4
  408418:	4770      	bx	lr
  40841a:	bf00      	nop

0040841c <__aeabi_cdrcmple>:
  40841c:	4684      	mov	ip, r0
  40841e:	4610      	mov	r0, r2
  408420:	4662      	mov	r2, ip
  408422:	468c      	mov	ip, r1
  408424:	4619      	mov	r1, r3
  408426:	4663      	mov	r3, ip
  408428:	e000      	b.n	40842c <__aeabi_cdcmpeq>
  40842a:	bf00      	nop

0040842c <__aeabi_cdcmpeq>:
  40842c:	b501      	push	{r0, lr}
  40842e:	f7ff ffb7 	bl	4083a0 <__cmpdf2>
  408432:	2800      	cmp	r0, #0
  408434:	bf48      	it	mi
  408436:	f110 0f00 	cmnmi.w	r0, #0
  40843a:	bd01      	pop	{r0, pc}

0040843c <__aeabi_dcmpeq>:
  40843c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408440:	f7ff fff4 	bl	40842c <__aeabi_cdcmpeq>
  408444:	bf0c      	ite	eq
  408446:	2001      	moveq	r0, #1
  408448:	2000      	movne	r0, #0
  40844a:	f85d fb08 	ldr.w	pc, [sp], #8
  40844e:	bf00      	nop

00408450 <__aeabi_dcmplt>:
  408450:	f84d ed08 	str.w	lr, [sp, #-8]!
  408454:	f7ff ffea 	bl	40842c <__aeabi_cdcmpeq>
  408458:	bf34      	ite	cc
  40845a:	2001      	movcc	r0, #1
  40845c:	2000      	movcs	r0, #0
  40845e:	f85d fb08 	ldr.w	pc, [sp], #8
  408462:	bf00      	nop

00408464 <__aeabi_dcmple>:
  408464:	f84d ed08 	str.w	lr, [sp, #-8]!
  408468:	f7ff ffe0 	bl	40842c <__aeabi_cdcmpeq>
  40846c:	bf94      	ite	ls
  40846e:	2001      	movls	r0, #1
  408470:	2000      	movhi	r0, #0
  408472:	f85d fb08 	ldr.w	pc, [sp], #8
  408476:	bf00      	nop

00408478 <__aeabi_dcmpge>:
  408478:	f84d ed08 	str.w	lr, [sp, #-8]!
  40847c:	f7ff ffce 	bl	40841c <__aeabi_cdrcmple>
  408480:	bf94      	ite	ls
  408482:	2001      	movls	r0, #1
  408484:	2000      	movhi	r0, #0
  408486:	f85d fb08 	ldr.w	pc, [sp], #8
  40848a:	bf00      	nop

0040848c <__aeabi_dcmpgt>:
  40848c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408490:	f7ff ffc4 	bl	40841c <__aeabi_cdrcmple>
  408494:	bf34      	ite	cc
  408496:	2001      	movcc	r0, #1
  408498:	2000      	movcs	r0, #0
  40849a:	f85d fb08 	ldr.w	pc, [sp], #8
  40849e:	bf00      	nop

004084a0 <__aeabi_dcmpun>:
  4084a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4084a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4084a8:	d102      	bne.n	4084b0 <__aeabi_dcmpun+0x10>
  4084aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4084ae:	d10a      	bne.n	4084c6 <__aeabi_dcmpun+0x26>
  4084b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4084b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4084b8:	d102      	bne.n	4084c0 <__aeabi_dcmpun+0x20>
  4084ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4084be:	d102      	bne.n	4084c6 <__aeabi_dcmpun+0x26>
  4084c0:	f04f 0000 	mov.w	r0, #0
  4084c4:	4770      	bx	lr
  4084c6:	f04f 0001 	mov.w	r0, #1
  4084ca:	4770      	bx	lr

004084cc <__aeabi_d2iz>:
  4084cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4084d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4084d4:	d215      	bcs.n	408502 <__aeabi_d2iz+0x36>
  4084d6:	d511      	bpl.n	4084fc <__aeabi_d2iz+0x30>
  4084d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4084dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4084e0:	d912      	bls.n	408508 <__aeabi_d2iz+0x3c>
  4084e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4084e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4084ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4084ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4084f2:	fa23 f002 	lsr.w	r0, r3, r2
  4084f6:	bf18      	it	ne
  4084f8:	4240      	negne	r0, r0
  4084fa:	4770      	bx	lr
  4084fc:	f04f 0000 	mov.w	r0, #0
  408500:	4770      	bx	lr
  408502:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408506:	d105      	bne.n	408514 <__aeabi_d2iz+0x48>
  408508:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40850c:	bf08      	it	eq
  40850e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408512:	4770      	bx	lr
  408514:	f04f 0000 	mov.w	r0, #0
  408518:	4770      	bx	lr
  40851a:	bf00      	nop

0040851c <__aeabi_uldivmod>:
  40851c:	b953      	cbnz	r3, 408534 <__aeabi_uldivmod+0x18>
  40851e:	b94a      	cbnz	r2, 408534 <__aeabi_uldivmod+0x18>
  408520:	2900      	cmp	r1, #0
  408522:	bf08      	it	eq
  408524:	2800      	cmpeq	r0, #0
  408526:	bf1c      	itt	ne
  408528:	f04f 31ff 	movne.w	r1, #4294967295
  40852c:	f04f 30ff 	movne.w	r0, #4294967295
  408530:	f000 b97a 	b.w	408828 <__aeabi_idiv0>
  408534:	f1ad 0c08 	sub.w	ip, sp, #8
  408538:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40853c:	f000 f806 	bl	40854c <__udivmoddi4>
  408540:	f8dd e004 	ldr.w	lr, [sp, #4]
  408544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408548:	b004      	add	sp, #16
  40854a:	4770      	bx	lr

0040854c <__udivmoddi4>:
  40854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408550:	468c      	mov	ip, r1
  408552:	460d      	mov	r5, r1
  408554:	4604      	mov	r4, r0
  408556:	9e08      	ldr	r6, [sp, #32]
  408558:	2b00      	cmp	r3, #0
  40855a:	d151      	bne.n	408600 <__udivmoddi4+0xb4>
  40855c:	428a      	cmp	r2, r1
  40855e:	4617      	mov	r7, r2
  408560:	d96d      	bls.n	40863e <__udivmoddi4+0xf2>
  408562:	fab2 fe82 	clz	lr, r2
  408566:	f1be 0f00 	cmp.w	lr, #0
  40856a:	d00b      	beq.n	408584 <__udivmoddi4+0x38>
  40856c:	f1ce 0c20 	rsb	ip, lr, #32
  408570:	fa01 f50e 	lsl.w	r5, r1, lr
  408574:	fa20 fc0c 	lsr.w	ip, r0, ip
  408578:	fa02 f70e 	lsl.w	r7, r2, lr
  40857c:	ea4c 0c05 	orr.w	ip, ip, r5
  408580:	fa00 f40e 	lsl.w	r4, r0, lr
  408584:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408588:	0c25      	lsrs	r5, r4, #16
  40858a:	fbbc f8fa 	udiv	r8, ip, sl
  40858e:	fa1f f987 	uxth.w	r9, r7
  408592:	fb0a cc18 	mls	ip, sl, r8, ip
  408596:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40859a:	fb08 f309 	mul.w	r3, r8, r9
  40859e:	42ab      	cmp	r3, r5
  4085a0:	d90a      	bls.n	4085b8 <__udivmoddi4+0x6c>
  4085a2:	19ed      	adds	r5, r5, r7
  4085a4:	f108 32ff 	add.w	r2, r8, #4294967295
  4085a8:	f080 8123 	bcs.w	4087f2 <__udivmoddi4+0x2a6>
  4085ac:	42ab      	cmp	r3, r5
  4085ae:	f240 8120 	bls.w	4087f2 <__udivmoddi4+0x2a6>
  4085b2:	f1a8 0802 	sub.w	r8, r8, #2
  4085b6:	443d      	add	r5, r7
  4085b8:	1aed      	subs	r5, r5, r3
  4085ba:	b2a4      	uxth	r4, r4
  4085bc:	fbb5 f0fa 	udiv	r0, r5, sl
  4085c0:	fb0a 5510 	mls	r5, sl, r0, r5
  4085c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4085c8:	fb00 f909 	mul.w	r9, r0, r9
  4085cc:	45a1      	cmp	r9, r4
  4085ce:	d909      	bls.n	4085e4 <__udivmoddi4+0x98>
  4085d0:	19e4      	adds	r4, r4, r7
  4085d2:	f100 33ff 	add.w	r3, r0, #4294967295
  4085d6:	f080 810a 	bcs.w	4087ee <__udivmoddi4+0x2a2>
  4085da:	45a1      	cmp	r9, r4
  4085dc:	f240 8107 	bls.w	4087ee <__udivmoddi4+0x2a2>
  4085e0:	3802      	subs	r0, #2
  4085e2:	443c      	add	r4, r7
  4085e4:	eba4 0409 	sub.w	r4, r4, r9
  4085e8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4085ec:	2100      	movs	r1, #0
  4085ee:	2e00      	cmp	r6, #0
  4085f0:	d061      	beq.n	4086b6 <__udivmoddi4+0x16a>
  4085f2:	fa24 f40e 	lsr.w	r4, r4, lr
  4085f6:	2300      	movs	r3, #0
  4085f8:	6034      	str	r4, [r6, #0]
  4085fa:	6073      	str	r3, [r6, #4]
  4085fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408600:	428b      	cmp	r3, r1
  408602:	d907      	bls.n	408614 <__udivmoddi4+0xc8>
  408604:	2e00      	cmp	r6, #0
  408606:	d054      	beq.n	4086b2 <__udivmoddi4+0x166>
  408608:	2100      	movs	r1, #0
  40860a:	e886 0021 	stmia.w	r6, {r0, r5}
  40860e:	4608      	mov	r0, r1
  408610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408614:	fab3 f183 	clz	r1, r3
  408618:	2900      	cmp	r1, #0
  40861a:	f040 808e 	bne.w	40873a <__udivmoddi4+0x1ee>
  40861e:	42ab      	cmp	r3, r5
  408620:	d302      	bcc.n	408628 <__udivmoddi4+0xdc>
  408622:	4282      	cmp	r2, r0
  408624:	f200 80fa 	bhi.w	40881c <__udivmoddi4+0x2d0>
  408628:	1a84      	subs	r4, r0, r2
  40862a:	eb65 0503 	sbc.w	r5, r5, r3
  40862e:	2001      	movs	r0, #1
  408630:	46ac      	mov	ip, r5
  408632:	2e00      	cmp	r6, #0
  408634:	d03f      	beq.n	4086b6 <__udivmoddi4+0x16a>
  408636:	e886 1010 	stmia.w	r6, {r4, ip}
  40863a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40863e:	b912      	cbnz	r2, 408646 <__udivmoddi4+0xfa>
  408640:	2701      	movs	r7, #1
  408642:	fbb7 f7f2 	udiv	r7, r7, r2
  408646:	fab7 fe87 	clz	lr, r7
  40864a:	f1be 0f00 	cmp.w	lr, #0
  40864e:	d134      	bne.n	4086ba <__udivmoddi4+0x16e>
  408650:	1beb      	subs	r3, r5, r7
  408652:	0c3a      	lsrs	r2, r7, #16
  408654:	fa1f fc87 	uxth.w	ip, r7
  408658:	2101      	movs	r1, #1
  40865a:	fbb3 f8f2 	udiv	r8, r3, r2
  40865e:	0c25      	lsrs	r5, r4, #16
  408660:	fb02 3318 	mls	r3, r2, r8, r3
  408664:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408668:	fb0c f308 	mul.w	r3, ip, r8
  40866c:	42ab      	cmp	r3, r5
  40866e:	d907      	bls.n	408680 <__udivmoddi4+0x134>
  408670:	19ed      	adds	r5, r5, r7
  408672:	f108 30ff 	add.w	r0, r8, #4294967295
  408676:	d202      	bcs.n	40867e <__udivmoddi4+0x132>
  408678:	42ab      	cmp	r3, r5
  40867a:	f200 80d1 	bhi.w	408820 <__udivmoddi4+0x2d4>
  40867e:	4680      	mov	r8, r0
  408680:	1aed      	subs	r5, r5, r3
  408682:	b2a3      	uxth	r3, r4
  408684:	fbb5 f0f2 	udiv	r0, r5, r2
  408688:	fb02 5510 	mls	r5, r2, r0, r5
  40868c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408690:	fb0c fc00 	mul.w	ip, ip, r0
  408694:	45a4      	cmp	ip, r4
  408696:	d907      	bls.n	4086a8 <__udivmoddi4+0x15c>
  408698:	19e4      	adds	r4, r4, r7
  40869a:	f100 33ff 	add.w	r3, r0, #4294967295
  40869e:	d202      	bcs.n	4086a6 <__udivmoddi4+0x15a>
  4086a0:	45a4      	cmp	ip, r4
  4086a2:	f200 80b8 	bhi.w	408816 <__udivmoddi4+0x2ca>
  4086a6:	4618      	mov	r0, r3
  4086a8:	eba4 040c 	sub.w	r4, r4, ip
  4086ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4086b0:	e79d      	b.n	4085ee <__udivmoddi4+0xa2>
  4086b2:	4631      	mov	r1, r6
  4086b4:	4630      	mov	r0, r6
  4086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4086ba:	f1ce 0420 	rsb	r4, lr, #32
  4086be:	fa05 f30e 	lsl.w	r3, r5, lr
  4086c2:	fa07 f70e 	lsl.w	r7, r7, lr
  4086c6:	fa20 f804 	lsr.w	r8, r0, r4
  4086ca:	0c3a      	lsrs	r2, r7, #16
  4086cc:	fa25 f404 	lsr.w	r4, r5, r4
  4086d0:	ea48 0803 	orr.w	r8, r8, r3
  4086d4:	fbb4 f1f2 	udiv	r1, r4, r2
  4086d8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4086dc:	fb02 4411 	mls	r4, r2, r1, r4
  4086e0:	fa1f fc87 	uxth.w	ip, r7
  4086e4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4086e8:	fb01 f30c 	mul.w	r3, r1, ip
  4086ec:	42ab      	cmp	r3, r5
  4086ee:	fa00 f40e 	lsl.w	r4, r0, lr
  4086f2:	d909      	bls.n	408708 <__udivmoddi4+0x1bc>
  4086f4:	19ed      	adds	r5, r5, r7
  4086f6:	f101 30ff 	add.w	r0, r1, #4294967295
  4086fa:	f080 808a 	bcs.w	408812 <__udivmoddi4+0x2c6>
  4086fe:	42ab      	cmp	r3, r5
  408700:	f240 8087 	bls.w	408812 <__udivmoddi4+0x2c6>
  408704:	3902      	subs	r1, #2
  408706:	443d      	add	r5, r7
  408708:	1aeb      	subs	r3, r5, r3
  40870a:	fa1f f588 	uxth.w	r5, r8
  40870e:	fbb3 f0f2 	udiv	r0, r3, r2
  408712:	fb02 3310 	mls	r3, r2, r0, r3
  408716:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40871a:	fb00 f30c 	mul.w	r3, r0, ip
  40871e:	42ab      	cmp	r3, r5
  408720:	d907      	bls.n	408732 <__udivmoddi4+0x1e6>
  408722:	19ed      	adds	r5, r5, r7
  408724:	f100 38ff 	add.w	r8, r0, #4294967295
  408728:	d26f      	bcs.n	40880a <__udivmoddi4+0x2be>
  40872a:	42ab      	cmp	r3, r5
  40872c:	d96d      	bls.n	40880a <__udivmoddi4+0x2be>
  40872e:	3802      	subs	r0, #2
  408730:	443d      	add	r5, r7
  408732:	1aeb      	subs	r3, r5, r3
  408734:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408738:	e78f      	b.n	40865a <__udivmoddi4+0x10e>
  40873a:	f1c1 0720 	rsb	r7, r1, #32
  40873e:	fa22 f807 	lsr.w	r8, r2, r7
  408742:	408b      	lsls	r3, r1
  408744:	fa05 f401 	lsl.w	r4, r5, r1
  408748:	ea48 0303 	orr.w	r3, r8, r3
  40874c:	fa20 fe07 	lsr.w	lr, r0, r7
  408750:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408754:	40fd      	lsrs	r5, r7
  408756:	ea4e 0e04 	orr.w	lr, lr, r4
  40875a:	fbb5 f9fc 	udiv	r9, r5, ip
  40875e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408762:	fb0c 5519 	mls	r5, ip, r9, r5
  408766:	fa1f f883 	uxth.w	r8, r3
  40876a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40876e:	fb09 f408 	mul.w	r4, r9, r8
  408772:	42ac      	cmp	r4, r5
  408774:	fa02 f201 	lsl.w	r2, r2, r1
  408778:	fa00 fa01 	lsl.w	sl, r0, r1
  40877c:	d908      	bls.n	408790 <__udivmoddi4+0x244>
  40877e:	18ed      	adds	r5, r5, r3
  408780:	f109 30ff 	add.w	r0, r9, #4294967295
  408784:	d243      	bcs.n	40880e <__udivmoddi4+0x2c2>
  408786:	42ac      	cmp	r4, r5
  408788:	d941      	bls.n	40880e <__udivmoddi4+0x2c2>
  40878a:	f1a9 0902 	sub.w	r9, r9, #2
  40878e:	441d      	add	r5, r3
  408790:	1b2d      	subs	r5, r5, r4
  408792:	fa1f fe8e 	uxth.w	lr, lr
  408796:	fbb5 f0fc 	udiv	r0, r5, ip
  40879a:	fb0c 5510 	mls	r5, ip, r0, r5
  40879e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4087a2:	fb00 f808 	mul.w	r8, r0, r8
  4087a6:	45a0      	cmp	r8, r4
  4087a8:	d907      	bls.n	4087ba <__udivmoddi4+0x26e>
  4087aa:	18e4      	adds	r4, r4, r3
  4087ac:	f100 35ff 	add.w	r5, r0, #4294967295
  4087b0:	d229      	bcs.n	408806 <__udivmoddi4+0x2ba>
  4087b2:	45a0      	cmp	r8, r4
  4087b4:	d927      	bls.n	408806 <__udivmoddi4+0x2ba>
  4087b6:	3802      	subs	r0, #2
  4087b8:	441c      	add	r4, r3
  4087ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4087be:	eba4 0408 	sub.w	r4, r4, r8
  4087c2:	fba0 8902 	umull	r8, r9, r0, r2
  4087c6:	454c      	cmp	r4, r9
  4087c8:	46c6      	mov	lr, r8
  4087ca:	464d      	mov	r5, r9
  4087cc:	d315      	bcc.n	4087fa <__udivmoddi4+0x2ae>
  4087ce:	d012      	beq.n	4087f6 <__udivmoddi4+0x2aa>
  4087d0:	b156      	cbz	r6, 4087e8 <__udivmoddi4+0x29c>
  4087d2:	ebba 030e 	subs.w	r3, sl, lr
  4087d6:	eb64 0405 	sbc.w	r4, r4, r5
  4087da:	fa04 f707 	lsl.w	r7, r4, r7
  4087de:	40cb      	lsrs	r3, r1
  4087e0:	431f      	orrs	r7, r3
  4087e2:	40cc      	lsrs	r4, r1
  4087e4:	6037      	str	r7, [r6, #0]
  4087e6:	6074      	str	r4, [r6, #4]
  4087e8:	2100      	movs	r1, #0
  4087ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4087ee:	4618      	mov	r0, r3
  4087f0:	e6f8      	b.n	4085e4 <__udivmoddi4+0x98>
  4087f2:	4690      	mov	r8, r2
  4087f4:	e6e0      	b.n	4085b8 <__udivmoddi4+0x6c>
  4087f6:	45c2      	cmp	sl, r8
  4087f8:	d2ea      	bcs.n	4087d0 <__udivmoddi4+0x284>
  4087fa:	ebb8 0e02 	subs.w	lr, r8, r2
  4087fe:	eb69 0503 	sbc.w	r5, r9, r3
  408802:	3801      	subs	r0, #1
  408804:	e7e4      	b.n	4087d0 <__udivmoddi4+0x284>
  408806:	4628      	mov	r0, r5
  408808:	e7d7      	b.n	4087ba <__udivmoddi4+0x26e>
  40880a:	4640      	mov	r0, r8
  40880c:	e791      	b.n	408732 <__udivmoddi4+0x1e6>
  40880e:	4681      	mov	r9, r0
  408810:	e7be      	b.n	408790 <__udivmoddi4+0x244>
  408812:	4601      	mov	r1, r0
  408814:	e778      	b.n	408708 <__udivmoddi4+0x1bc>
  408816:	3802      	subs	r0, #2
  408818:	443c      	add	r4, r7
  40881a:	e745      	b.n	4086a8 <__udivmoddi4+0x15c>
  40881c:	4608      	mov	r0, r1
  40881e:	e708      	b.n	408632 <__udivmoddi4+0xe6>
  408820:	f1a8 0802 	sub.w	r8, r8, #2
  408824:	443d      	add	r5, r7
  408826:	e72b      	b.n	408680 <__udivmoddi4+0x134>

00408828 <__aeabi_idiv0>:
  408828:	4770      	bx	lr
  40882a:	bf00      	nop

0040882c <CSWTCH.7>:
  40882c:	0100 0000 0300 0000 0200 0000 4449 454c     ............IDLE
  40883c:	0000 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  40884c:	7653 0063 6166 686c 2061 6d65 6320 6972     Svc.falha em cri
  40885c:	7261 6120 7120 6575 6575 7820 7551 7565     ar a queue xQueu
  40886c:	4165 4344 0020 0000 4441 0043 6146 6c69     eADC ...ADC.Fail
  40887c:	6465 7420 206f 7263 6165 6574 7420 7365     ed to create tes
  40888c:	2074 4441 2043 6174 6b73 000d 7270 636f     t ADC task..proc
  40889c:	0000 0000 4441 3a43 2520 2066 000a 0000     ....ADC: %f ....
  4088ac:	614e 206f 6863 6765 756f 7520 206d 6f6e     Nao chegou um no
  4088bc:	6f76 6420 6461 206f 6d65 3120 7320 6765     vo dado em 1 seg
  4088cc:	6e75 6f64 0020 0000 7473 6361 206b 766f     undo ...stack ov
  4088dc:	7265 6c66 776f 2520 2078 7325 0a0d 0000     erflow %x %s....

004088ec <_global_impure_ptr>:
  4088ec:	0010 2040 4e49 0046 6e69 0066 414e 004e     ..@ INF.inf.NAN.
  4088fc:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40890c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40891c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40892c:	296c 0000 0030 0000                         l)..0...

00408934 <blanks.7238>:
  408934:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408944 <zeroes.7239>:
  408944:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  408954:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  408964:	0000 0000                                   ....

00408968 <__mprec_bigtens>:
  408968:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  408978:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  408988:	bf3c 7f73 4fdd 7515                         <.s..O.u

00408990 <__mprec_tens>:
  408990:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4089a0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4089b0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4089c0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4089d0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4089e0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4089f0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  408a00:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  408a10:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  408a20:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  408a30:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  408a40:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  408a50:	9db4 79d9 7843 44ea                         ...yCx.D

00408a58 <p05.6055>:
  408a58:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  408a68:	4f50 4953 0058 0000 002e 0000               POSIX.......

00408a74 <_ctype_>:
  408a74:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  408a84:	2020 2020 2020 2020 2020 2020 2020 2020                     
  408a94:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  408aa4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  408ab4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  408ac4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  408ad4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408ae4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408af4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00408b78 <_init>:
  408b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b7a:	bf00      	nop
  408b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408b7e:	bc08      	pop	{r3}
  408b80:	469e      	mov	lr, r3
  408b82:	4770      	bx	lr

00408b84 <__init_array_start>:
  408b84:	00405981 	.word	0x00405981

00408b88 <__frame_dummy_init_array_entry>:
  408b88:	00400165                                e.@.

00408b8c <_fini>:
  408b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b8e:	bf00      	nop
  408b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408b92:	bc08      	pop	{r3}
  408b94:	469e      	mov	lr, r3
  408b96:	4770      	bx	lr

00408b98 <__fini_array_start>:
  408b98:	00400141 	.word	0x00400141
